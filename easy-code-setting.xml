<application>
  <component name="EasyCodeSetting">
    <option name="author" value="hzg" />
    <option name="currTemplateGroupName" value="mybatis-plus" />
    <option name="globalConfigGroupMap">
      <map>
        <entry key="Default">
          <value>
            <GlobalConfigGroup>
              <option name="elementList">
                <list>
                  <GlobalConfig>
                    <option name="name" value="init" />
                    <option name="value" value="##初始化区域&#10;&#10;##去掉表的t_前缀&#10;&#10;$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(&quot;t_&quot;,&quot;&quot;)))&#10;&#10;##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($column.name.startsWith(&quot;is&quot;) &amp;&amp; $column.type.equals(&quot;java.lang.Boolean&quot;))&#10;    $!column.setName($tool.firstLowerCase($column.name.substring(2)))&#10;#end&#10;#end&#10;&#10;##实现动态排除列&#10;#set($temp = $tool.newHashSet(&quot;testCreateTime&quot;, &quot;otherColumn&quot;))&#10;#foreach($item in $temp)&#10;    #set($newList = $tool.newArrayList())&#10;    #foreach($column in $tableInfo.fullColumn)&#10;        #if($column.name!=$item)&#10;            ##带有反回值的方法调用时使用$tool.call来消除返回值&#10;            $tool.call($newList.add($column))&#10;        #end&#10;    #end&#10;    ##重新保存&#10;    $tableInfo.setFullColumn($newList)&#10;#end&#10;&#10;##对importList进行篡改&#10;#set($temp = $tool.newHashSet())&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(!$column.type.startsWith(&quot;java.lang.&quot;))&#10;        ##带有反回值的方法调用时使用$tool.call来消除返回值&#10;        $tool.call($temp.add($column.type))&#10;    #end&#10;#end&#10;##覆盖&#10;###set($importList = $temp)" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="define" />
                    <option name="value" value="##（Velocity宏定义）&#10;&#10;##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(&quot;Test&quot;)&#10;#macro(setTableSuffix $suffix)&#10;    #set($tableName = $!tool.append($tableInfo.name, $suffix))&#10;#end&#10;&#10;##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(&quot;Test&quot;)&#10;#macro(setPackageSuffix $suffix)&#10;#if($suffix!=&quot;&quot;)package #end#if($tableInfo.savePackageName!=&quot;&quot;)$!{tableInfo.savePackageName}.#{end}$!suffix;&#10;#end&#10;&#10;##定义直接保存路径与文件名简化的宏定义，调用方式：#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;#macro(save $path $fileName)&#10;    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))&#10;    $!callback.setFileName($tool.append($tableInfo.name, $fileName))&#10;#end&#10;&#10;##定义表注释的宏定义，调用方式：#tableComment(&quot;注释信息&quot;)&#10;#macro(tableComment $desc)&#10;/**&#10; * $!{tableComment}$desc&#10; *&#10; * @author $author&#10; * @since $!time.currTime(&quot;yyyy/MM/dd&quot;)&#10; */&#10;#end&#10;&#10;##定义表注释的宏定义，调用方式：#tableComment(&quot;注释信息&quot;)&#10;#macro(classComment $desc)&#10;/**&#10; * $desc&#10; *&#10; * @author $author&#10; * @since $!time.currTime(&quot;yyyy/MM/dd&quot;)&#10; */&#10;#end&#10;&#10;##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)&#10;#macro(getSetMethod $column)&#10;&#10;    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {&#10;        return $!{column.name};&#10;    }&#10;&#10;    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {&#10;        this.$!{column.name} = $!{column.name};&#10;    }&#10;#end" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="autoImport" />
                    <option name="value" value="##自动导入包（仅导入实体属性需要的包，通常用于实体类）&#10;#foreach($import in $importList)&#10;import $!import;&#10;#end" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="mybatisSupport" />
                    <option name="value" value="##针对Mybatis 进行支持，主要用于生成xml文件&#10;#foreach($column in $tableInfo.fullColumn)&#10;    ##储存列类型&#10;    $tool.call($column.ext.put(&quot;sqlType&quot;, $tool.getField($column.obj.dataType, &quot;typeName&quot;)))&#10;    #if($tool.newHashSet(&quot;java.lang.String&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;VARCHAR&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Boolean&quot;, &quot;boolean&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;BOOLEAN&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Byte&quot;, &quot;byte&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;BYTE&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Integer&quot;, &quot;int&quot;, &quot;java.lang.Short&quot;, &quot;short&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;INTEGER&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Long&quot;, &quot;long&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;INTEGER&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Float&quot;, &quot;float&quot;, &quot;java.lang.Double&quot;, &quot;double&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;NUMERIC&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.util.Date&quot;, &quot;java.sql.Timestamp&quot;, &quot;java.time.Instant&quot;, &quot;java.time.LocalDateTime&quot;, &quot;java.time.OffsetDateTime&quot;, &quot;&#9;java.time.ZonedDateTime&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;TIMESTAMP&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.sql.Date&quot;, &quot;java.time.LocalDate&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;TIMESTAMP&quot;)&#10;    #else&#10;        ##其他类型&#10;        #set($jdbcType=&quot;OTHER&quot;)&#10;    #end&#10;    $tool.call($column.ext.put(&quot;jdbcType&quot;, $jdbcType))&#10;#end&#10;&#10;##定义宏，查询所有列&#10;#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end" />
                  </GlobalConfig>
                </list>
              </option>
              <option name="name" value="Default" />
            </GlobalConfigGroup>
          </value>
        </entry>
      </map>
    </option>
    <option name="templateGroupMap">
      <map>
        <entry key="Default">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;&#10;##使用宏定义设置回调（保存位置与文件后缀）&#10;#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;entity&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import java.io.Serializable;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;实体类&quot;)&#10;public class $!{tableInfo.name} implements Serializable {&#10;    private static final long serialVersionUID = $!tool.serial();&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(${column.comment})/**&#10;    * ${column.comment}&#10;    */#end&#10;&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;##使用宏定义实现get,set方法&#10;#getSetMethod($column)&#10;#end&#10;&#10;}" />
                    <option name="name" value="entity.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Dao&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dao&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dao;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import org.apache.ibatis.annotations.Param;&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表数据库访问层&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;public interface $!{tableName} {&#10;&#10;    /**&#10;     * 通过ID查询单条数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 实例对象&#10;     */&#10;    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 查询指定行数据&#10;     *&#10;     * @param offset 查询起始位置&#10;     * @param limit 查询条数&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; queryAllByLimit(@Param(&quot;offset&quot;) int offset, @Param(&quot;limit&quot;) int limit);&#10;&#10;&#10;    /**&#10;     * 通过实体作为筛选条件查询&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; queryAll($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 影响行数&#10;     */&#10;    int insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 影响行数&#10;     */&#10;    int update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 通过主键删除数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 影响行数&#10;     */&#10;    int deleteById($!pk.shortType $!pk.name);&#10;&#10;}" />
                    <option name="name" value="dao.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表服务接口&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;public interface $!{tableName} {&#10;&#10;    /**&#10;     * 通过ID查询单条数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 实例对象&#10;     */&#10;    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 查询多条数据&#10;     *&#10;     * @param offset 查询起始位置&#10;     * @param limit 查询条数&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; queryAllByLimit(int offset, int limit);&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    $!{tableInfo.name} insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 通过主键删除数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 是否成功&#10;     */&#10;    boolean deleteById($!pk.shortType $!pk.name);&#10;&#10;}" />
                    <option name="name" value="service.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;ServiceImpl&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service/impl&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.stereotype.Service;&#10;&#10;import javax.annotation.Resource;&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表服务实现类&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;@Service(&quot;$!tool.firstLowerCase($!{tableInfo.name})Service&quot;)&#10;public class $!{tableName} implements $!{tableInfo.name}Service {&#10;    @Resource&#10;    private $!{tableInfo.name}Dao $!tool.firstLowerCase($!{tableInfo.name})Dao;&#10;&#10;    /**&#10;     * 通过ID查询单条数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 实例对象&#10;     */&#10;    @Override&#10;    public $!{tableInfo.name} queryById($!pk.shortType $!pk.name) {&#10;        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.queryById($!pk.name);&#10;    }&#10;&#10;    /**&#10;     * 查询多条数据&#10;     *&#10;     * @param offset 查询起始位置&#10;     * @param limit 查询条数&#10;     * @return 对象列表&#10;     */&#10;    @Override&#10;    public List&lt;$!{tableInfo.name}&gt; queryAllByLimit(int offset, int limit) {&#10;        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.queryAllByLimit(offset, limit);&#10;    }&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    @Override&#10;    public $!{tableInfo.name} insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.insert($!tool.firstLowerCase($!{tableInfo.name}));&#10;        return $!tool.firstLowerCase($!{tableInfo.name});&#10;    }&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    @Override&#10;    public $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.update($!tool.firstLowerCase($!{tableInfo.name}));&#10;        return this.queryById($!{tool.firstLowerCase($!{tableInfo.name})}.get$!tool.firstUpperCase($pk.name)());&#10;    }&#10;&#10;    /**&#10;     * 通过主键删除数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 是否成功&#10;     */&#10;    @Override&#10;    public boolean deleteById($!pk.shortType $!pk.name) {&#10;        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.deleteById($!pk.name) &gt; 0;&#10;    }&#10;}" />
                    <option name="name" value="serviceImpl.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Controller&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/controller&quot;))&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import javax.annotation.Resource;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表控制层&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;@RestController&#10;@RequestMapping(&quot;$!tool.firstLowerCase($tableInfo.name)&quot;)&#10;public class $!{tableName} {&#10;    /**&#10;     * 服务对象&#10;     */&#10;    @Resource&#10;    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;&#10;&#10;    /**&#10;     * 通过主键查询单条数据&#10;     *&#10;     * @param id 主键&#10;     * @return 单条数据&#10;     */&#10;    @GetMapping(&quot;selectOne&quot;)&#10;    public $!{tableInfo.name} selectOne($!pk.shortType id) {&#10;        return this.$!{tool.firstLowerCase($tableInfo.name)}Service.queryById(id);&#10;    }&#10;&#10;}" />
                    <option name="name" value="controller.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入mybatis支持&#10;$!mybatisSupport&#10;&#10;##设置保存名称与保存位置&#10;$!callback.setFileName($tool.append($!{tableInfo.name}, &quot;Dao.xml&quot;))&#10;$!callback.setSavePath($tool.append($modulePath, &quot;/src/main/resources/mapper&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&#10;&lt;mapper namespace=&quot;$!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao&quot;&gt;&#10;&#10;    &lt;resultMap type=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot; id=&quot;$!{tableInfo.name}Map&quot;&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;        &lt;result property=&quot;$!column.name&quot; column=&quot;$!column.obj.name&quot; jdbcType=&quot;$!column.ext.jdbcType&quot;/&gt;&#10;#end&#10;    &lt;/resultMap&gt;&#10;&#10;    &lt;!--查询单个--&gt;&#10;    &lt;select id=&quot;queryById&quot; resultMap=&quot;$!{tableInfo.name}Map&quot;&gt;&#10;        select&#10;          #allSqlColumn()&#10;&#10;        from $!{tableInfo.obj.parent.name}.$!tableInfo.obj.name&#10;        where $!pk.obj.name = #{$!pk.name}&#10;    &lt;/select&gt;&#10;&#10;    &lt;!--查询指定行数据--&gt;&#10;    &lt;select id=&quot;queryAllByLimit&quot; resultMap=&quot;$!{tableInfo.name}Map&quot;&gt;&#10;        select&#10;          #allSqlColumn()&#10;&#10;        from $!{tableInfo.obj.parent.name}.$!tableInfo.obj.name&#10;        limit #{offset}, #{limit}&#10;    &lt;/select&gt;&#10;&#10;    &lt;!--通过实体作为筛选条件查询--&gt;&#10;    &lt;select id=&quot;queryAll&quot; resultMap=&quot;$!{tableInfo.name}Map&quot;&gt;&#10;        select&#10;          #allSqlColumn()&#10;&#10;        from $!{tableInfo.obj.parent.name}.$!tableInfo.obj.name&#10;        &lt;where&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;            &lt;if test=&quot;$!column.name != null#if($column.type.equals(&quot;java.lang.String&quot;)) and $!column.name != ''#end&quot;&gt;&#10;                and $!column.obj.name = #{$!column.name}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;    &lt;/select&gt;&#10;&#10;    &lt;!--新增所有列--&gt;&#10;    &lt;insert id=&quot;insert&quot; keyProperty=&quot;$!pk.name&quot; useGeneratedKeys=&quot;true&quot;&gt;&#10;        insert into $!{tableInfo.obj.parent.name}.$!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)&#10;        values (#foreach($column in $tableInfo.otherColumn)#{$!{column.name}}#if($velocityHasNext), #end#end)&#10;    &lt;/insert&gt;&#10;&#10;    &lt;!--通过主键修改数据--&gt;&#10;    &lt;update id=&quot;update&quot;&gt;&#10;        update $!{tableInfo.obj.parent.name}.$!{tableInfo.obj.name}&#10;        &lt;set&gt;&#10;#foreach($column in $tableInfo.otherColumn)&#10;            &lt;if test=&quot;$!column.name != null#if($column.type.equals(&quot;java.lang.String&quot;)) and $!column.name != ''#end&quot;&gt;&#10;                $!column.obj.name = #{$!column.name},&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/set&gt;&#10;        where $!pk.obj.name = #{$!pk.name}&#10;    &lt;/update&gt;&#10;&#10;    &lt;!--通过主键删除--&gt;&#10;    &lt;delete id=&quot;deleteById&quot;&gt;&#10;        delete from $!{tableInfo.obj.parent.name}.$!{tableInfo.obj.name} where $!pk.obj.name = #{$!pk.name}&#10;    &lt;/delete&gt;&#10;&#10;&lt;/mapper&gt;" />
                    <option name="name" value="mapper.xml" />
                  </Template>
                  <Template>
                    <option name="code" value="//调试表原始对象&#10;$!tool.debug($tableInfo.obj)&#10;&#10;//调试列原始对象&#10;$!tool.debug($tableInfo.fullColumn.get(0).obj)&#10;&#10;//调试列原始列类型&#10;$!tool.debug($tableInfo.fullColumn.get(0).obj.dataType)&#10;&#10;//获取原始列类型中的字段&#10;sqlType = $!tool.getField($tableInfo.fullColumn.get(0).obj.dataType, &quot;typeName&quot;)&#10;&#10;//执行原始列类型中的方法&#10;sqlTypeLen = $!tableInfo.fullColumn.get(0).obj.dataType.getLength()" />
                    <option name="name" value="debug.json" />
                  </Template>
                </list>
              </option>
              <option name="name" value="Default" />
            </TemplateGroup>
          </value>
        </entry>
        <entry key="MybatisPlus">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!init&#10;$!define&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;entity&quot;)&#10;&#10;##自动导入包（全局变量）&#10;$!autoImport&#10;import $!{tableInfo.savePackageName}.common.entity.BaseEntity;&#10;import com.baomidou.mybatisplus.annotation.IdType;&#10;import com.baomidou.mybatisplus.annotation.TableId;&#10;import com.baomidou.mybatisplus.annotation.TableName;&#10;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;实体类&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;@TableName(value = &quot;$!{tableInfo.obj.name}&quot;)&#10;@Data&#10;public class $!{tableInfo.name} extends BaseEntity {&#10;    &#10;#foreach($column in $tableInfo.pkColumn)&#10;    #if(${column.comment})&#10;    /**&#10;     * ${column.comment}&#10;     */&#10;    #end&#10;@TableId(value=&quot;$!{column.obj.name}&quot;, type= IdType.AUTO)&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end    &#10;&#10;#foreach($column in $tableInfo.otherColumn)&#10;#if($!{column.obj.name} != &quot;create_by&quot; &amp;&amp; $!{column.obj.name} != &quot;create_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;update_by&quot; &amp;&amp; $!{column.obj.name} != &quot;update_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;is_deleted&quot;)&#10;    #if(${column.comment})/**&#10;     * ${column.comment}&#10;     */&#10;    #end&#10;private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;&#10;#end&#10;#end&#10;&#10;}" />
                    <option name="name" value="entity.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseEntity.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import java.time.LocalDateTime;&#10;import lombok.Data;&#10;&#10;#classComment(&quot;实体基类&quot;) &#10;@Data&#10;public class BaseEntity{&#10;&#10;    /**&#10;     * 是否删除(1为删除，0为未删除)&#10;     */&#10;    @TableLogic&#10;    @TableField(value = &quot;is_deleted&quot;)&#10;    private Boolean deleted;&#10;    &#10;    /** &#10;     * 创建者 &#10;     */&#10;    private String createBy;&#10;&#10;    /** &#10;     * 创建时间 &#10;     */&#10;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    private LocalDateTime createTime;&#10;&#10;    /** &#10;     * 更新者 &#10;     */&#10;    private String updateBy;&#10;&#10;    /** &#10;     * 更新时间 &#10;     */&#10;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    private LocalDateTime updateTime;&#10;}" />
                    <option name="name" value="baseEntity.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseDto.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import java.time.LocalDateTime;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;&#10;#classComment(&quot;Dto实体基类&quot;) &#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;public class BaseDto extends PageRequest{&#10;&#10;    /**&#10;     * 是否删除(1为删除，0为未删除)&#10;     */&#10;    private Boolean deleted;&#10;    &#10;    /** &#10;     * 创建者 &#10;     */&#10;    private String createBy;&#10;&#10;    /** &#10;     * 创建时间 &#10;     */&#10;    private LocalDateTime createTime;&#10;&#10;    /** &#10;     * 更新者 &#10;     */&#10;    private String updateBy;&#10;&#10;    /** &#10;     * 更新时间 &#10;     */&#10;    private LocalDateTime updateTime;&#10;}" />
                    <option name="name" value="baseDto.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Dto&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dto&quot;))&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dto;&#10;&#10;$!autoImport&#10;import $!{tableInfo.savePackageName}.common.entity.BaseDto;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;&#10;#tableComment(&quot;Dto&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;public class $!{tableName} extends BaseDto {&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.obj.name} != &quot;create_by&quot; &amp;&amp; $!{column.obj.name} != &quot;create_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;update_by&quot; &amp;&amp; $!{column.obj.name} != &quot;update_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;is_deleted&quot;)&#10;#if(${column.comment})&#10;    /** &#10;     * ${column.comment}&#10;     */&#10;#end&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    &#10;#end    &#10;#end&#10;}" />
                    <option name="name" value="dto.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!init&#10;$!define&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置表后缀（宏定义）&#10;#setTableSuffix(&quot;Mapper&quot;)&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/mapper&quot;, &quot;Mapper.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;mapper&quot;)&#10;&#10;import com.baomidou.mybatisplus.core.mapper.BaseMapper;&#10;import $!{tableInfo.savePackageName}.entity.$!tableInfo.name;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;数据库访问层&quot;)&#10;public interface $!{tableName} extends BaseMapper&lt;$!tableInfo.name&gt; {&#10;&#10;}" />
                    <option name="name" value="mapper.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入mybatis支持&#10;$!init&#10;$!mybatisSupport&#10;&#10;##设置保存名称与保存位置&#10;$!callback.setFileName($tool.append($!{tableInfo.name}, &quot;Mapper.xml&quot;))&#10;$!callback.setSavePath($tool.append($modulePath, &quot;/src/main/resources/mappers&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&#10;&lt;mapper namespace=&quot;$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper&quot;&gt;&#10;    &lt;resultMap type=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot; id=&quot;BaseResultMap&quot;&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.obj.name} == &quot;is_deleted&quot;)&#10;        &lt;result property=&quot;deleted&quot; column=&quot;$!column.obj.name&quot; jdbcType=&quot;$!column.ext.jdbcType&quot;/&gt;&#10;#else&#10;        &lt;result property=&quot;$!column.name&quot; column=&quot;$!column.obj.name&quot; jdbcType=&quot;$!column.ext.jdbcType&quot;/&gt;&#10;#end    &#10;#end&#10;    &lt;/resultMap&gt;&#10;&#10;    &lt;sql id=&quot;BaseSql&quot;&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{velocityCount} == $!{tableInfo.fullColumn.size()})&#10;        $!{column.obj.name}&#10;    #else&#10;        $!{column.obj.name},&#10;#end&#10;#end&#10;&lt;/sql&gt;&#10;&lt;/mapper&gt;" />
                    <option name="name" value="mapper.xml" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;服务接口&quot;)&#10;public interface $!{tableName} {&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return List&lt;$!{tableInfo.name}&gt;&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; get$!{tableInfo.name}List($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param dto 查询条件&#10;     * @return PageResult&lt;$!{tableInfo.name}&gt;&#10;     */&#10;    PageResult&lt;$!{tableInfo.name}&gt; get$!{tableInfo.name}PageList($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return $!{tableInfo.name}&#10;     */&#10;    $!{tableInfo.name} get$!{tableInfo.name}ById($!pk.shortType id);&#10;&#10;    /**&#10;     * 通过id集合查找$!{tableComment}&#10;     * @param ids id集合&#10;     * @return List&lt;$!{tableInfo.name}&gt;&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; get$!{tableInfo.name}ListByIds(List&lt;$!pk.shortType&gt; ids);&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     */&#10;    int save$!{tableInfo.name}($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dtoList $!{tableComment}信息集合&#10;     */&#10;    boolean batchSave$!{tableInfo.name}(List&lt;$!{tableInfo.name}Dto&gt; dtoList);&#10;&#10;    /**&#10;     * 修改$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     */&#10;    int update$!{tableInfo.name}($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 批量修改$!{tableComment}&#10;     *&#10;     * @param dtoList $!{tableComment}信息集合&#10;     */&#10;    boolean batchUpdate$!{tableInfo.name}(List&lt;$!{tableInfo.name}Dto&gt; dtoList);&#10;&#10;    /**&#10;     * 删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     */&#10;    int delete$!{tableInfo.name}ById($!pk.shortType id);&#10;&#10;    /**&#10;     * 批量删除$!{tableComment}&#10;     *&#10;     * @param ids id集合&#10;     */&#10;    int batchDeleteByIds(List&lt;$!pk.shortType&gt; ids);&#10;}" />
                    <option name="name" value="service.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($className = $tool.append($tableInfo.name, &quot;ServiceImpl&quot;))&#10;#set($entityClass = $tableInfo.name)&#10;#set($entityClassUpper = $tableInfo.obj.name.toUpperCase())&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($className, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service/impl&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;&#10;&#10;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;&#10;import com.baomidou.mybatisplus.core.metadata.OrderItem;&#10;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;&#10;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.common.enums.ExceptionEnum;&#10;import $!{tableInfo.savePackageName}.entity.$!{entityClass};&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import $!{tableInfo.savePackageName}.mapper.$!{entityClass}Mapper;&#10;import $!{tableInfo.savePackageName}.service.$!{entityClass}Service;&#10;import lombok.RequiredArgsConstructor;&#10;import org.apache.commons.lang3.StringUtils;&#10;import org.springframework.beans.BeanUtils;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.util.List;&#10;import java.util.Objects;&#10;import java.util.stream.Collectors;&#10;&#10;#tableComment(&quot;服务实现类&quot;)&#10;@Service&#10;@RequiredArgsConstructor(onConstructor = @__(@Autowired))&#10;public class $!{className} extends ServiceImpl&lt;$!{entityClass}Mapper, $!{entityClass}&gt; &#10;                           implements $!{entityClass}Service {&#10;&#10;    private final $!{entityClass}Mapper $!{entityName}Mapper;&#10;&#10;    /**&#10;     * 查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return List&lt;$!{entityClass}&gt;&#10;     */&#10;    @Override&#10;    public List&lt;$!{entityClass}&gt; get$!{entityClass}List($!{entityClass}Dto dto) {&#10;        QueryWrapper&lt;$!{entityClass}&gt; wrapper = createQueryWrapper(dto);&#10;        return $!{entityName}Mapper.selectList(wrapper);&#10;    }&#10;&#10;    /**&#10;     * 创建查询条件&#10;     *&#10;     * @param dto 查询条件&#10;     * @return QueryWrapper&lt;$!{entityClass}&gt;&#10;     */&#10;    private QueryWrapper&lt;$!{entityClass}&gt; createQueryWrapper($!{entityClass}Dto dto){&#10;        QueryWrapper&lt;$!{entityClass}&gt; queryWrapper = new QueryWrapper&lt;&gt;();&#10;        if(Objects.nonNull(dto)){&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if($!{column.name} == &quot;isDeleted&quot;)&#10;        if(Objects.nonNull(dto.getDeleted())){&#10;    #elseif($!{column.type} == &quot;java.lang.String&quot;)&#10;        if(StringUtils.isNotBlank(dto.get$!{tool.firstUpperCase($column.name)}())){&#10;    #else&#10;        if(Objects.nonNull(dto.get$!tool.firstUpperCase($column.name)())){&#10;    #end&#10;    #if($!{column.name} == &quot;title&quot; || $!{column.name} == &quot;name&quot;)&#10;        queryWrapper.like(&quot;$!{column.name}&quot;, dto.get$!tool.firstUpperCase($column.name)());&#10;    #elseif($!{column.name} == &quot;isDeleted&quot;)&#10;        queryWrapper.eq(&quot;deleted&quot;, dto.getDeleted());&#10;    #else&#10;        queryWrapper.eq(&quot;$!{column.name}&quot;, dto.get$!tool.firstUpperCase($column.name)());&#10;    #end&#10;        }&#10;#end&#10;        }&#10;        return queryWrapper;&#10;    }&#10;&#10;    /**&#10;     * 查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param dto 查询条件&#10;     * @return PageResult&lt;$!{entityClass}&gt;&#10;     */&#10;    @Override&#10;    public PageResult&lt;$!{entityClass}&gt; get$!{entityClass}PageList($!{entityClass}Dto dto) {&#10;        QueryWrapper&lt;$!{entityClass}&gt; wrapper = createQueryWrapper(dto);&#10;        String orderBy;&#10;        if(StringUtils.isNotBlank(dto.getOrderBy())){&#10;            orderBy = dto.getOrderBy();&#10;        }else {&#10;            orderBy = &quot;id desc&quot;;&#10;        }&#10;        &#10;        Page&lt;$!{entityClass}&gt; page = new Page&lt;&gt;(dto.getPage(), dto.getSize());&#10;        page.addOrder(OrderItem.desc(orderBy));&#10;        Page&lt;$!{entityClass}&gt; $!{entityName}Page = $!{entityName}Mapper.selectPage(page, wrapper);&#10;    &#10;        PageResult&lt;$!{entityClass}&gt; pageResult = new PageResult&lt;&gt;($!{entityName}Page.getTotal(), &#10;                   $!{entityName}Page.getPages(), $!{entityName}Page.getRecords());&#10;        pageResult.setPage(dto.getPage());&#10;        pageResult.setSize(dto.getSize());&#10;        pageResult.setHasPrevious($!{entityName}Page.hasPrevious());&#10;        pageResult.setHasNext($!{entityName}Page.hasNext());&#10;&#10;        return pageResult;&#10;    }&#10;&#10;    /**&#10;     * 通过ID查找$!{tableComment}&#10;     *&#10;     * @param id $!{tableComment}id&#10;     * @return $!{entityClass}&#10;     */&#10;    @Override&#10;    public $!{entityClass} get$!{entityClass}ById($!pk.shortType id) {&#10;        $!{entityClass} $!{entityName} = $!{entityName}Mapper.selectById(id);&#10;        ExceptionEnum.$!{entityClassUpper}_IS_NOT_EXIST.&#10;                      assertException(Objects::isNull, $!{entityName});&#10;                      &#10;        return $!{entityName};&#10;    }&#10;&#10;    /**&#10;     * 通过id集合查找$!{tableComment}集合&#10;     *&#10;     * @param ids id集合&#10;     * @return List&lt;$!{entityClass}&gt;&#10;     */&#10;    @Override&#10;    public List&lt;$!{entityClass}&gt; get$!{entityClass}ListByIds(List&lt;$!pk.shortType&gt; ids) {&#10;        return listByIds(ids);&#10;    }&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public int save$!{entityClass}($!{entityClass}Dto dto) {&#10;        $!{entityClass} $!{entityName} = $!{entityName}Dto2$!{entityClass}(dto);&#10;        int result = $!{entityName}Mapper.insert($!{entityName});&#10;        ExceptionEnum.$!{entityClassUpper}_SAVE_ERROR.&#10;                      assertException(num -&gt; num != 1, result);&#10;        &#10;        return result;&#10;    }&#10;&#10;    /**&#10;     * 批量新增$!{tableComment}&#10;     *&#10;     * @param dtoList $!{tableComment}信息集合&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public boolean batchSave$!{entityClass}(List&lt;$!{entityClass}Dto&gt; dtoList) {&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = dtoList.stream().map(this::$!{entityName}Dto2$!{entityClass}).&#10;                                                collect(Collectors.toList());&#10;        return saveBatch($!{entityName}List);&#10;    }&#10;&#10;    /**&#10;     * $!{entityClass}Dto转$!{entityClass}&#10;     *&#10;     * @param dto {@link $!{entityClass}Dto}&#10;     * @return {@link $!{entityClass}}&#10;     */&#10;    private $!{entityClass} $!{entityName}Dto2$!{entityClass}($!{entityClass}Dto dto){&#10;        $!{entityClass} $!{entityName} = new $!{entityClass}();&#10;        BeanUtils.copyProperties(dto, $!{entityName});&#10;&#10;        return $!{entityName};&#10;    }&#10;&#10;    /**&#10;     * 修改$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public int update$!{entityClass}($!{entityClass}Dto dto) {&#10;        $!{entityClass} $!{entityName} = $!{entityName}Dto2$!{entityClass}(dto);&#10;        int result = $!{entityName}Mapper.updateById($!{entityName});&#10;        ExceptionEnum.$!{entityClassUpper}_UPDATE_ERROR.&#10;                      assertException(num -&gt; num != 1, result);&#10;        &#10;        return result;&#10;    }&#10;&#10;    /**&#10;     * 批量修改$!{tableComment}&#10;     *&#10;     * @param dtoList $!{tableComment}信息集合&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public boolean batchUpdate$!{entityClass}(List&lt;$!{entityClass}Dto&gt; dtoList) {&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = dtoList.stream().map(this::$!{entityName}Dto2$!{entityClass}).&#10;                                                collect(Collectors.toList());&#10;        return updateBatchById($!{entityName}List);&#10;    }&#10;&#10;    /**&#10;     * 删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public int delete$!{entityClass}ById($!pk.shortType id) {&#10;        int result = $!{entityName}Mapper.deleteById(id);&#10;        ExceptionEnum.$!{entityClassUpper}_DELETE_ERROR.&#10;                      assertException(num -&gt; num != 1, result);&#10;        &#10;        return result;&#10;    }&#10;&#10;    /**&#10;     * 批量删除$!{tableComment}&#10;     *&#10;     * @param ids id集合&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public int batchDeleteByIds(List&lt;$!pk.shortType&gt; ids) {&#10;        int result = $!{entityName}Mapper.deleteBatchIds(ids);&#10;        ExceptionEnum.$!{entityClassUpper}_DELETE_ERROR.&#10;                      assertException(num -&gt; num != ids.size(), result);&#10;        &#10;        return result;&#10;    }&#10;}" />
                    <option name="name" value="serviceImpl.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($controllerClass = $tool.append($tableInfo.name, &quot;Controller&quot;))&#10;#set($entityClass = $tableInfo.name)&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($dtoName = $tool.append($tool.firstLowerCase($tableInfo.name),&quot;Dto&quot;))&#10;#set($dtoClass = $tool.append($tableInfo.name, &quot;Dto&quot;))&#10;#set($serviceClass = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;#set($serviceName = $tool.append($tool.firstLowerCase($tableInfo.name),&quot;Service&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($controllerClass, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/controller&quot;))&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.common.entity.Result;&#10;import $!{tableInfo.savePackageName}.dto.$dtoClass;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.service.$serviceClass;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.web.bind.annotation.DeleteMapping;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.PathVariable;&#10;import org.springframework.web.bind.annotation.PostMapping;&#10;import org.springframework.web.bind.annotation.PutMapping;&#10;import org.springframework.web.bind.annotation.RequestBody;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;import javax.validation.Valid;&#10;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;控制层&quot;)&#10;@Slf4j&#10;@RestController&#10;@RequestMapping(&quot;/api/v1/$!{entityName}s&quot;)&#10;@RequiredArgsConstructor(onConstructor = @__(@Autowired))&#10;public class $!{controllerClass} {&#10;&#10;    private final $serviceClass $serviceName;&#10;&#10;    /**&#10;     * 查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return Result&lt;List&lt;$!{entityClass}&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/list&quot;)&#10;    public Result&lt;List&lt;$!{entityClass}&gt;&gt; get$!{entityClass}List($!{entityClass}Dto dto){&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = $!{serviceName}.get$!{entityClass}List(dto);&#10;        return Result.success(&quot;查询$!{tableComment}列表成功&quot;, $!{entityName}List);&#10;    }&#10;&#10;    /**&#10;     * 查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param dto 查询条件&#10;     * @return Result&lt;PageResult&lt;$!{entityClass}&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/page&quot;)&#10;    public Result&lt;PageResult&lt;$!{entityClass}&gt;&gt; get$!{entityClass}PageList($!{entityClass}Dto dto){&#10;        PageResult&lt;$!{entityClass}&gt; pageResult = $!{serviceName}.get$!{entityClass}PageList(dto);&#10;        return Result.success(&quot;查询$!{tableComment}列表成功&quot;, pageResult);&#10;    }&#10;&#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return Result&lt;$!{entityClass}&gt;&#10;     */&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Result&lt;$!{entityClass}&gt; get$!{entityClass}ById(@PathVariable(&quot;id&quot;) $!pk.shortType id){&#10;        $!{entityClass} $!{entityName} = $!{serviceName}.get$!{entityClass}ById(id);&#10;        return Result.success(&quot;查询$!{tableComment}成功&quot;, $!{entityName});&#10;    }&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @PostMapping&#10;    public Result&lt;Void&gt; save$!{entityClass}(@Valid @RequestBody $!{entityClass}Dto dto){&#10;        $!{serviceName}.save$!{entityClass}(dto);&#10;        return Result.success(&quot;新增$!{tableComment}成功&quot;);&#10;    }&#10;&#10;    /**&#10;     * 修改$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public Result&lt;Void&gt; update$!{entityClass}(@PathVariable(&quot;id&quot;) $!pk.shortType id, @RequestBody $!{entityClass}Dto dto){&#10;        dto.setId(id);&#10;        $!{serviceName}.update$!{entityClass}(dto);&#10;        return Result.success(&quot;修改$!{tableComment}成功&quot;);&#10;    }&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return  Result&lt;rows&gt;&#10;     */&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public Result&lt;Void&gt; delete$!{entityClass}ById(@PathVariable(&quot;id&quot;) $!pk.shortType id){&#10;        $!{serviceName}.delete$!{entityClass}ById(id);&#10;        return Result.success(&quot;删除$!{tableComment}成功&quot;);&#10;    }&#10;&#10;    /**&#10;     * 批量删除$!{tableComment}&#10;     *&#10;     * @param ids id集合&#10;     * @return  Result&lt;rows&gt;&#10;     */&#10;    @DeleteMapping(&quot;/batch/ids&quot;)&#10;    public Result&lt;Void&gt; batchDeleteByIds(@RequestBody List&lt;$!pk.shortType&gt; ids){&#10;        $!{serviceName}.batchDeleteByIds(ids);&#10;        return Result.success(&quot;批量删除$!{tableComment}成功&quot;);&#10;    }&#10;}" />
                    <option name="name" value="controller.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;Result.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import $!{tableInfo.savePackageName}.common.enums.ResultCodeEnum;&#10;import lombok.Data;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;    &#10;#classComment(&quot;响应结果封装实体&quot;) &#10;@Data&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class Result&lt;T&gt; {&#10;    &#10;    private boolean success;//是否成功&#10;    private Integer code;//返回码&#10;    private String message;//返回消息&#10;    private T data;//返回数据&#10;&#10;    private Map&lt;String,Object&gt; extend;//扩展数据&#10;    &#10;    public Result() {&#10;    }&#10;&#10;    public Result(boolean flag, Integer code, String message, T data) {&#10;        this.success = flag;&#10;        this.code = code;&#10;        this.message = message;&#10;        this.data = data;&#10;    }&#10;&#10;    public Result(boolean flag, Integer code, String message) {&#10;        this.success = flag;&#10;        this.code = code;&#10;        this.message = message;&#10;    }&#10;&#10;    /**&#10;     * 响应成功&#10;     *&#10;     * @param message 提示信息&#10;     * @return Result&lt;Void&gt;&#10;     */&#10;    public static Result&lt;Void&gt; success(String message){&#10;        return new Result&lt;&gt;(true, ResultCodeEnum.SUCCESS.getCode(), message);&#10;    }&#10;&#10;    /**&#10;     * 响应成功&#10;     *&#10;     * @param message 提示信息&#10;     * @param data 响应数据&#10;     * @return Result&lt;T&gt;&#10;     */&#10;    public static &lt;T&gt; Result&lt;T&gt; success(String message, T data){&#10;        return new Result&lt;&gt;(true, ResultCodeEnum.SUCCESS.getCode(), message, data);&#10;    }&#10;&#10;    /**&#10;     * 响应失败&#10;     *&#10;     * @param code 状态码&#10;     * @param message 提示信息&#10;     * @return Result&lt;Void&gt;&#10;     */&#10;    public static &lt;T&gt; Result&lt;T&gt; error(Integer code, String message){&#10;        return new Result&lt;&gt;(false, code, message, null);&#10;    }&#10;&#10;    /**&#10;     * 扩展数据&#10;     *&#10;     * @param key key&#10;     * @param value value&#10;     * @return Result&#10;     */&#10;    public Result&lt;T&gt; extend(String key, Object value){&#10;        if(null == extend){&#10;            extend = new HashMap&lt;&gt;();&#10;        }&#10;        this.extend.put(key, value);&#10;        return this;&#10;    }&#10;}" />
                    <option name="name" value="result.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;PageResult.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.util.List;&#10;    &#10;#classComment(&quot;分页结果实体&quot;) &#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class PageResult&lt;T&gt; {&#10;&#10;    private Long total;//总记录数&#10;    private Long totalPage;// 总页数&#10;    private List&lt;T&gt; rows;//记录&#10;    private Integer page;&#10;    private Integer size;&#10;    private Boolean hasNext;&#10;    private Boolean hasPrevious;&#10;&#10;    public PageResult(Long total, Long totalPage, List&lt;T&gt; rows) {&#10;        this.total = total;&#10;        this.totalPage = totalPage;&#10;        this.rows = rows;&#10;    }&#10;}" />
                    <option name="name" value="pageResult.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;PageRequest.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import lombok.Setter;&#10;import java.io.Serializable;&#10;    &#10;#classComment(&quot;分页请求基类&quot;) &#10;@Setter&#10;public class PageRequest implements Serializable{&#10;    &#10;    private Integer size;&#10;    private Integer page;&#10;    private String orderBy;&#10;&#10;    public Integer getSize() {&#10;        if (this.size == null || this.size &lt; 0 || this.size &gt; 50){&#10;            setSize(10);&#10;        }&#10;        return size;&#10;    }&#10;&#10;    public Integer getPage() {&#10;        if (this.page == null || this.page &lt; 0) {&#10;            setPage(1);&#10;        }&#10;        return page;&#10;    }&#10;&#10;    public String getOrderBy() {&#10;        return orderBy;&#10;    }&#10;}" />
                    <option name="name" value="pageRequest.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ResultCodeEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;import lombok.Getter;&#10;    &#10;#classComment(&quot;响应状态码&quot;) &#10;@Getter&#10;public enum ResultCodeEnum {&#10;&#10;    SUCCESS(20000,&quot;成功&quot;),&#10;    PARAM_ERROR(21003, &quot;参数不正确&quot;),&#10;    ;&#10;&#10;    private final Integer code;&#10;&#10;&#9;private final String message;&#10;&#9;&#10;&#9;ResultCodeEnum(Integer code, String message) {&#10;&#9;&#9;this.code = code;&#10;&#9;&#9;this.message = message;&#10;&#9;}&#10;}" />
                    <option name="name" value="resultCodeEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($entityClass = $tableInfo.name.toUpperCase())&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;##设置回调&#10;$!callback.setFileName(&quot;ExceptionEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.exception.ServiceExceptionAssert;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import lombok.NoArgsConstructor;&#10;&#10;#classComment(&quot;业务异常枚举定义&quot;) &#10;@Getter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public enum  ExceptionEnum implements ServiceExceptionAssert {&#10;    &#10;    INTERNAL_SERVER_ERROR(500, &quot;服务器打酱油了，请稍后再试~&quot;),&#10;    USERNAME_NOT_FOUND(400,&quot;用户名为空&quot;),&#10;    PASSWORD_NOT_FOUND(400,&quot;密码为空&quot;),&#10;    #foreach($table in $tableInfoList)&#10;$table.obj.name.toUpperCase()_IS_NOT_EXIST(400,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)不存在&quot;),&#10;    $table.obj.name.toUpperCase()_SAVE_ERROR(500,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)保存失败&quot;),&#10;    $table.obj.name.toUpperCase()_UPDATE_ERROR(500,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)更新失败&quot;),&#10;    $table.obj.name.toUpperCase()_DELETE_ERROR(500,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)删除失败&quot;),&#10;    #end&#10;;&#10;&#10;    private Integer code;&#10;    private String message;&#10;}" />
                    <option name="name" value="exceptionEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;GlobalExceptionHandler.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.Result;&#10;import $!{tableInfo.savePackageName}.common.enums.IExceptionEnum;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.apache.commons.lang3.StringUtils;&#10;import org.springframework.context.support.DefaultMessageSourceResolvable;&#10;import org.springframework.http.HttpHeaders;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.http.converter.HttpMessageNotReadableException;&#10;import org.springframework.lang.Nullable;&#10;import org.springframework.validation.BindException;&#10;import org.springframework.validation.FieldError;&#10;import org.springframework.web.bind.MethodArgumentNotValidException;&#10;import org.springframework.web.bind.annotation.ExceptionHandler;&#10;import org.springframework.web.bind.annotation.RestControllerAdvice;&#10;import org.springframework.web.context.request.WebRequest;&#10;import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;&#10;import org.springframework.web.util.WebUtils;&#10;&#10;import javax.validation.ConstraintViolationException;&#10;import java.nio.file.AccessDeniedException;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;    &#10;#classComment(&quot;统一异常处理类&quot;) &#10;@Slf4j&#10;@RestControllerAdvice&#10;public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {&#10;&#10;    /**&#10;     * 处理单个参数校验异常&#10;     *&#10;     * @param e ConstraintViolationException&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(ConstraintViolationException.class)&#10;    public ResponseEntity&lt;Object&gt; handleConstraintViolationException(ConstraintViolationException e) {&#10;        String message = e.getMessage();&#10;        message = StringUtils.substringAfterLast(message,&quot;:&quot;).trim();&#10;        log.error(&quot;[统一异常]单个参数校验异常，异常信息:{}&quot;,message);&#10;&#10;        // 生成返回结果&#10;        return createResponseResponseEntity(message, HttpStatus.BAD_REQUEST.value());&#10;    }&#10;&#10;    /**&#10;     * 自定义异常处理&#10;     * @param ex&#10;     * @param body&#10;     * @param headers&#10;     * @param status&#10;     * @param request&#10;     * @return&#10;     */&#10;    @Override&#10;    protected ResponseEntity&lt;Object&gt; handleExceptionInternal(&#10;            Exception ex, @Nullable Object body, HttpHeaders headers, HttpStatus status, WebRequest request) {&#10;        String msg=&quot;&quot;;&#10;        if(ex instanceof BindException){&#10;            //处理普通类型Content-Type参数校验异常&#10;            List&lt;FieldError&gt; fieldErrors = ((BindException)ex).getFieldErrors();&#10;            msg = fieldErrors.stream().map(DefaultMessageSourceResolvable::getDefaultMessage)&#10;                    .collect(Collectors.joining(&quot;|&quot;));&#10;            log.error(&quot;[统一异常]对象参数校验异常，异常信息:{}&quot;, msg);&#10;        }else if(ex instanceof MethodArgumentNotValidException) {&#10;            //处理Content-Type=application/json的参数校验异常&#10;            List&lt;FieldError&gt; fieldErrors = ((MethodArgumentNotValidException) ex).getBindingResult().getFieldErrors();&#10;            msg = fieldErrors.stream().map(DefaultMessageSourceResolvable::getDefaultMessage)&#10;                    .collect(Collectors.joining(&quot;|&quot;));&#10;            log.error(&quot;[统一异常]对象参数校验异常，异常信息:{}&quot;,msg);&#10;        } else if (ex instanceof HttpMessageNotReadableException){&#10;            //处理请求体为空异常&#10;            String message = ex.getMessage();&#10;            log.error(&quot;[统一异常]参数错误异常，异常信息，{}&quot;, message);&#10;            if(message.contains(&quot;JSON parse error&quot;)) {&#10;                String paramName = StringUtils.substringBetween(message, &quot;[\&quot;&quot;, &quot;\&quot;]&quot;);&#10;                msg = paramName + &quot;: &quot; + StringUtils.substring(message,&#10;                        message.indexOf(&quot;problem:&quot;) + 8, message.indexOf(&quot;;&quot;)).trim();&#10;            } else if (message.contains(&quot;Required request body is missing&quot;)){&#10;                msg = StringUtils.substringBefore(message,&quot;:&quot;).trim();&#10;            } else {&#10;                msg = StringUtils.substringBefore(message,&quot;;&quot;).trim();&#10;            }&#10;        }else {&#10;            //其他异常&#10;            msg = ex.getMessage();&#10;        }&#10;&#10;        if (HttpStatus.INTERNAL_SERVER_ERROR.equals(status)) {&#10;            request.setAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE, ex, WebRequest.SCOPE_REQUEST);&#10;        }&#10;        log.error(&quot;[统一异常]{}异常，异常信息:{}&quot;, ex.getClass().getSimpleName(), msg);&#10;        return createResponseResponseEntity(msg, status.value());&#10;    }&#10;&#10;    /**&#10;     * 处理403异常&#10;     *&#10;     * @param e AccessDeniedException&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(AccessDeniedException.class)&#10;    public ResponseEntity&lt;Object&gt; handleAccessDeniedException(AccessDeniedException e) {&#10;        String message = e.getMessage();&#10;        log.error(&quot;[统一异常]拒绝访问异常，异常信息，{}&quot;, message);&#10;&#10;        // 生成返回结果&#10;        return createResponseResponseEntity(message, HttpStatus.FORBIDDEN.value());&#10;    }&#10;&#10;    /**&#10;     * 处理自定义业务异常&#10;     *&#10;     * @param cause 异常&#10;     * @param e ServiceException&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(ServiceException.class)&#10;    public ResponseEntity&lt;Object&gt; handleException(Throwable cause, ServiceException e){&#10;        String message;&#10;        int code;&#10;        IExceptionEnum exceptionEnum = e.getExceptionEnum();&#10;        if(null != exceptionEnum){&#10;            message = exceptionEnum.getMessage();&#10;            code = exceptionEnum.getCode();&#10;        }else {&#10;            message = e.getMessage();&#10;            code = e.getCode();&#10;        }&#10;        log.error(&quot;[统一异常]ServiceException异常，异常信息:{}&quot;, message);&#10;        &#10;        // 记录堆栈信息&#10;        final Writer result = new StringWriter();&#10;        final PrintWriter printWriter = new PrintWriter(result);&#10;        cause.printStackTrace(printWriter);&#10;        log.error(&quot;[统一异常]其他异常，堆栈信息：{}&quot;, result);&#10;&#10;        // 生成返回结果&#10;        return Result.error(code, message);&#10;    }&#10;&#10;    /**&#10;     * 其他异常统一处理&#10;     *&#10;     * @param cause 异常&#10;     * @param e Exception&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(Exception.class)&#10;    public ResponseEntity&lt;Object&gt; exceptionHandler(Throwable cause, Exception e) {&#10;        log.error(&quot;[统一异常]其他异常，异常:{}&quot;, e.getClass().toString());&#10;        String message = e.getMessage();&#10;        log.error(&quot;[统一异常]其他异常，异常信息，{}&quot;, message);&#10;        &#10;        // 记录堆栈信息&#10;        final Writer result = new StringWriter();&#10;        final PrintWriter printWriter = new PrintWriter(result);&#10;        cause.printStackTrace(printWriter);&#10;        log.error(&quot;[统一异常]其他异常，堆栈信息：{}&quot;, result);&#10;&#10;        // 生成返回结果&#10;        return Result.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), message);&#10;    }&#10;&#10;    /**&#10;     * 返回异常处理结果&#10;     *&#10;     * @param msg 异常信息&#10;     * @param status 状态码&#10;     * @return ResponseEntity&#10;     */&#10;    private ResponseEntity&lt;Object&gt; createResponseResponseEntity(String msg, int status) {&#10;        // 生成返回结果&#10;        Result&lt;Object&gt; result = Result.error(status, msg);&#10;        return ResponseEntity.status(status).body(result);&#10;    }&#10;}" />
                    <option name="name" value="globalExceptionHandler.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ServiceException.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.enums.IExceptionEnum;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import lombok.NoArgsConstructor;&#10;    &#10;#classComment(&quot;自定义业务异常&quot;) &#10;@Getter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class ServiceException extends RuntimeException{&#10;&#10;    private IExceptionEnum exceptionEnum;&#10;&#10;    private int code;&#10;&#10;    private String msg;&#10;&#10;    public ServiceException(IExceptionEnum exceptionEnum) {&#10;        super(exceptionEnum.getMessage());&#10;        this.exceptionEnum = exceptionEnum;&#10;    }&#10;&#10;    public ServiceException(int code, String msg) {&#10;        super(msg);&#10;        this.code = code;&#10;        this.msg = msg;&#10;    }&#10;}" />
                    <option name="name" value="serviceException.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;Assert.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import java.util.function.Predicate;&#10;&#10;#classComment(&quot;异常断言接口&quot;) &#10;public interface Assert {&#10;&#10;    /**&#10;     * 创建异常&#10;     * @return {@link RuntimeException}&#10;     */&#10;    RuntimeException newException();&#10;&#10;    /**&#10;     * 创建异常&#10;     * @param code 错误码&#10;     * @param msg 错误提示&#10;     * @return {@link RuntimeException}&#10;     */&#10;    RuntimeException newException(int code, String msg);&#10;&#10;    /**&#10;     * 如predicate为true，则抛出异常&#10;     *&#10;     * @param predicate {@link Predicate}&#10;     * @param args 待判断对象&#10;     */&#10;    default &lt;T&gt; void assertException(Predicate&lt;? super T&gt; predicate, T args) {&#10;        if (predicate.test(args)) {&#10;            throw newException();&#10;        }&#10;    }&#10;    &#10;     /**&#10;     * 抛出自定义异常&#10;     *&#10;     */&#10;    default &lt;T&gt; void assertException() {&#10;        throw newException();&#10;    }&#10;&#10;    /**&#10;     * 抛出自定义异常&#10;     *&#10;     * @param code 错误码&#10;     * @param msg 错误提示&#10;     */&#10;    default void assertException(int code, String msg) {&#10;        throw newException(code, msg);&#10;    }&#10;}" />
                    <option name="name" value="assert.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ServiceExceptionAssert.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.enums.IExceptionEnum;&#10;&#10;#classComment(&quot;业务异常断言接口&quot;) &#10;public interface ServiceExceptionAssert extends IExceptionEnum, Assert{&#10;&#10;    /**&#10;     * 创建异常&#10;     *&#10;     * @return {@link RuntimeException}&#10;     */&#10;    @Override&#10;    default RuntimeException newException(){&#10;        return new ServiceException(this);&#10;    }&#10;&#10;    /**&#10;     * 创建异常&#10;     *&#10;     * @param code 错误码&#10;     * @param msg 错误提示&#10;     * @return {@link RuntimeException}&#10;     */&#10;    @Override&#10;    default RuntimeException newException(int code, String msg){&#10;        return new ServiceException(code, msg);&#10;    }&#10;}" />
                    <option name="name" value="serviceExceptionAssert.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ServletResponseStatusEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import org.springframework.http.HttpStatus;&#10;&#10;import java.util.Objects;&#10;import java.util.stream.Stream;&#10;&#10;#classComment(&quot;servlet异常和状态码枚举&quot;) &#10;@Getter&#10;@AllArgsConstructor&#10;public enum ServletResponseStatusEnum {&#10;&#10;    HttpRequestMethodNotSupportedException(&quot;HttpRequestMethodNotSupportedException&quot;,&#10;            HttpStatus.METHOD_NOT_ALLOWED.value()),&#10;    HttpMediaTypeNotSupportedException(&quot;HttpMediaTypeNotSupportedException&quot;,&#10;            HttpStatus.UNSUPPORTED_MEDIA_TYPE.value()),&#10;    HttpMediaTypeNotAcceptableException(&quot;HttpMediaTypeNotAcceptableException&quot;,&#10;            HttpStatus.NOT_ACCEPTABLE.value()),&#10;    MissingPathVariableException(&quot;MissingPathVariableException&quot;,&#10;            HttpStatus.INTERNAL_SERVER_ERROR.value()),&#10;    MissingServletRequestParameterException(&quot;MissingServletRequestParameterException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    ServletRequestBindingException(&quot;ServletRequestBindingException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    ConversionNotSupportedException(&quot;ConversionNotSupportedException&quot;,&#10;            HttpStatus.INTERNAL_SERVER_ERROR.value()),&#10;    TypeMismatchException(&quot;TypeMismatchException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    HttpMessageNotReadableException(&quot;HttpMessageNotReadableException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    HttpMessageNotWritableException(&quot;HttpMessageNotWritableException&quot;,&#10;            HttpStatus.INTERNAL_SERVER_ERROR.value()),&#10;    MethodArgumentNotValidException(&quot;MethodArgumentNotValidException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    MissingServletRequestPartException(&quot;MissingServletRequestPartException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    NoHandlerFoundException(&quot;NoHandlerFoundException&quot;,&#10;            HttpStatus.NOT_FOUND.value()),&#10;    AsyncRequestTimeoutException(&quot;AsyncRequestTimeoutException&quot;,&#10;            HttpStatus.SERVICE_UNAVAILABLE.value()),&#10;    MethodArgumentTypeMismatchException(&quot;MethodArgumentTypeMismatchException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    ;&#10;&#10;    private final String className;&#10;    private final Integer status;&#10;&#10;    public static ServletResponseStatusEnum of(String className){&#10;        Objects.requireNonNull(className);&#10;&#10;        return Stream.of(values())&#10;                .filter(bean -&gt; bean.getClassName().equals(className))&#10;                .findAny()&#10;                .orElseThrow(() -&gt; new IllegalArgumentException(className + &quot; not exists&quot;));&#10;    }&#10;}" />
                    <option name="name" value="servletResponseStatusEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;DefaultErrorController.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.enums.ExceptionEnum;&#10;import org.springframework.boot.web.servlet.error.ErrorController;&#10;import org.springframework.stereotype.Controller;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;&#10;import javax.servlet.http.HttpServletRequest;&#10;&#10;#classComment(&quot;默认错误处理控制器&quot;) &#10;@Controller&#10;public class DefaultErrorController implements ErrorController {&#10;&#10;    @RequestMapping(&quot;/error&quot;)&#10;    public String handleError(HttpServletRequest request){&#10;        //获取statusCode:401,404,500&#10;        Integer statusCode = (Integer) request.getAttribute(&quot;javax.servlet.error.status_code&quot;);&#10;        if(statusCode == 500){&#10;            throw new ServiceException(ExceptionEnum.INTERNAL_SERVER_ERROR);&#10;        }else if(statusCode == 404){&#10;            throw new ServiceException(404, &quot;Not Found&quot;);&#10;        }else if(statusCode == 403){&#10;            throw new ServiceException(403, &quot;Forbidden&quot;);&#10;        }else{&#10;            throw new ServiceException(ExceptionEnum.INTERNAL_SERVER_ERROR);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String getErrorPath() {&#10;        return &quot;/error&quot;;&#10;    }&#10;}" />
                    <option name="name" value="defaultErrorController.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;IExceptionEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;#classComment(&quot;异常枚举父类&quot;) &#10;public interface IExceptionEnum {&#10;&#10;    Integer getCode();&#10;&#10;    String getMessage();&#10;}" />
                    <option name="name" value="iExceptionEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;#set($mapperPackage = $tool.append($!{tableInfo.savePackageName}, &quot;.mapper&quot;))&#10;##设置回调&#10;$!callback.setFileName(&quot;MybatisPlusConfig.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/config&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;config&quot;)&#10;&#10;import com.baomidou.mybatisplus.annotation.DbType;&#10;import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;&#10;import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;&#10;import org.mybatis.spring.annotation.MapperScan;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;&#10;#classComment(&quot;MybatisPlus配置&quot;) &#10;@Configuration&#10;@MapperScan(&quot;$!{mapperPackage}&quot;)&#10;public class MybatisPlusConfig {&#10;&#10;    /**&#10;     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false&#10;     * 避免缓存出现问题(该属性会在旧插件移除后一同移除)&#10;     */&#10;    @Bean&#10;    public MybatisPlusInterceptor mybatisPlusInterceptor() {&#10;        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();&#10;        interceptor.addInnerInterceptor(paginationInnerInterceptor());&#10;        return interceptor;&#10;    }&#10;&#10;    /**&#10;     * mybatis-plus分页插件&#10;     */&#10;    @Bean&#10;    public PaginationInnerInterceptor paginationInnerInterceptor() {&#10;        PaginationInnerInterceptor paginationInnerInterceptor = new PaginationInnerInterceptor();&#10;        // 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false&#10;        // paginationInterceptor.setOverflow(false);&#10;        // 设置最大单页限制数量，默认 500 条，-1 不受限制&#10;        // paginationInterceptor.setMaxLimit(500);&#10;        paginationInnerInterceptor.setDbType(DbType.MYSQL);&#10;        return paginationInnerInterceptor;&#10;    }&#10;}" />
                    <option name="name" value="mybatisPlusConfig.java" />
                  </Template>
                </list>
              </option>
              <option name="name" value="MybatisPlus" />
            </TemplateGroup>
          </value>
        </entry>
        <entry key="MybatisPlus-plus">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!init&#10;$!define&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;entity&quot;)&#10;&#10;##自动导入包（全局变量）&#10;$!autoImport&#10;import $!{tableInfo.savePackageName}.common.entity.BaseEntity;&#10;import com.baomidou.mybatisplus.annotation.IdType;&#10;import com.baomidou.mybatisplus.annotation.TableId;&#10;import com.baomidou.mybatisplus.annotation.TableName;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;实体类&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;@TableName(value = &quot;$!{tableInfo.obj.name}&quot;)&#10;@Data&#10;public class $!{tableInfo.name} extends BaseEntity {&#10;    &#10;#foreach($column in $tableInfo.pkColumn)&#10;    #if(${column.comment})&#10;    /**&#10;     * ${column.comment}&#10;     */&#10;    #end&#10;@TableId(value=&quot;$!{column.obj.name}&quot;, type= IdType.AUTO)&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end    &#10;&#10;#foreach($column in $tableInfo.otherColumn)&#10;#if($!{column.obj.name} != &quot;create_by&quot; &amp;&amp; $!{column.obj.name} != &quot;create_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;update_by&quot; &amp;&amp; $!{column.obj.name} != &quot;update_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;is_deleted&quot;)&#10;    #if(${column.comment})/**&#10;     * ${column.comment}&#10;     */&#10;    #end&#10;private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;&#10;#end&#10;#end&#10;&#10;}" />
                    <option name="name" value="entity.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Dto&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dto&quot;))&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dto;&#10;&#10;$!autoImport&#10;import $!{tableInfo.savePackageName}.common.entity.BaseDto;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;&#10;#tableComment(&quot;Dto&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;public class $!{tableName} extends BaseDto {&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.obj.name} != &quot;create_by&quot; &amp;&amp; $!{column.obj.name} != &quot;create_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;update_by&quot; &amp;&amp; $!{column.obj.name} != &quot;update_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;is_deleted&quot;)&#10;#if(${column.comment})&#10;    /** &#10;     * ${column.comment}&#10;     */&#10;#end&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    &#10;#end    &#10;#end&#10;}" />
                    <option name="name" value="dto.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Vo&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/vo&quot;))&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}vo;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.BaseVo;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;import io.swagger.annotations.ApiModel;&#10;import io.swagger.annotations.ApiModelProperty;&#10;&#10;#tableComment(&quot;Vo&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;@ApiModel(value=&quot;$!{tableName}&quot;,description=&quot;展示$!{tableComment}实体&quot;)&#10;public class $!{tableName} extends BaseVo {&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.obj.name} != &quot;create_by&quot; &amp;&amp; $!{column.obj.name} != &quot;create_time&quot; &amp;&amp;&#10;        $!{column.obj.name} != &quot;update_by&quot; &amp;&amp; $!{column.obj.name} != &quot;update_time&quot; &amp;&amp;&#10;        $!{column.obj.name} != &quot;is_deleted&quot;)&#10;#if(${column.comment})&#10;    /** &#10;     * ${column.comment}&#10;     */&#10;#end&#10;    @ApiModelProperty(name = &quot;$!{column.name}&quot;, value = &quot;$!{column.comment}&quot;, required = false)&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    &#10;#end&#10;#end&#10;}" />
                    <option name="name" value="vo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Bo&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/bo&quot;))&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}bo;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.BaseBo;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;import io.swagger.annotations.ApiModel;&#10;import io.swagger.annotations.ApiModelProperty;&#10;&#10;#tableComment(&quot;Bo&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;@ApiModel(value=&quot;$!{tableName}&quot;,description=&quot;展示$!{tableComment}实体&quot;)&#10;public class $!{tableName} extends BaseBo {&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.obj.name} != &quot;create_by&quot; &amp;&amp; $!{column.obj.name} != &quot;create_time&quot; &amp;&amp;&#10;        $!{column.obj.name} != &quot;update_by&quot; &amp;&amp; $!{column.obj.name} != &quot;update_time&quot; &amp;&amp;&#10;        $!{column.obj.name} != &quot;is_deleted&quot;)&#10;#if(${column.comment})&#10;    /** &#10;     * ${column.comment}&#10;     */&#10;#end&#10;    @ApiModelProperty(name = &quot;$!{column.name}&quot;, value = &quot;$!{column.comment}&quot;, required = false)&#10;#if($!{tool.getClsNameByFullName($column.type)} == &quot;Date&quot;)&#10;    private String $!{column.name};&#10;#else&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;#end&#10;#end&#10;}" />
                    <option name="name" value="bo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseEntity.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.baomidou.mybatisplus.annotation.TableField;&#10;import com.baomidou.mybatisplus.annotation.TableLogic;&#10;import java.time.LocalDateTime;&#10;import lombok.Data;&#10;&#10;#classComment(&quot;实体基类&quot;) &#10;@Data&#10;public class BaseEntity{&#10;&#10;    /**&#10;     * 是否删除(1为删除，0为未删除)&#10;     */&#10;    @TableLogic&#10;    @TableField(value = &quot;is_deleted&quot;)&#10;    private Boolean deleted;&#10;    &#10;    /** &#10;     * 创建者 &#10;     */&#10;    private String createBy;&#10;&#10;    /** &#10;     * 创建时间 &#10;     */&#10;    private LocalDateTime createTime;&#10;&#10;    /** &#10;     * 更新者 &#10;     */&#10;    private String updateBy;&#10;&#10;    /** &#10;     * 更新时间 &#10;     */&#10;    private LocalDateTime updateTime;&#10;}" />
                    <option name="name" value="baseEntity.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseDto.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import java.time.LocalDateTime;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;&#10;#classComment(&quot;Dto实体基类&quot;) &#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;public class BaseDto extends PageRequest{&#10;&#10;    /**&#10;     * 是否删除(1为删除，0为未删除)&#10;     */&#10;    private Boolean deleted;&#10;    &#10;    /** &#10;     * 创建者 &#10;     */&#10;    private String createBy;&#10;&#10;    /** &#10;     * 创建时间 &#10;     */&#10;    private LocalDateTime createTime;&#10;&#10;    /** &#10;     * 更新者 &#10;     */&#10;    private String updateBy;&#10;&#10;    /** &#10;     * 更新时间 &#10;     */&#10;    private LocalDateTime updateTime;&#10;}" />
                    <option name="name" value="baseDto.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseBo.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.fasterxml.jackson.annotation.JsonFormat;&#10;import java.time.LocalDateTime;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;import io.swagger.annotations.ApiModel;&#10;import io.swagger.annotations.ApiModelProperty;&#10;&#10;#classComment(&quot;Bo实体基类&quot;) &#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;public class BaseBo extends PageRequest{&#10;&#10;    /** &#10;     * 开始时间 &#10;     */&#10;    @ApiModelProperty(name = &quot;startTime&quot;, value = &quot;开始时间&quot;, required = false)&#10;    private String startTime;&#10;&#10;    /** &#10;     * 结束时间 &#10;     */&#10;    @ApiModelProperty(name = &quot;endTime&quot;, value = &quot;结束时间&quot;, required = false)&#10;    private String endTime;&#10;    &#10;    /** &#10;     * 搜索值 &#10;     */&#10;    @ApiModelProperty(name = &quot;searchValue&quot;, value = &quot;搜索值&quot;, required = false)&#10;    private String searchValue;&#10;    &#10;    /** &#10;     * 创建者 &#10;     */&#10;    @ApiModelProperty(name = &quot;createBy&quot;, value = &quot;创建者&quot;, required = false)&#10;    private String createBy;&#10;&#10;    /** &#10;     * 创建时间 &#10;     */&#10;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    @ApiModelProperty(name = &quot;createTime&quot;, value = &quot;创建时间&quot;, required = false)&#10;    private LocalDateTime createTime;&#10;&#10;    /** &#10;     * 更新者 &#10;     */&#10;    @ApiModelProperty(name = &quot;updateBy&quot;, value = &quot;更新者&quot;, required = false)&#10;    private String updateBy;&#10;&#10;    /** &#10;     * 更新时间 &#10;     */&#10;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    @ApiModelProperty(name = &quot;updateTime&quot;, value = &quot;更新时间&quot;, required = false)&#10;    private LocalDateTime updateTime;&#10;}" />
                    <option name="name" value="baseBo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseVo.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.fasterxml.jackson.annotation.JsonFormat;&#10;import java.time.LocalDateTime;&#10;import lombok.Data;&#10;import io.swagger.annotations.ApiModel;&#10;import io.swagger.annotations.ApiModelProperty;&#10;&#10;#classComment(&quot;Vo实体基类&quot;)&#10;@Data&#10;public class BaseVo {&#10;&#10;    /** &#10;     * 创建者 &#10;     */&#10;    @ApiModelProperty(name = &quot;createBy&quot;, value = &quot;创建者&quot;, required = false)&#10;    private String createBy;&#10;&#10;    /** &#10;     * 创建时间 &#10;     */&#10;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    @ApiModelProperty(name = &quot;createTime&quot;, value = &quot;创建时间&quot;, required = false)&#10;    private LocalDateTime createTime;&#10;&#10;    /** &#10;     * 更新者 &#10;     */&#10;    @ApiModelProperty(name = &quot;updateBy&quot;, value = &quot;更新者&quot;, required = false)&#10;    private String updateBy;&#10;&#10;    /** &#10;     * 更新时间 &#10;     */&#10;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    @ApiModelProperty(name = &quot;updateTime&quot;, value = &quot;更新时间&quot;, required = false)&#10;    private LocalDateTime updateTime;&#10;}" />
                    <option name="name" value="baseVo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseMapping.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/mapping&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.mapping&quot;)&#10;&#10;import org.apache.commons.lang3.StringUtils;&#10;import org.mapstruct.InheritConfiguration;&#10;import org.mapstruct.InheritInverseConfiguration;&#10;import org.mapstruct.MapperConfig;&#10;import org.mapstruct.Mapping;&#10;&#10;import java.text.ParseException;&#10;import java.text.SimpleDateFormat;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.stream.Stream;&#10;&#10;#classComment(&quot;mapstruct通用类&quot;)&#10;@MapperConfig&#10;public interface BaseMapping&lt;SOURCE, TARGET&gt; {&#10;&#10;    /**&#10;     * 映射同名属性&#10;     */&#10;    @Mapping(target = &quot;createTime&quot;, dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    TARGET sourceToTarget(SOURCE var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性&#10;     */&#10;    @InheritInverseConfiguration(name = &quot;sourceToTarget&quot;)&#10;    SOURCE targetToSource(TARGET var1);&#10;&#10;    /**&#10;     * 映射同名属性，集合形式&#10;     */&#10;    @InheritConfiguration(name = &quot;sourceToTarget&quot;)&#10;    List&lt;TARGET&gt; sourceToTarget(List&lt;SOURCE&gt; var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性，集合形式&#10;     */&#10;    @InheritConfiguration(name = &quot;targetToSource&quot;)&#10;    List&lt;SOURCE&gt; targetToSource(List&lt;TARGET&gt; var1);&#10;&#10;    /**&#10;     * 映射同名属性，集合流形式&#10;     */&#10;    List&lt;TARGET&gt; sourceToTarget(Stream&lt;SOURCE&gt; stream);&#10;&#10;    /**&#10;     * 反向，映射同名属性，集合流形式&#10;     */&#10;    List&lt;SOURCE&gt; targetToSource(Stream&lt;TARGET&gt; stream);&#10;&#10;    default Date convertStr2Date(String str){&#10;        if(StringUtils.isNotBlank(str)){&#10;            SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);&#10;            try {&#10;                return format.parse(str);&#10;            } catch (ParseException e) {&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;&#10;        return null;&#10;    }&#10;    &#10;    default LocalDateTime convertStr2LocalDateTime(String str) {&#10;        if (StringUtils.isNotBlank(str)) {&#10;            return LocalDateTime.parse(str, DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;));&#10;        }&#10;&#10;        return null;&#10;    }&#10;&#10;    default LocalDate convertStr2LocalDate(String str) {&#10;        if (StringUtils.isNotBlank(str)) {&#10;            return LocalDate.parse(str, DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;));&#10;        }&#10;&#10;        return null;&#10;    }&#10;}" />
                    <option name="name" value="baseMapping.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;VoMapping&quot;))&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;#set($packageName = $tool.firstLowerCase($entityName.replace(&quot;sys&quot;,&quot;&quot;)))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapping/&quot;, $!{packageName}))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapping.$!{packageName};&#10;&#10;import $!{tableInfo.savePackageName}.common.mapping.BaseMapping;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.vo.$!{tableInfo.name}Vo;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.Mapping;&#10;import org.mapstruct.Mappings;&#10;import org.mapstruct.ReportingPolicy;&#10;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;VoMapping&quot;)&#10;@Mapper(componentModel = &quot;spring&quot;, unmappedTargetPolicy = ReportingPolicy.IGNORE,&#10;        unmappedSourcePolicy = ReportingPolicy.IGNORE)&#10;public interface $!{tableName} extends BaseMapping&lt;$!{tableInfo.name}, $!{tableInfo.name}Vo&gt; {&#10;&#10;    /**&#10;     * 映射同名属性&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    $!{tableInfo.name}Vo sourceToTarget($!{tableInfo.name} var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    $!{tableInfo.name} targetToSource($!{tableInfo.name}Vo var1);&#10;&#10;    /**&#10;     * 映射同名属性，集合形式&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    List&lt;$!{tableInfo.name}Vo&gt; sourceToTarget(List&lt;$!{tableInfo.name}&gt; var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性，集合形式&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    List&lt;$!{tableInfo.name}&gt; targetToSource(List&lt;$!{tableInfo.name}Vo&gt; var1);&#10;}" />
                    <option name="name" value="voMapping.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;DtoMapping&quot;))&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;#set($packageName = $tool.firstLowerCase($entityName.replace(&quot;sys&quot;,&quot;&quot;)))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapping/&quot;, $!{packageName}))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapping.$!{packageName};&#10;&#10;import $!{tableInfo.savePackageName}.bo.$!{tableInfo.name}Bo;&#10;import $!{tableInfo.savePackageName}.common.mapping.BaseMapping;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.Mapping;&#10;import org.mapstruct.Mappings;&#10;import org.mapstruct.ReportingPolicy;&#10;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;DtoMapping&quot;)&#10;@Mapper(componentModel = &quot;spring&quot;, unmappedTargetPolicy = ReportingPolicy.IGNORE,&#10;        unmappedSourcePolicy = ReportingPolicy.IGNORE)&#10;public interface $!{tableName} extends BaseMapping&lt;$!{tableInfo.name}Bo, $!{tableInfo.name}Dto&gt; {&#10;&#10;    /**&#10;     * 映射同名属性&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    $!{tableInfo.name}Dto sourceToTarget($!{tableInfo.name}Bo var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    $!{tableInfo.name}Bo targetToSource($!{tableInfo.name}Dto var1);&#10;&#10;    /**&#10;     * 映射同名属性，集合形式&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    List&lt;$!{tableInfo.name}Dto&gt; sourceToTarget(List&lt;$!{tableInfo.name}Bo&gt; var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性，集合形式&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    List&lt;$!{tableInfo.name}Bo&gt; targetToSource(List&lt;$!{tableInfo.name}Dto&gt; var1);&#10;}" />
                    <option name="name" value="dtoMapping.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Mapping&quot;))&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;#set($packageName = $tool.firstLowerCase($entityName.replace(&quot;sys&quot;,&quot;&quot;)))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapping/&quot;, $!{packageName}))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapping.$!{packageName};&#10;&#10;import $!{tableInfo.savePackageName}.common.mapping.BaseMapping;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.ReportingPolicy;&#10;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;Entity Mapping&quot;)&#10;@Mapper(componentModel = &quot;spring&quot;, unmappedTargetPolicy = ReportingPolicy.IGNORE,&#10;        unmappedSourcePolicy = ReportingPolicy.IGNORE)&#10;public interface $!{tableName} extends BaseMapping&lt;$!{tableInfo.name}Dto, $!{tableInfo.name}&gt; {&#10;&#10;    /**&#10;     * 映射同名属性&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    $!{tableInfo.name} sourceToTarget($!{tableInfo.name}Dto var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    $!{tableInfo.name}Dto targetToSource($!{tableInfo.name} var1);&#10;&#10;    /**&#10;     * 映射同名属性，集合形式&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    List&lt;$!{tableInfo.name}&gt; sourceToTarget(List&lt;$!{tableInfo.name}Dto&gt; var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性，集合形式&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    List&lt;$!{tableInfo.name}Dto&gt; targetToSource(List&lt;$!{tableInfo.name}&gt; var1);&#10;}" />
                    <option name="name" value="entityMapping.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!init&#10;$!define&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置表后缀（宏定义）&#10;#setTableSuffix(&quot;Mapper&quot;)&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/mapper&quot;, &quot;Mapper.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;mapper&quot;)&#10;&#10;import com.baomidou.mybatisplus.core.mapper.BaseMapper;&#10;import $!{tableInfo.savePackageName}.entity.$!tableInfo.name;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;数据库访问层&quot;)&#10;public interface $!{tableName} extends BaseMapper&lt;$!tableInfo.name&gt; {&#10;&#10;}" />
                    <option name="name" value="mapper.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入mybatis支持&#10;$!init&#10;$!mybatisSupport&#10;&#10;##设置保存名称与保存位置&#10;$!callback.setFileName($tool.append($!{tableInfo.name}, &quot;Mapper.xml&quot;))&#10;$!callback.setSavePath($tool.append($modulePath, &quot;/src/main/resources/mappers&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&#10;&lt;mapper namespace=&quot;$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper&quot;&gt;&#10;    &lt;resultMap type=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot; id=&quot;BaseResultMap&quot;&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.obj.name} == &quot;is_deleted&quot;)&#10;        &lt;result property=&quot;deleted&quot; column=&quot;$!column.obj.name&quot; jdbcType=&quot;$!column.ext.jdbcType&quot;/&gt;&#10;#else&#10;        &lt;result property=&quot;$!column.name&quot; column=&quot;$!column.obj.name&quot; jdbcType=&quot;$!column.ext.jdbcType&quot;/&gt;&#10;#end    &#10;#end&#10;    &lt;/resultMap&gt;&#10;&#10;    &lt;sql id=&quot;BaseSql&quot;&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{velocityCount} == $!{tableInfo.fullColumn.size()})&#10;        $!{column.obj.name}&#10;    #else&#10;        $!{column.obj.name},&#10;#end&#10;#end&#10;&lt;/sql&gt;&#10;&lt;/mapper&gt;" />
                    <option name="name" value="mapper.xml" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import $!{tableInfo.savePackageName}.vo.$!{tableInfo.name}Vo;&#10;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;服务接口&quot;)&#10;public interface $!{tableName} {&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return List&lt;$!{tableInfo.name}Vo&gt;&#10;     */&#10;    List&lt;$!{tableInfo.name}Vo&gt; get$!{tableInfo.name}List($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param dto 查询条件&#10;     * @return PageResult&lt;$!{tableInfo.name}Vo&gt;&#10;     */&#10;    PageResult&lt;$!{tableInfo.name}Vo&gt; get$!{tableInfo.name}PageList($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return $!{tableInfo.name}Vo&#10;     */&#10;    $!{tableInfo.name}Vo get$!{tableInfo.name}ById($!pk.shortType id);&#10;&#10;    /**&#10;     * 通过id集合查找$!{tableComment}&#10;     * @param ids id集合&#10;     * @return List&lt;$!{tableInfo.name}Vo&gt;&#10;     */&#10;    List&lt;$!{tableInfo.name}Vo&gt; get$!{tableInfo.name}ListByIds(List&lt;$!pk.shortType&gt; ids);&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     */&#10;    int save$!{tableInfo.name}($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dtoList $!{tableComment}信息集合&#10;     */&#10;    boolean batchSave$!{tableInfo.name}(List&lt;$!{tableInfo.name}Dto&gt; dtoList);&#10;&#10;    /**&#10;     * 修改$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     */&#10;    int update$!{tableInfo.name}($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 批量修改$!{tableComment}&#10;     *&#10;     * @param dtoList $!{tableComment}信息集合&#10;     */&#10;    boolean batchUpdate$!{tableInfo.name}(List&lt;$!{tableInfo.name}Dto&gt; dtoList);&#10;&#10;    /**&#10;     * 删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     */&#10;    int delete$!{tableInfo.name}ById($!pk.shortType id);&#10;&#10;    /**&#10;     * 批量删除$!{tableComment}&#10;     *&#10;     * @param ids id集合&#10;     */&#10;    int batchDeleteByIds(List&lt;$!pk.shortType&gt; ids);&#10;}" />
                    <option name="name" value="service.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($className = $tool.append($tableInfo.name, &quot;ServiceImpl&quot;))&#10;#set($entityClass = $tableInfo.name)&#10;#set($entityClassUpper = $tableInfo.obj.name.toUpperCase())&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($className, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service/impl&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;&#10;&#10;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;&#10;import com.baomidou.mybatisplus.core.metadata.OrderItem;&#10;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;&#10;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.common.enums.ExceptionEnum;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import $!{tableInfo.savePackageName}.entity.$!{entityClass};&#10;import $!{tableInfo.savePackageName}.mapper.$!{entityClass}Mapper;&#10;import $!{tableInfo.savePackageName}.mapping.$!{packageName}.$!{entityClass}Mapping;&#10;import $!{tableInfo.savePackageName}.mapping.$!{packageName}.$!{entityClass}VoMapping;&#10;import $!{tableInfo.savePackageName}.service.$!{entityClass}Service;&#10;import $!{tableInfo.savePackageName}.vo.$!{tableInfo.name}Vo;&#10;import lombok.RequiredArgsConstructor;&#10;import org.apache.commons.lang3.StringUtils;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.util.List;&#10;import java.util.Objects;&#10;&#10;#tableComment(&quot;服务实现类&quot;)&#10;@Service&#10;@RequiredArgsConstructor(onConstructor = @__(@Autowired))&#10;public class $!{className} extends ServiceImpl&lt;$!{entityClass}Mapper, $!{entityClass}&gt; &#10;                           implements $!{entityClass}Service {&#10;&#10;    private final $!{entityClass}Mapper $!{entityName}Mapper;&#10;    &#10;    private final $!{entityClass}VoMapping $!{entityName}VoMapping;&#10;&#10;    private final $!{entityClass}Mapping $!{entityName}Mapping;&#10;&#10;    /**&#10;     * 查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return List&lt;$!{entityClass}Vo&gt;&#10;     */&#10;    @Override&#10;    public List&lt;$!{entityClass}Vo&gt; get$!{entityClass}List($!{entityClass}Dto dto) {&#10;        QueryWrapper&lt;$!{entityClass}&gt; wrapper = createQueryWrapper(dto);&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = $!{entityName}Mapper.selectList(wrapper);&#10;        return $!{entityName}VoMapping.sourceToTarget($!{entityName}List);&#10;    }&#10;&#10;    /**&#10;     * 创建查询条件&#10;     *&#10;     * @param dto 查询条件&#10;     * @return QueryWrapper&lt;$!{entityClass}&gt;&#10;     */&#10;    private QueryWrapper&lt;$!{entityClass}&gt; createQueryWrapper($!{entityClass}Dto dto){&#10;        QueryWrapper&lt;$!{entityClass}&gt; queryWrapper = new QueryWrapper&lt;&gt;();&#10;        if(Objects.nonNull(dto)){&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if($!{column.name} == &quot;isDeleted&quot;)&#10;        if(Objects.nonNull(dto.getDeleted())){&#10;    #elseif($!{column.type} == &quot;java.lang.String&quot;)&#10;        if(StringUtils.isNotBlank(dto.get$!{tool.firstUpperCase($column.name)}())){&#10;    #else&#10;        if(Objects.nonNull(dto.get$!tool.firstUpperCase($column.name)())){&#10;    #end&#10;    #if($!{column.name} == &quot;title&quot; || $!{column.name} == &quot;name&quot;)&#10;        queryWrapper.like(&quot;$!{column.name}&quot;, dto.get$!tool.firstUpperCase($column.name)());&#10;    #elseif($!{column.name} == &quot;isDeleted&quot;)&#10;        queryWrapper.eq(&quot;deleted&quot;, dto.getDeleted());&#10;    #else&#10;        queryWrapper.eq(&quot;$!{column.name}&quot;, dto.get$!tool.firstUpperCase($column.name)());&#10;    #end&#10;        }&#10;#end&#10;        }&#10;        return queryWrapper;&#10;    }&#10;&#10;    /**&#10;     * 查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param dto 查询条件&#10;     * @return PageResult&lt;$!{entityClass}Vo&gt;&#10;     */&#10;    @Override&#10;    public PageResult&lt;$!{entityClass}Vo&gt; get$!{entityClass}PageList($!{entityClass}Dto dto) {&#10;        QueryWrapper&lt;$!{entityClass}&gt; wrapper = createQueryWrapper(dto);&#10;        String orderBy;&#10;        if(StringUtils.isNotBlank(dto.getOrderBy())){&#10;            orderBy = dto.getOrderBy();&#10;        }else {&#10;            orderBy = &quot;id desc&quot;;&#10;        }&#10;        &#10;        Page&lt;$!{entityClass}&gt; page = new Page&lt;&gt;(dto.getPage(), dto.getSize());&#10;        page.addOrder(OrderItem.desc(orderBy));&#10;        Page&lt;$!{entityClass}&gt; $!{entityName}Page = $!{entityName}Mapper.selectPage(page, wrapper);&#10;    &#10;        List&lt;$!{entityClass}Vo&gt; $!{entityName}VoList = $!{entityName}VoMapping.&#10;                                sourceToTarget($!{entityName}Page.getRecords());&#10;        PageResult&lt;$!{entityClass}Vo&gt; pageResult = new PageResult&lt;&gt;($!{entityName}Page.getTotal(), &#10;                   $!{entityName}Page.getPages(), $!{entityName}VoList);&#10;        pageResult.setPage(dto.getPage());&#10;        pageResult.setSize(dto.getSize());&#10;        pageResult.setHasPrevious($!{entityName}Page.hasPrevious());&#10;        pageResult.setHasNext($!{entityName}Page.hasNext());&#10;&#10;        return pageResult;&#10;    }&#10;&#10;    /**&#10;     * 通过ID查找$!{tableComment}&#10;     *&#10;     * @param id $!{tableComment}id&#10;     * @return $!{entityClass}Vo&#10;     */&#10;    @Override&#10;    public $!{entityClass}Vo get$!{entityClass}ById($!pk.shortType id) {&#10;        $!{entityClass} $!{entityName} = $!{entityName}Mapper.selectById(id);&#10;        ExceptionEnum.$!{entityClassUpper}_IS_NOT_EXIST.&#10;                      assertException(Objects::isNull, $!{entityName});&#10;                      &#10;        return $!{entityName}VoMapping.sourceToTarget($!{entityName});&#10;    }&#10;&#10;    /**&#10;     * 通过id集合查找$!{tableComment}集合&#10;     *&#10;     * @param ids id集合&#10;     * @return List&lt;$!{entityClass}Vo&gt;&#10;     */&#10;    @Override&#10;    public List&lt;$!{entityClass}Vo&gt; get$!{entityClass}ListByIds(List&lt;$!pk.shortType&gt; ids) {&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = listByIds(ids);&#10;        return $!{entityName}VoMapping.sourceToTarget($!{entityName}List);&#10;    }&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public int save$!{entityClass}($!{entityClass}Dto dto) {&#10;        $!{entityClass} $!{entityName} = $!{entityName}Mapping.sourceToTarget(dto);&#10;        int result = $!{entityName}Mapper.insert($!{entityName});&#10;        ExceptionEnum.$!{entityClassUpper}_SAVE_ERROR.&#10;                      assertException(num -&gt; num != 1, result);&#10;        &#10;        return result;&#10;    }&#10;&#10;    /**&#10;     * 批量新增$!{tableComment}&#10;     *&#10;     * @param dtoList $!{tableComment}信息集合&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public boolean batchSave$!{entityClass}(List&lt;$!{entityClass}Dto&gt; dtoList) {&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = $!{entityName}Mapping.sourceToTarget(dtoList);&#10;        return saveBatch($!{entityName}List);&#10;    }&#10;&#10;    /**&#10;     * 修改$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public int update$!{entityClass}($!{entityClass}Dto dto) {&#10;        $!{entityClass} $!{entityName} = $!{entityName}Mapping.sourceToTarget(dto);&#10;        int result = $!{entityName}Mapper.updateById($!{entityName});&#10;        ExceptionEnum.$!{entityClassUpper}_UPDATE_ERROR.&#10;                      assertException(num -&gt; num != 1, result);&#10;        &#10;        return result;&#10;    }&#10;&#10;    /**&#10;     * 批量修改$!{tableComment}&#10;     *&#10;     * @param dtoList $!{tableComment}信息集合&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public boolean batchUpdate$!{entityClass}(List&lt;$!{entityClass}Dto&gt; dtoList) {&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = $!{entityName}Mapping.sourceToTarget(dtoList);&#10;        return updateBatchById($!{entityName}List);&#10;    }&#10;&#10;    /**&#10;     * 删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public int delete$!{entityClass}ById($!pk.shortType id) {&#10;        int result = $!{entityName}Mapper.deleteById(id);&#10;        ExceptionEnum.$!{entityClassUpper}_DELETE_ERROR.&#10;                      assertException(num -&gt; num != 1, result);&#10;        &#10;        return result;&#10;    }&#10;&#10;    /**&#10;     * 批量删除$!{tableComment}&#10;     *&#10;     * @param ids id集合&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public int batchDeleteByIds(List&lt;$!pk.shortType&gt; ids) {&#10;        int result = $!{entityName}Mapper.deleteBatchIds(ids);&#10;        ExceptionEnum.$!{entityClassUpper}_DELETE_ERROR.&#10;                      assertException(num -&gt; num != ids.size(), result);&#10;        &#10;        return result;&#10;    }&#10;}" />
                    <option name="name" value="serviceImpl.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($controllerClass = $tool.append($tableInfo.name, &quot;Controller&quot;))&#10;#set($entityClass = $tableInfo.name)&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($dtoName = $tool.append($tool.firstLowerCase($tableInfo.name),&quot;Dto&quot;))&#10;#set($dtoClass = $tool.append($tableInfo.name, &quot;Dto&quot;))&#10;#set($serviceClass = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;#set($serviceName = $tool.append($tool.firstLowerCase($tableInfo.name),&quot;Service&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($controllerClass, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/controller&quot;))&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;&#10;&#10;import $!{tableInfo.savePackageName}.bo.$!{entityClass}Bo;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.common.entity.Result;&#10;import $!{tableInfo.savePackageName}.dto.$dtoClass;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.mapping.$!{packageName}.$!{entityClass}DtoMapping;&#10;import $!{tableInfo.savePackageName}.service.$serviceClass;&#10;import $!{tableInfo.savePackageName}.vo.$!{entityClass}Vo;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.web.bind.annotation.DeleteMapping;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.PathVariable;&#10;import org.springframework.web.bind.annotation.PostMapping;&#10;import org.springframework.web.bind.annotation.PutMapping;&#10;import org.springframework.web.bind.annotation.RequestBody;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;import javax.validation.Valid;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;控制层&quot;)&#10;@Slf4j&#10;@RestController&#10;@RequestMapping(&quot;/api/v1/$!{entityName}s&quot;)&#10;@RequiredArgsConstructor(onConstructor = @__(@Autowired))&#10;public class $!{controllerClass} {&#10;&#10;    private final $serviceClass $serviceName;&#10;    &#10;    private final $!{entityClass}DtoMapping $!{entityName}DtoMapping;&#10;&#10;    /**&#10;     * 查询$!{tableComment}列表&#10;     *&#10;     * @param $!{entityName}Bo 查询条件&#10;     * @return Result&lt;List&lt;$!{entityClass}Vo&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/list&quot;)&#10;    public Result&lt;List&lt;$!{entityClass}Vo&gt;&gt; get$!{entityClass}List($!{entityClass}Bo $!{entityName}Bo){&#10;        $!{entityClass}Dto $!{entityName}Dto = $!{entityName}DtoMapping.sourceToTarget($!{entityName}Bo);&#10;        List&lt;$!{entityClass}Vo&gt; $!{entityName}List = $!{serviceName}.get$!{entityClass}List($!{entityName}Dto);&#10;        return Result.success(&quot;查询$!{tableComment}列表成功&quot;, $!{entityName}List);&#10;    }&#10;&#10;    /**&#10;     * 查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param $!{entityName}Bo 查询条件&#10;     * @return Result&lt;PageResult&lt;$!{entityClass}Vo&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/page&quot;)&#10;    public Result&lt;PageResult&lt;$!{entityClass}Vo&gt;&gt; get$!{entityClass}PageList($!{entityClass}Bo $!{entityName}Bo){&#10;        $!{entityClass}Dto $!{entityName}Dto = $!{entityName}DtoMapping.sourceToTarget($!{entityName}Bo);&#10;        PageResult&lt;$!{entityClass}Vo&gt; pageResult = $!{serviceName}.get$!{entityClass}PageList($!{entityName}Dto);&#10;        return Result.success(&quot;查询$!{tableComment}列表成功&quot;, pageResult);&#10;    }&#10;&#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return Result&lt;$!{entityClass}Vo&gt;&#10;     */&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Result&lt;$!{entityClass}Vo&gt; get$!{entityClass}ById(@PathVariable(&quot;id&quot;) $!pk.shortType id){&#10;        $!{entityClass}Vo $!{entityName}Vo = $!{serviceName}.get$!{entityClass}ById(id);&#10;        return Result.success(&quot;查询$!{tableComment}成功&quot;, $!{entityName}Vo);&#10;    }&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param $!{entityName}Bo $!{tableComment}信息&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @PostMapping&#10;    public Result&lt;Void&gt; save$!{entityClass}(@Valid @RequestBody $!{entityClass}Bo $!{entityName}Bo){&#10;        $!{entityClass}Dto $!{entityName}Dto = $!{entityName}DtoMapping.sourceToTarget($!{entityName}Bo);&#10;        $!{serviceName}.save$!{entityClass}($!{entityName}Dto);&#10;        return Result.success(&quot;新增$!{tableComment}成功&quot;);&#10;    }&#10;&#10;    /**&#10;     * 修改$!{tableComment}&#10;     *&#10;     * @param $!{entityName}Bo $!{tableComment}信息&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public Result&lt;Void&gt; update$!{entityClass}(@PathVariable(&quot;id&quot;) $!pk.shortType id, @RequestBody $!{entityClass}Bo $!{entityName}Bo){&#10;        $!{entityClass}Dto $!{entityName}Dto = $!{entityName}DtoMapping.sourceToTarget($!{entityName}Bo);&#10;        $!{entityName}Dto.setId(id);&#10;        $!{serviceName}.update$!{entityClass}($!{entityName}Dto);&#10;        return Result.success(&quot;修改$!{tableComment}成功&quot;);&#10;    }&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return  Result&lt;rows&gt;&#10;     */&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public Result&lt;Void&gt; delete$!{entityClass}ById(@PathVariable(&quot;id&quot;) $!pk.shortType id){&#10;        $!{serviceName}.delete$!{entityClass}ById(id);&#10;        return Result.success(&quot;删除$!{tableComment}成功&quot;);&#10;    }&#10;&#10;    /**&#10;     * 批量删除$!{tableComment}&#10;     *&#10;     * @param ids id集合&#10;     * @return  Result&lt;rows&gt;&#10;     */&#10;    @DeleteMapping(&quot;/batch/ids&quot;)&#10;    public Result&lt;Void&gt; batchDeleteByIds(@RequestBody List&lt;$!pk.shortType&gt; ids){&#10;        $!{serviceName}.batchDeleteByIds(ids);&#10;        return Result.success(&quot;批量删除$!{tableComment}成功&quot;);&#10;    }&#10;}" />
                    <option name="name" value="controller.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;Result.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import $!{tableInfo.savePackageName}.common.enums.ResultCodeEnum;&#10;import lombok.Data;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;    &#10;#classComment(&quot;响应结果封装实体&quot;) &#10;@Data&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class Result&lt;T&gt; {&#10;    &#10;    private boolean success;//是否成功&#10;    private Integer code;//返回码&#10;    private String message;//返回消息&#10;    private T data;//返回数据&#10;&#10;    private Map&lt;String,Object&gt; extend;//扩展数据&#10;    &#10;    public Result() {&#10;    }&#10;&#10;    public Result(boolean flag, Integer code, String message, T data) {&#10;        this.success = flag;&#10;        this.code = code;&#10;        this.message = message;&#10;        this.data = data;&#10;    }&#10;&#10;    public Result(boolean flag, Integer code, String message) {&#10;        this.success = flag;&#10;        this.code = code;&#10;        this.message = message;&#10;    }&#10;&#10;    /**&#10;     * 响应成功&#10;     *&#10;     * @param message 提示信息&#10;     * @return Result&lt;Void&gt;&#10;     */&#10;    public static Result&lt;Void&gt; success(String message){&#10;        return new Result&lt;&gt;(true, ResultCodeEnum.SUCCESS.getCode(), message);&#10;    }&#10;&#10;    /**&#10;     * 响应成功&#10;     *&#10;     * @param message 提示信息&#10;     * @param data 响应数据&#10;     * @return Result&lt;T&gt;&#10;     */&#10;    public static &lt;T&gt; Result&lt;T&gt; success(String message, T data){&#10;        return new Result&lt;&gt;(true, ResultCodeEnum.SUCCESS.getCode(), message, data);&#10;    }&#10;&#10;    /**&#10;     * 响应失败&#10;     *&#10;     * @param code 状态码&#10;     * @param message 提示信息&#10;     * @return Result&lt;Void&gt;&#10;     */&#10;    public static &lt;T&gt; Result&lt;T&gt; error(Integer code, String message){&#10;        return new Result&lt;&gt;(false, code, message, null);&#10;    }&#10;&#10;    /**&#10;     * 扩展数据&#10;     *&#10;     * @param key key&#10;     * @param value value&#10;     * @return Result&#10;     */&#10;    public Result&lt;T&gt; extend(String key, Object value){&#10;        if(null == extend){&#10;            extend = new HashMap&lt;&gt;();&#10;        }&#10;        this.extend.put(key, value);&#10;        return this;&#10;    }&#10;}" />
                    <option name="name" value="result.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;PageResult.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.util.List;&#10;    &#10;#classComment(&quot;分页结果实体&quot;) &#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class PageResult&lt;T&gt; {&#10;&#10;    private Long total;//总记录数&#10;    private Long totalPage;// 总页数&#10;    private List&lt;T&gt; rows;//记录&#10;    private Integer page;&#10;    private Integer size;&#10;    private Boolean hasNext;&#10;    private Boolean hasPrevious;&#10;&#10;    public PageResult(Long total, Long totalPage, List&lt;T&gt; rows) {&#10;        this.total = total;&#10;        this.totalPage = totalPage;&#10;        this.rows = rows;&#10;    }&#10;}" />
                    <option name="name" value="pageResult.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;PageRequest.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import lombok.Setter;&#10;import java.io.Serializable;&#10;    &#10;#classComment(&quot;分页请求基类&quot;) &#10;@Setter&#10;public class PageRequest implements Serializable{&#10;    &#10;    private Integer size;&#10;    private Integer page;&#10;    private String orderBy;&#10;&#10;    public Integer getSize() {&#10;        if (this.size == null || this.size &lt; 0 || this.size &gt; 50){&#10;            setSize(10);&#10;        }&#10;        return size;&#10;    }&#10;&#10;    public Integer getPage() {&#10;        if (this.page == null || this.page &lt; 0) {&#10;            setPage(1);&#10;        }&#10;        return page;&#10;    }&#10;&#10;    public String getOrderBy() {&#10;        return orderBy;&#10;    }&#10;}" />
                    <option name="name" value="pageRequest.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ResultCodeEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;import lombok.Getter;&#10;    &#10;#classComment(&quot;响应状态码&quot;) &#10;@Getter&#10;public enum ResultCodeEnum {&#10;&#10;    SUCCESS(20000,&quot;成功&quot;),&#10;    PARAM_ERROR(21003, &quot;参数不正确&quot;),&#10;    ;&#10;&#10;    private final Integer code;&#10;&#10;&#9;private final String message;&#10;&#9;&#10;&#9;ResultCodeEnum(Integer code, String message) {&#10;&#9;&#9;this.code = code;&#10;&#9;&#9;this.message = message;&#10;&#9;}&#10;}" />
                    <option name="name" value="resultCodeEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($entityClass = $tableInfo.name.toUpperCase())&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;##设置回调&#10;$!callback.setFileName(&quot;ExceptionEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.exception.ServiceExceptionAssert;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import lombok.NoArgsConstructor;&#10;&#10;#classComment(&quot;业务异常枚举定义&quot;) &#10;@Getter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public enum  ExceptionEnum implements ServiceExceptionAssert {&#10;    &#10;    INTERNAL_SERVER_ERROR(500, &quot;服务器打酱油了，请稍后再试~&quot;),&#10;    USERNAME_NOT_FOUND(400,&quot;用户名为空&quot;),&#10;    PASSWORD_NOT_FOUND(400,&quot;密码为空&quot;),&#10;    #foreach($table in $tableInfoList)&#10;$table.obj.name.toUpperCase()_IS_NOT_EXIST(400,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)不存在&quot;),&#10;    $table.obj.name.toUpperCase()_SAVE_ERROR(500,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)保存失败&quot;),&#10;    $table.obj.name.toUpperCase()_UPDATE_ERROR(500,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)更新失败&quot;),&#10;    $table.obj.name.toUpperCase()_DELETE_ERROR(500,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)删除失败&quot;),&#10;    #end&#10;;&#10;&#10;    private Integer code;&#10;    private String message;&#10;}" />
                    <option name="name" value="exceptionEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;GlobalExceptionHandler.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.Result;&#10;import $!{tableInfo.savePackageName}.common.enums.IExceptionEnum;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.apache.commons.lang3.StringUtils;&#10;import org.springframework.context.support.DefaultMessageSourceResolvable;&#10;import org.springframework.http.HttpHeaders;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.http.converter.HttpMessageNotReadableException;&#10;import org.springframework.lang.Nullable;&#10;import org.springframework.validation.BindException;&#10;import org.springframework.validation.FieldError;&#10;import org.springframework.web.bind.MethodArgumentNotValidException;&#10;import org.springframework.web.bind.annotation.ExceptionHandler;&#10;import org.springframework.web.bind.annotation.RestControllerAdvice;&#10;import org.springframework.web.context.request.WebRequest;&#10;import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;&#10;import org.springframework.web.util.WebUtils;&#10;&#10;import javax.validation.ConstraintViolationException;&#10;import java.nio.file.AccessDeniedException;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;    &#10;#classComment(&quot;统一异常处理类&quot;) &#10;@Slf4j&#10;@RestControllerAdvice&#10;public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {&#10;&#10;    /**&#10;     * 处理单个参数校验异常&#10;     *&#10;     * @param e ConstraintViolationException&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(ConstraintViolationException.class)&#10;    public ResponseEntity&lt;Object&gt; handleConstraintViolationException(ConstraintViolationException e) {&#10;        String message = e.getMessage();&#10;        message = StringUtils.substringAfterLast(message,&quot;:&quot;).trim();&#10;        log.error(&quot;[统一异常]单个参数校验异常，异常信息:{}&quot;,message);&#10;&#10;        // 生成返回结果&#10;        return createResponseResponseEntity(message, HttpStatus.BAD_REQUEST.value());&#10;    }&#10;&#10;    /**&#10;     * 自定义异常处理&#10;     * @param ex&#10;     * @param body&#10;     * @param headers&#10;     * @param status&#10;     * @param request&#10;     * @return&#10;     */&#10;    @Override&#10;    protected ResponseEntity&lt;Object&gt; handleExceptionInternal(&#10;            Exception ex, @Nullable Object body, HttpHeaders headers, HttpStatus status, WebRequest request) {&#10;        String msg=&quot;&quot;;&#10;        if(ex instanceof BindException){&#10;            //处理普通类型Content-Type参数校验异常&#10;            List&lt;FieldError&gt; fieldErrors = ((BindException)ex).getFieldErrors();&#10;            msg = fieldErrors.stream().map(DefaultMessageSourceResolvable::getDefaultMessage)&#10;                    .collect(Collectors.joining(&quot;|&quot;));&#10;            log.error(&quot;[统一异常]对象参数校验异常，异常信息:{}&quot;, msg);&#10;        }else if(ex instanceof MethodArgumentNotValidException) {&#10;            //处理Content-Type=application/json的参数校验异常&#10;            List&lt;FieldError&gt; fieldErrors = ((MethodArgumentNotValidException) ex).getBindingResult().getFieldErrors();&#10;            msg = fieldErrors.stream().map(DefaultMessageSourceResolvable::getDefaultMessage)&#10;                    .collect(Collectors.joining(&quot;|&quot;));&#10;            log.error(&quot;[统一异常]对象参数校验异常，异常信息:{}&quot;,msg);&#10;        } else if (ex instanceof HttpMessageNotReadableException){&#10;            //处理请求体为空异常&#10;            String message = ex.getMessage();&#10;            log.error(&quot;[统一异常]参数错误异常，异常信息，{}&quot;, message);&#10;            if(message.contains(&quot;JSON parse error&quot;)) {&#10;                String paramName = StringUtils.substringBetween(message, &quot;[\&quot;&quot;, &quot;\&quot;]&quot;);&#10;                msg = paramName + &quot;: &quot; + StringUtils.substring(message,&#10;                        message.indexOf(&quot;problem:&quot;) + 8, message.indexOf(&quot;;&quot;)).trim();&#10;            } else if (message.contains(&quot;Required request body is missing&quot;)){&#10;                msg = StringUtils.substringBefore(message,&quot;:&quot;).trim();&#10;            } else {&#10;                msg = StringUtils.substringBefore(message,&quot;;&quot;).trim();&#10;            }&#10;        }else {&#10;            //其他异常&#10;            msg = ex.getMessage();&#10;        }&#10;&#10;        if (HttpStatus.INTERNAL_SERVER_ERROR.equals(status)) {&#10;            request.setAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE, ex, WebRequest.SCOPE_REQUEST);&#10;        }&#10;        log.error(&quot;[统一异常]{}异常，异常信息:{}&quot;, ex.getClass().getSimpleName(), msg);&#10;        return createResponseResponseEntity(msg, status.value());&#10;    }&#10;&#10;    /**&#10;     * 处理403异常&#10;     *&#10;     * @param e AccessDeniedException&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(AccessDeniedException.class)&#10;    public ResponseEntity&lt;Object&gt; handleAccessDeniedException(AccessDeniedException e) {&#10;        String message = e.getMessage();&#10;        log.error(&quot;[统一异常]拒绝访问异常，异常信息，{}&quot;, message);&#10;&#10;        // 生成返回结果&#10;        return createResponseResponseEntity(message, HttpStatus.FORBIDDEN.value());&#10;    }&#10;&#10;    /**&#10;     * 处理自定义业务异常&#10;     *&#10;     * @param cause 异常&#10;     * @param e ServiceException&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(ServiceException.class)&#10;    public ResponseEntity&lt;Object&gt; handleException(Throwable cause, ServiceException e){&#10;        String message;&#10;        int code;&#10;        IExceptionEnum exceptionEnum = e.getExceptionEnum();&#10;        if(null != exceptionEnum){&#10;            message = exceptionEnum.getMessage();&#10;            code = exceptionEnum.getCode();&#10;        }else {&#10;            message = e.getMessage();&#10;            code = e.getCode();&#10;        }&#10;        log.error(&quot;[统一异常]ServiceException异常，异常信息:{}&quot;, message);&#10;        &#10;        // 记录堆栈信息&#10;        final Writer result = new StringWriter();&#10;        final PrintWriter printWriter = new PrintWriter(result);&#10;        cause.printStackTrace(printWriter);&#10;        log.error(&quot;[统一异常]其他异常，堆栈信息：{}&quot;, result);&#10;&#10;        // 生成返回结果&#10;        return Result.error(code, message);&#10;    }&#10;&#10;    /**&#10;     * 其他异常统一处理&#10;     *&#10;     * @param cause 异常&#10;     * @param e Exception&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(Exception.class)&#10;    public ResponseEntity&lt;Object&gt; exceptionHandler(Throwable cause, Exception e) {&#10;        log.error(&quot;[统一异常]其他异常，异常:{}&quot;, e.getClass().toString());&#10;        String message = e.getMessage();&#10;        log.error(&quot;[统一异常]其他异常，异常信息，{}&quot;, message);&#10;        &#10;        // 记录堆栈信息&#10;        final Writer result = new StringWriter();&#10;        final PrintWriter printWriter = new PrintWriter(result);&#10;        cause.printStackTrace(printWriter);&#10;        log.error(&quot;[统一异常]其他异常，堆栈信息：{}&quot;, result);&#10;&#10;        // 生成返回结果&#10;        return Result.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), message);&#10;    }&#10;&#10;    /**&#10;     * 返回异常处理结果&#10;     *&#10;     * @param msg 异常信息&#10;     * @param status 状态码&#10;     * @return ResponseEntity&#10;     */&#10;    private ResponseEntity&lt;Object&gt; createResponseResponseEntity(String msg, int status) {&#10;        // 生成返回结果&#10;        Result&lt;Object&gt; result = Result.error(status, msg);&#10;        return ResponseEntity.status(status).body(result);&#10;    }&#10;}" />
                    <option name="name" value="globalExceptionHandler.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ServiceException.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.enums.IExceptionEnum;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import lombok.NoArgsConstructor;&#10;    &#10;#classComment(&quot;自定义业务异常&quot;) &#10;@Getter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class ServiceException extends RuntimeException{&#10;&#10;    private IExceptionEnum exceptionEnum;&#10;&#10;    private int code;&#10;&#10;    private String msg;&#10;&#10;    public ServiceException(IExceptionEnum exceptionEnum) {&#10;        super(exceptionEnum.getMessage());&#10;        this.exceptionEnum = exceptionEnum;&#10;    }&#10;&#10;    public ServiceException(int code, String msg) {&#10;        super(msg);&#10;        this.code = code;&#10;        this.msg = msg;&#10;    }&#10;}" />
                    <option name="name" value="serviceException.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;Assert.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import java.util.function.Predicate;&#10;&#10;#classComment(&quot;异常断言接口&quot;) &#10;public interface Assert {&#10;&#10;    /**&#10;     * 创建异常&#10;     * @return {@link RuntimeException}&#10;     */&#10;    RuntimeException newException();&#10;&#10;    /**&#10;     * 创建异常&#10;     * @param code 错误码&#10;     * @param msg 错误提示&#10;     * @return {@link RuntimeException}&#10;     */&#10;    RuntimeException newException(int code, String msg);&#10;&#10;    /**&#10;     * 如predicate为true，则抛出异常&#10;     *&#10;     * @param predicate {@link Predicate}&#10;     * @param args 待判断对象&#10;     */&#10;    default &lt;T&gt; void assertException(Predicate&lt;? super T&gt; predicate, T args) {&#10;        if (predicate.test(args)) {&#10;            throw newException();&#10;        }&#10;    }&#10;    &#10;     /**&#10;     * 抛出自定义异常&#10;     *&#10;     */&#10;    default &lt;T&gt; void assertException() {&#10;        throw newException();&#10;    }&#10;&#10;    /**&#10;     * 抛出自定义异常&#10;     *&#10;     * @param code 错误码&#10;     * @param msg 错误提示&#10;     */&#10;    default void assertException(int code, String msg) {&#10;        throw newException(code, msg);&#10;    }&#10;}" />
                    <option name="name" value="assert.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ServiceExceptionAssert.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.enums.IExceptionEnum;&#10;&#10;#classComment(&quot;业务异常断言接口&quot;) &#10;public interface ServiceExceptionAssert extends IExceptionEnum, Assert{&#10;&#10;    /**&#10;     * 创建异常&#10;     *&#10;     * @return {@link RuntimeException}&#10;     */&#10;    @Override&#10;    default RuntimeException newException(){&#10;        return new ServiceException(this);&#10;    }&#10;&#10;    /**&#10;     * 创建异常&#10;     *&#10;     * @param code 错误码&#10;     * @param msg 错误提示&#10;     * @return {@link RuntimeException}&#10;     */&#10;    @Override&#10;    default RuntimeException newException(int code, String msg){&#10;        return new ServiceException(code, msg);&#10;    }&#10;}" />
                    <option name="name" value="serviceExceptionAssert.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ServletResponseStatusEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import org.springframework.http.HttpStatus;&#10;&#10;import java.util.Objects;&#10;import java.util.stream.Stream;&#10;&#10;#classComment(&quot;servlet异常和状态码枚举&quot;) &#10;@Getter&#10;@AllArgsConstructor&#10;public enum ServletResponseStatusEnum {&#10;&#10;    HttpRequestMethodNotSupportedException(&quot;HttpRequestMethodNotSupportedException&quot;,&#10;            HttpStatus.METHOD_NOT_ALLOWED.value()),&#10;    HttpMediaTypeNotSupportedException(&quot;HttpMediaTypeNotSupportedException&quot;,&#10;            HttpStatus.UNSUPPORTED_MEDIA_TYPE.value()),&#10;    HttpMediaTypeNotAcceptableException(&quot;HttpMediaTypeNotAcceptableException&quot;,&#10;            HttpStatus.NOT_ACCEPTABLE.value()),&#10;    MissingPathVariableException(&quot;MissingPathVariableException&quot;,&#10;            HttpStatus.INTERNAL_SERVER_ERROR.value()),&#10;    MissingServletRequestParameterException(&quot;MissingServletRequestParameterException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    ServletRequestBindingException(&quot;ServletRequestBindingException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    ConversionNotSupportedException(&quot;ConversionNotSupportedException&quot;,&#10;            HttpStatus.INTERNAL_SERVER_ERROR.value()),&#10;    TypeMismatchException(&quot;TypeMismatchException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    HttpMessageNotReadableException(&quot;HttpMessageNotReadableException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    HttpMessageNotWritableException(&quot;HttpMessageNotWritableException&quot;,&#10;            HttpStatus.INTERNAL_SERVER_ERROR.value()),&#10;    MethodArgumentNotValidException(&quot;MethodArgumentNotValidException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    MissingServletRequestPartException(&quot;MissingServletRequestPartException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    NoHandlerFoundException(&quot;NoHandlerFoundException&quot;,&#10;            HttpStatus.NOT_FOUND.value()),&#10;    AsyncRequestTimeoutException(&quot;AsyncRequestTimeoutException&quot;,&#10;            HttpStatus.SERVICE_UNAVAILABLE.value()),&#10;    MethodArgumentTypeMismatchException(&quot;MethodArgumentTypeMismatchException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    ;&#10;&#10;    private final String className;&#10;    private final Integer status;&#10;&#10;    public static ServletResponseStatusEnum of(String className){&#10;        Objects.requireNonNull(className);&#10;&#10;        return Stream.of(values())&#10;                .filter(bean -&gt; bean.getClassName().equals(className))&#10;                .findAny()&#10;                .orElseThrow(() -&gt; new IllegalArgumentException(className + &quot; not exists&quot;));&#10;    }&#10;}" />
                    <option name="name" value="servletResponseStatusEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;DefaultErrorController.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.enums.ExceptionEnum;&#10;import org.springframework.boot.web.servlet.error.ErrorController;&#10;import org.springframework.stereotype.Controller;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;&#10;import javax.servlet.http.HttpServletRequest;&#10;&#10;#classComment(&quot;默认错误处理控制器&quot;) &#10;@Controller&#10;public class DefaultErrorController implements ErrorController {&#10;&#10;    @RequestMapping(&quot;/error&quot;)&#10;    public String handleError(HttpServletRequest request){&#10;        //获取statusCode:401,404,500&#10;        Integer statusCode = (Integer) request.getAttribute(&quot;javax.servlet.error.status_code&quot;);&#10;        if(statusCode == 500){&#10;            throw new ServiceException(ExceptionEnum.INTERNAL_SERVER_ERROR);&#10;        }else if(statusCode == 404){&#10;            throw new ServiceException(404, &quot;Not Found&quot;);&#10;        }else if(statusCode == 403){&#10;            throw new ServiceException(403, &quot;Forbidden&quot;);&#10;        }else{&#10;            throw new ServiceException(ExceptionEnum.INTERNAL_SERVER_ERROR);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String getErrorPath() {&#10;        return &quot;/error&quot;;&#10;    }&#10;}" />
                    <option name="name" value="defaultErrorController.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;IExceptionEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;#classComment(&quot;异常枚举父类&quot;) &#10;public interface IExceptionEnum {&#10;&#10;    Integer getCode();&#10;&#10;    String getMessage();&#10;}" />
                    <option name="name" value="iExceptionEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;#set($mapperPackage = $tool.append($!{tableInfo.savePackageName}, &quot;.mapper&quot;))&#10;##设置回调&#10;$!callback.setFileName(&quot;MybatisPlusConfig.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/config&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;config&quot;)&#10;&#10;import com.baomidou.mybatisplus.annotation.DbType;&#10;import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;&#10;import com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;&#10;import org.mybatis.spring.annotation.MapperScan;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;&#10;#classComment(&quot;MybatisPlus配置&quot;) &#10;@Configuration&#10;@MapperScan(&quot;$!{mapperPackage}&quot;)&#10;public class MybatisPlusConfig {&#10;&#10;    /**&#10;     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false&#10;     * 避免缓存出现问题(该属性会在旧插件移除后一同移除)&#10;     */&#10;    @Bean&#10;    public MybatisPlusInterceptor mybatisPlusInterceptor() {&#10;        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();&#10;        interceptor.addInnerInterceptor(paginationInnerInterceptor());&#10;        return interceptor;&#10;    }&#10;&#10;    /**&#10;     * mybatis-plus分页插件&#10;     */&#10;    @Bean&#10;    public PaginationInnerInterceptor paginationInnerInterceptor() {&#10;        PaginationInnerInterceptor paginationInnerInterceptor = new PaginationInnerInterceptor();&#10;        // 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false&#10;        // paginationInterceptor.setOverflow(false);&#10;        // 设置最大单页限制数量，默认 500 条，-1 不受限制&#10;        // paginationInterceptor.setMaxLimit(500);&#10;        paginationInnerInterceptor.setDbType(DbType.MYSQL);&#10;        return paginationInnerInterceptor;&#10;    }&#10;}" />
                    <option name="name" value="mybatisPlusConfig.java" />
                  </Template>
                </list>
              </option>
              <option name="name" value="MybatisPlus-plus" />
            </TemplateGroup>
          </value>
        </entry>
        <entry key="jpa">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;&#10;##使用宏定义设置回调（保存位置与文件后缀）&#10;#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;entity&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import $!{tableInfo.savePackageName}.common.entity.BaseEntity;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;import javax.persistence.*;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;实体&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;@Entity&#10;@Table(name = &quot;$!{tableInfo.obj.name}&quot;)&#10;##@org.hibernate.annotations.Table(appliesTo = &quot;$!{tableInfo.obj.name}&quot;,comment = &quot;$!{tableInfo.comment}&quot;)&#10;##@JsonIgnoreProperties(value={&quot;hibernateLazyInitializer&quot;,&quot;handler&quot;,&quot;fieldHandler&quot;}) &#10;public class $!{tableInfo.name} extends BaseEntity {&#10;    &#10;#foreach($column in $tableInfo.pkColumn)&#10;    @Id&#10;    @Column(name =&quot;$!{column.obj.name}&quot;)&#10;    @GeneratedValue(strategy=GenerationType.IDENTITY)&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;#foreach($column in $tableInfo.otherColumn)&#10;#if($!{column.obj.name} != &quot;create_by&quot; &amp;&amp; $!{column.obj.name} != &quot;create_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;update_by&quot; &amp;&amp; $!{column.obj.name} != &quot;update_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;is_deleted&quot;)&#10;    #if(${column.comment})/**&#10;     * ${column.comment}&#10;     */&#10;    #end&#10;@Column(name = &quot;$!{column.obj.name}&quot;)&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    &#10;#end&#10;#end&#10;}" />
                    <option name="name" value="entity.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseEntity.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import java.time.LocalDateTime;&#10;import javax.persistence.Column;&#10;import lombok.Data;&#10;&#10;#classComment(&quot;实体基类&quot;) &#10;@Data&#10;public class BaseEntity{&#10;&#10;    /**&#10;     * 是否删除(1为删除，0为未删除)&#10;     */&#10;    @Column(name = &quot;is_deleted&quot;)&#10;    private Boolean deleted = false;&#10;    &#10;    /** &#10;     * 创建者 &#10;     */&#10;    private String createBy;&#10;&#10;    /** &#10;     * 创建时间 &#10;     */&#10;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    private LocalDateTime createTime;&#10;&#10;    /** &#10;     * 更新者 &#10;     */&#10;    private String updateBy;&#10;&#10;    /** &#10;     * 更新时间 &#10;     */&#10;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    private LocalDateTime updateTime;&#10;}" />
                    <option name="name" value="BaseEntity.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseDto.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import java.time.LocalDateTime;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;&#10;#classComment(&quot;Dto实体基类&quot;) &#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;public class BaseDto extends PageRequest {&#10;&#10;    /**&#10;     * 是否删除(1为删除，0为未删除)&#10;     */&#10;    private Boolean deleted;&#10;    &#10;    /** &#10;     * 创建者 &#10;     */&#10;    private String createBy;&#10;&#10;    /** &#10;     * 创建时间 &#10;     */&#10;    private LocalDateTime createTime;&#10;&#10;    /** &#10;     * 更新者 &#10;     */&#10;    private String updateBy;&#10;&#10;    /** &#10;     * 更新时间 &#10;     */&#10;    private LocalDateTime updateTime;&#10;}" />
                    <option name="name" value="baseDto.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Dto&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dto&quot;))&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dto;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.BaseDto;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;&#10;#tableComment(&quot;Dto&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;public class $!{tableName} extends BaseDto {&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.obj.name} != &quot;create_by&quot; &amp;&amp; $!{column.obj.name} != &quot;create_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;update_by&quot; &amp;&amp; $!{column.obj.name} != &quot;update_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;is_deleted&quot;)&#10;#if(${column.comment})&#10;    /** &#10;     * ${column.comment}&#10;     */&#10;#end&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    &#10;#end    &#10;#end&#10;}" />
                    <option name="name" value="dto.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Vo&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/vo&quot;))&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}vo;&#10;&#10;$!autoImport&#10;import lombok.Data;&#10;import io.swagger.annotations.ApiModel;&#10;import io.swagger.annotations.ApiModelProperty;&#10;&#10;#tableComment(&quot;Vo&quot;)&#10;@Data&#10;@ApiModel(value=&quot;$!{tableName}&quot;,description=&quot;展示$!{tableComment}实体&quot;)&#10;public class $!{tableName} {&#10;#foreach($column in $tableInfo.fullColumn)&#10;&#10;#if(${column.comment})&#10;    /** &#10;     * ${column.comment}&#10;     */&#10;#end&#10;    @ApiModelProperty(name = &quot;$!{column.name}&quot;, value = &quot;$!{column.comment}&quot;, required = false)&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;}" />
                    <option name="name" value="vo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Repository&quot;))&#10;#set($entityClass = $tableInfo.name)&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/repository&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}repository;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import org.springframework.data.jpa.repository.JpaSpecificationExecutor;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;#tableComment(&quot;数据库访问层&quot;)&#10;public interface $!{tableName} extends JpaRepository&lt;$!{entityClass}, $!pk.shortType&gt;,JpaSpecificationExecutor&lt;$!{entityClass}&gt; {&#10;  &#10;}" />
                    <option name="name" value="repository.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;服务接口&quot;)&#10;public interface $!{tableName} {&#10;    &#10;    /**&#10;     * 查询所有$!{tableComment}&#10;     *&#10;     * @return List&lt;$!{tableInfo.name}&gt;&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; get$!{tableInfo.name}All();&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return List&lt;$!{tableInfo.name}&gt;&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; get$!{tableInfo.name}List($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param dto 查询条件&#10;     * @return PageResult&lt;$!{tableInfo.name}&gt;&#10;     */&#10;    PageResult&lt;$!{tableInfo.name}&gt; get$!{tableInfo.name}PageList($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return $!{tableInfo.name}&#10;     */&#10;    $!{tableInfo.name} get$!{tableInfo.name}ById($!pk.shortType id);&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dto $!{tableInfo.comment}信息&#10;     * @return rows&#10;     */&#10;    $!{tableInfo.name} save$!{tableInfo.name}($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 修改$!{tableComment}&#10;     *&#10;     * @param dto $!{tableInfo.comment}信息&#10;     * @return rows&#10;     */&#10;    void update$!{tableInfo.name}($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     */&#10;    void delete$!{tableInfo.name}ById($!pk.shortType id);&#10;&#10;    /**&#10;     * 根据id集合批量删除&#10;     *&#10;     * @param ids&#10;     */&#10;    void batchDeleteByIds(List&lt;$!pk.shortType&gt; ids);&#10;}" />
                    <option name="name" value="service.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($className = $tool.append($tableInfo.name, &quot;ServiceImpl&quot;))&#10;#set($entityClass = $tableInfo.name)&#10;#set($entityClassUpper = $tableInfo.obj.name.toUpperCase())&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($className, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service/impl&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.common.enums.ExceptionEnum;&#10;import $!{tableInfo.savePackageName}.dto.$!{entityClass}Dto;&#10;import $!{tableInfo.savePackageName}.entity.$!{entityClass};&#10;import $!{tableInfo.savePackageName}.repository.$!{entityClass}Repository;&#10;import $!{tableInfo.savePackageName}.service.$!{entityClass}Service;&#10;import lombok.RequiredArgsConstructor;&#10;import org.apache.commons.lang3.StringUtils;&#10;import org.springframework.beans.BeanUtils;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.jpa.domain.Specification;&#10;import org.springframework.stereotype.Service;&#10;&#10;import javax.persistence.criteria.CriteriaBuilder;&#10;import javax.persistence.criteria.CriteriaQuery;&#10;import javax.persistence.criteria.Predicate;&#10;import javax.persistence.criteria.Root;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Objects;&#10;import java.util.Optional;&#10;import java.util.stream.Collectors;&#10;&#10;#tableComment(&quot;服务实现类&quot;)&#10;@Service&#10;@RequiredArgsConstructor(onConstructor = @__(@Autowired))&#10;public class $!{className} implements $!{entityClass}Service {&#10;&#10;    private final $!{entityClass}Repository $!{entityName}Repository;&#10;&#10;    /**&#10;     * 查询所有$!{tableComment}&#10;     *&#10;     * @return List&lt;$!{entityClass}&gt;&#10;     */&#10;    @Override&#10;    public List&lt;$!{entityClass}&gt; get$!{entityClass}All() {&#10;        return $!{entityName}Repository.findAll();&#10;    }&#10;    &#10;     /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return List&lt;$!{entityClass}&gt;&#10;     */&#10;    @Override&#10;    public List&lt;$!{entityClass}&gt; get$!{entityClass}List($!{entityClass}Dto dto) {&#10;        Specification&lt;$!{entityClass}&gt; specification = createSpecification(dto);&#10;        return $!{entityName}Repository.findAll(specification);&#10;    }&#10;    &#10;    /**&#10;     * 构建查询条件&#10;     * @param dto $!{tableComment}信息&#10;     * @return Example&#10;     */&#10;    private Specification&lt;$!{entityClass}&gt; createSpecification($!{entityClass}Dto dto){&#10;        Specification&lt;$!{entityClass}&gt; specification = new Specification&lt;$!{entityClass}&gt;() {&#10;&#10;            @Override&#10;            public Predicate toPredicate(Root&lt;$!{entityClass}&gt; root, CriteriaQuery&lt;?&gt; query,&#10;                                         CriteriaBuilder criteriaBuilder) {&#10;&#9;&#9;&#9;&#9;//集合 用于封装查询条件&#10;                List&lt;Predicate&gt; list = new ArrayList&lt;&gt;();&#10;                if (Objects.nonNull(dto)) {&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.name} == &quot;isDeleted&quot;)&#10;                    if(Objects.nonNull(dto.getDeleted())){&#10;                        list.add(criteriaBuilder.equal(root.get(&quot;isDeleted&quot;), dto.getDeleted()));&#10;#elseif($!{column.type} == &quot;java.lang.String&quot;)&#10;                    if (StringUtils.isNotBlank(dto.get$!{tool.firstUpperCase($column.name)}())) {&#10;                        list.add(criteriaBuilder.equal(root.get(&quot;$!{column.name}&quot;).as(String.class), &quot;%&quot; + dto.get$!{tool.firstUpperCase($column.name)}()+ &quot;%&quot;));&#10;#else&#10;                    if (Objects.nonNull(dto.get$!tool.firstUpperCase($column.name)())) {&#10;                        list.add(criteriaBuilder.equal(root.get(&quot;$!{column.name}&quot;), dto.get$!{tool.firstUpperCase($column.name)}()));&#10;#end&#10;                    }&#10;#end&#10;                }&#10;                Predicate[] array = new Predicate[list.size()];&#10;                return criteriaBuilder.and(list.toArray(array));&#10;            }&#10;        };&#10;        return specification;&#10;    }&#10;    &#10;    /**&#10;     * 根据条件查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param dto 查询条件&#10;     * @return Page&lt;$!{entityClass}&gt;&#10;     */&#10;    @Override&#10;    public Page&lt;$!{entityClass}&gt; get$!{entityClass}PageList($!{entityClass}Dto dto) {&#10;        Specification&lt;$!{entityClass}&gt; specification = createSpecification(dto);&#10;        PageRequest pageRequest = PageRequest.of(dto.getPage() - 1, dto.getSize());&#10;        Page&lt;$!{entityClass}&gt; page = $!{entityName}Repository.findAll(specification, pageRequest);&#10;        &#10;        PageResult&lt;$!{entityClass}&gt; pageResult = new PageResult&lt;&gt;(page.getTotalElements(), &#10;                    page.getTotalPages(), page.getContent());&#10;        pageResult.setPage(dto.getPage());&#10;        pageResult.setSize(dto.getSize());&#10;        pageResult.setHasNext(page.hasNext());&#10;        pageResult.setHasPrevious(page.hasPrevious());&#10;        &#10;        return pageResult;&#10;    }&#10;    &#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return $!{entityClass}&#10;     */&#10;    @Override&#10;    public $!{entityClass} get$!{entityClass}ById($!pk.shortType id) {&#10;        Optional&lt;$!{entityClass}&gt; optional = $!{entityName}Repository.findById(id);&#10;        return optional.orElse(null);&#10;    }&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     * @return rows&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public $!{entityClass} save$!{entityClass}($!{entityClass}Dto dto) {&#10;        $!{entityClass} $!{entityName} = new $!{entityClass}();&#10;        BeanUtils.copyProperties(dto, $!{entityName});&#10;        $!{entityName}.setId(null);&#10;&#10;        return $!{entityName}Repository.save($!{entityName});&#10;    }&#10;&#10;    /**&#10;     * 修改$!{tableComment}信息&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     * @return rows&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public void update$!{entityClass}($!{entityClass}Dto dto) {&#10;        $!{entityClass} $!{entityName} = new $!{entityClass}();&#10;        BeanUtils.copyProperties(dto, $!{entityName});&#10;&#10;        $!{entityName}Repository.save($!{entityName});&#10;    }&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return rows&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public void delete$!{entityClass}ById($!pk.shortType id) {&#10;        $!{entityName}Repository.deleteById(id);&#10;    }&#10;&#10;    /**&#10;     * 根据id集合批量删除$!{tableComment}&#10;     *&#10;     * @param ids&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public void batchDeleteByIds(List&lt;$!pk.shortType&gt; ids) {&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = ids.stream().map(id -&gt; {&#10;            $!{entityClass} $!{entityName} = new $!{entityClass}();&#10;            $!{entityName}.setId(id);&#10;            return $!{entityName};&#10;        }).collect(Collectors.toList());&#10;        $!{entityName}Repository.deleteAll($!{entityName}List);&#10;    }&#10;}" />
                    <option name="name" value="serviceImpl.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($controllerClass = $tool.append($tableInfo.name, &quot;Controller&quot;))&#10;#set($entityClass = $tableInfo.name)&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($dtoName = $tool.append($tool.firstLowerCase($tableInfo.name),&quot;Dto&quot;))&#10;#set($dtoClass = $tool.append($tableInfo.name, &quot;Dto&quot;))&#10;#set($voClass = $tool.append($tableInfo.name, &quot;Vo&quot;))&#10;#set($voName = $tool.append($tableInfo.name, &quot;Vo&quot;))&#10;#set($serviceClass = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;#set($serviceName = $tool.append($tool.firstLowerCase($tableInfo.name),&quot;Service&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($controllerClass, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/controller&quot;))&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.common.entity.Result;&#10;import $!{tableInfo.savePackageName}.dto.$dtoClass;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.service.$serviceClass;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.web.bind.annotation.DeleteMapping;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.PathVariable;&#10;import org.springframework.web.bind.annotation.PostMapping;&#10;import org.springframework.web.bind.annotation.PutMapping;&#10;import org.springframework.web.bind.annotation.RequestBody;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;import javax.validation.Valid;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;控制层&quot;)&#10;@Slf4j&#10;@RestController&#10;@RequestMapping(&quot;/api/v1/$!{entityName}s&quot;)&#10;@RequiredArgsConstructor(onConstructor = @__(@Autowired))&#10;public class $!{controllerClass} {&#10;&#10;    private final $serviceClass $serviceName;&#10;&#10;    /**&#10;     * 查询所有$!{tableComment}&#10;     *&#10;     * @return Result&lt;List&lt;$!{entityClass}&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/all&quot;)&#10;    public Result&lt;List&lt;$!{entityClass}&gt;&gt; get$!{entityClass}All(){&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = $!{serviceName}.get$!{entityClass}All();&#10;        return Result.success(&quot;查询所有$!{tableComment}成功&quot;, $!{entityName}List);&#10;    }&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return Result&lt;List&lt;$!{entityClass}&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/list&quot;)&#10;    public Result&lt;List&lt;$!{entityClass}&gt;&gt; get$!{entityClass}List($!{entityClass}Dto dto){&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = $!{serviceName}.get$!{entityClass}List(dto);&#10;        return Result.success(&quot;根据条件查询$!{tableComment}成功&quot;, $!{entityName}List);&#10;    }&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param dto 查询条件&#10;     * @return Result&lt;PageResult&lt;$!{entityClass}&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/page&quot;)&#10;    public Result&lt;PageResult&lt;$!{entityClass}&gt;&gt; get$!{entityClass}PageList($!{entityClass}Dto dto){&#10;        PageResult&lt;$!{entityClass}&gt; pageResult = $!{serviceName}.get$!{entityClass}PageList(dto);&#10;        return Result.success(&quot;根据条件分页查询$!{tableComment}成功&quot;, pageResult);&#10;    }&#10;&#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id $!{tableComment}id&#10;     * @return Result&lt;$!{entityClass}&gt;&#10;     */&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Result&lt;$!{entityClass}&gt; get$!{entityClass}ById(@PathVariable(&quot;id&quot;) Integer id){&#10;        $!{entityClass} $!{entityName} = $!{serviceName}.get$!{entityClass}ById(id);&#10;        return Result.success(&quot;查询$!{tableComment}成功&quot;, $!{entityName});&#10;    }&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @PostMapping&#10;    public Result&lt;Void&gt; save$!{entityClass}(@Valid @RequestBody $!{entityClass}Dto dto){&#10;        $!{serviceName}.save$!{entityClass}(dto);&#10;        return Result.success(&quot;新增$!{tableComment}成功&quot;);&#10;    }&#10;&#10;    /**&#10;     * 修改$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public Result&lt;Void&gt; update$!{entityClass}(@PathVariable(&quot;id&quot;) Integer id, @RequestBody $!{entityClass}Dto dto){&#10;        dto.setId(id);&#10;        $!{serviceName}.update$!{entityClass}(dto);&#10;        return Result.success(&quot;更新$!{tableComment}成功&quot;);&#10;    }&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return  Result&lt;rows&gt;&#10;     */&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public Result&lt;Void&gt; delete$!{entityClass}ById(@PathVariable(&quot;id&quot;) Integer id){&#10;        $!{serviceName}.delete$!{entityClass}ById(id);&#10;        return Result.success(&quot;删除$!{tableComment}成功&quot;);&#10;    }&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param ids id集合&#10;     * @return  Result&lt;rows&gt;&#10;     */&#10;    @DeleteMapping(&quot;/batch/ids&quot;)&#10;    public Result&lt;Void&gt; batchDeleteByIds(@RequestBody List&lt;Integer&gt; ids){&#10;        $!{serviceName}.batchDeleteByIds(ids);&#10;        return Result.success(&quot;批量删除$!{tableComment}成功&quot;);&#10;    }&#10;&#10;}" />
                    <option name="name" value="controller.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;Result.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import $!{tableInfo.savePackageName}.common.enums.ResultCodeEnum;&#10;import lombok.Data;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;#classComment(&quot;响应结果封装实体&quot;) &#10;@Data&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class Result&lt;T&gt; {&#10;    &#10;    private boolean success;//是否成功&#10;    private Integer code;//返回码&#10;    private String message;//返回消息&#10;    private T data;//返回数据&#10;&#10;    private Map&lt;String,Object&gt; extend;//扩展数据&#10;    &#10;    public Result() {&#10;    }&#10;&#10;    public Result(boolean flag, Integer code, String message, T data) {&#10;        this.success = flag;&#10;        this.code = code;&#10;        this.message = message;&#10;        this.data = data;&#10;    }&#10;&#10;    public Result(boolean flag, Integer code, String message) {&#10;        this.success = flag;&#10;        this.code = code;&#10;        this.message = message;&#10;    }&#10;&#10;    /**&#10;     * 响应成功&#10;     *&#10;     * @param message 提示信息&#10;     * @return Result&lt;Void&gt;&#10;     */&#10;    public static Result&lt;Void&gt; success(String message){&#10;        return new Result&lt;&gt;(true, ResultCodeEnum.SUCCESS.getCode(), message);&#10;    }&#10;&#10;    /**&#10;     * 响应成功&#10;     *&#10;     * @param message 提示信息&#10;     * @param data 响应数据&#10;     * @return Result&lt;T&gt;&#10;     */&#10;    public static &lt;T&gt; Result&lt;T&gt; success(String message, T data){&#10;        return new Result&lt;&gt;(true, ResultCodeEnum.SUCCESS.getCode(), message, data);&#10;    }&#10;&#10;    /**&#10;     * 响应失败&#10;     *&#10;     * @param code 状态码&#10;     * @param message 提示信息&#10;     * @return Result&lt;Void&gt;&#10;     */&#10;    public static &lt;T&gt; Result&lt;T&gt; error(Integer code, String message){&#10;        return new Result&lt;&gt;(false, code, message, null);&#10;    }&#10;&#10;    /**&#10;     * 扩展数据&#10;     *&#10;     * @param key key&#10;     * @param value value&#10;     * @return Result&#10;     */&#10;    public Result&lt;T&gt; extend(String key, Object value){&#10;        if(null == extend){&#10;            extend = new HashMap&lt;&gt;();&#10;        }&#10;        this.extend.put(key, value);&#10;        return this;&#10;    }&#10;}" />
                    <option name="name" value="result.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;PageResult.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.util.List;&#10;    &#10;#classComment(&quot;分页结果实体&quot;) &#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class PageResult&lt;T&gt; {&#10;&#10;    private Long total;//总记录数&#10;    private Integer totalPage;// 总页数&#10;    private List&lt;T&gt; rows;//记录&#10;    private Integer page;&#10;    private Integer size;&#10;    private Boolean hasNext;&#10;    private Boolean hasPrevious;&#10;&#10;    public PageResult(Long total, Integer totalPage, List&lt;T&gt; rows) {&#10;        this.total = total;&#10;        this.totalPage = totalPage;&#10;        this.rows = rows;&#10;    }&#10;}" />
                    <option name="name" value="pageResult.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;PageRequest.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import lombok.Setter;&#10;import java.io.Serializable;&#10;    &#10;#classComment(&quot;分页请求基类&quot;) &#10;@Setter&#10;public class PageRequest implements Serializable{&#10;    &#10;    private Integer size;&#10;    private Integer page;&#10;    private String orderBy;&#10;&#10;    public Integer getSize() {&#10;        if (this.size == null || this.size &lt; 0 || this.size &gt; 50){&#10;            setSize(10);&#10;        }&#10;        return size;&#10;    }&#10;&#10;    public Integer getPage() {&#10;        if (this.page == null || this.page &lt; 0) {&#10;            setPage(1);&#10;        }&#10;        return page;&#10;    }&#10;&#10;    public String getOrderBy() {&#10;        return orderBy;&#10;    }&#10;}" />
                    <option name="name" value="pageRequest.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ResultCodeEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;import lombok.Getter;&#10;    &#10;#classComment(&quot;响应状态码&quot;) &#10;@Getter&#10;public enum ResultCodeEnum {&#10;&#10;    SUCCESS(20000,&quot;成功&quot;),&#10;    PARAM_ERROR(21003, &quot;参数不正确&quot;),&#10;    ;&#10;&#10;    private final Integer code;&#10;&#10;&#9;private final String message;&#10;&#9;&#10;&#9;ResultCodeEnum(Integer code, String message) {&#10;&#9;&#9;this.code = code;&#10;&#9;&#9;this.message = message;&#10;&#9;}&#10;}" />
                    <option name="name" value="resultCodeEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($entityClass = $tableInfo.name.toUpperCase())&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;##设置回调&#10;$!callback.setFileName(&quot;ExceptionEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.exception.ServiceExceptionAssert;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import lombok.NoArgsConstructor;&#10;&#10;#classComment(&quot;业务异常枚举定义&quot;) &#10;@Getter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public enum  ExceptionEnum implements ServiceExceptionAssert {&#10;    &#10;    INTERNAL_SERVER_ERROR(500, &quot;服务器打酱油了，请稍后再试~&quot;),&#10;    USERNAME_NOT_FOUND(400,&quot;用户名为空&quot;),&#10;    PASSWORD_NOT_FOUND(400,&quot;密码为空&quot;),&#10;    #foreach($table in $tableInfoList)&#10;$table.obj.name.toUpperCase()_IS_NOT_EXIST(400,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)不存在&quot;),&#10;    $table.obj.name.toUpperCase()_SAVE_ERROR(500,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)保存失败&quot;),&#10;    $table.obj.name.toUpperCase()_UPDATE_ERROR(500,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)更新失败&quot;),&#10;    $table.obj.name.toUpperCase()_DELETE_ERROR(500,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)删除失败&quot;),&#10;    #end&#10;;&#10;&#10;    private Integer code;&#10;    private String message;&#10;}" />
                    <option name="name" value="exceptionEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;GlobalExceptionHandler.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.Result;&#10;import $!{tableInfo.savePackageName}.common.enums.IExceptionEnum;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.apache.commons.lang3.StringUtils;&#10;import org.springframework.context.support.DefaultMessageSourceResolvable;&#10;import org.springframework.http.HttpHeaders;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.http.converter.HttpMessageNotReadableException;&#10;import org.springframework.lang.Nullable;&#10;import org.springframework.validation.BindException;&#10;import org.springframework.validation.FieldError;&#10;import org.springframework.web.bind.MethodArgumentNotValidException;&#10;import org.springframework.web.bind.annotation.ExceptionHandler;&#10;import org.springframework.web.bind.annotation.RestControllerAdvice;&#10;import org.springframework.web.context.request.WebRequest;&#10;import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;&#10;import org.springframework.web.util.WebUtils;&#10;&#10;import javax.validation.ConstraintViolationException;&#10;import java.nio.file.AccessDeniedException;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;    &#10;#classComment(&quot;统一异常处理类&quot;) &#10;@Slf4j&#10;@RestControllerAdvice&#10;public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {&#10;&#10;    /**&#10;     * 处理单个参数校验异常&#10;     *&#10;     * @param e ConstraintViolationException&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(ConstraintViolationException.class)&#10;    public ResponseEntity&lt;Object&gt; handleConstraintViolationException(ConstraintViolationException e) {&#10;        String message = e.getMessage();&#10;        message = StringUtils.substringAfterLast(message,&quot;:&quot;).trim();&#10;        log.error(&quot;[统一异常]单个参数校验异常，异常信息:{}&quot;,message);&#10;&#10;        // 生成返回结果&#10;        return createResponseResponseEntity(message, HttpStatus.BAD_REQUEST.value());&#10;    }&#10;&#10;    /**&#10;     * 自定义异常处理&#10;     * @param ex&#10;     * @param body&#10;     * @param headers&#10;     * @param status&#10;     * @param request&#10;     * @return&#10;     */&#10;    @Override&#10;    protected ResponseEntity&lt;Object&gt; handleExceptionInternal(&#10;            Exception ex, @Nullable Object body, HttpHeaders headers, HttpStatus status, WebRequest request) {&#10;        String msg=&quot;&quot;;&#10;        if(ex instanceof BindException){&#10;            //处理普通类型Content-Type参数校验异常&#10;            List&lt;FieldError&gt; fieldErrors = ((BindException)ex).getFieldErrors();&#10;            msg = fieldErrors.stream().map(DefaultMessageSourceResolvable::getDefaultMessage)&#10;                    .collect(Collectors.joining(&quot;|&quot;));&#10;            log.error(&quot;[统一异常]对象参数校验异常，异常信息:{}&quot;, msg);&#10;        }else if(ex instanceof MethodArgumentNotValidException) {&#10;            //处理Content-Type=application/json的参数校验异常&#10;            List&lt;FieldError&gt; fieldErrors = ((MethodArgumentNotValidException) ex).getBindingResult().getFieldErrors();&#10;            msg = fieldErrors.stream().map(DefaultMessageSourceResolvable::getDefaultMessage)&#10;                    .collect(Collectors.joining(&quot;|&quot;));&#10;            log.error(&quot;[统一异常]对象参数校验异常，异常信息:{}&quot;,msg);&#10;        } else if (ex instanceof HttpMessageNotReadableException){&#10;            //处理请求体为空异常&#10;            String message = ex.getMessage();&#10;            log.error(&quot;[统一异常]参数错误异常，异常信息，{}&quot;, message);&#10;            if(message.contains(&quot;JSON parse error&quot;)) {&#10;                String paramName = StringUtils.substringBetween(message, &quot;[\&quot;&quot;, &quot;\&quot;]&quot;);&#10;                msg = paramName + &quot;: &quot; + StringUtils.substring(message,&#10;                        message.indexOf(&quot;problem:&quot;) + 8, message.indexOf(&quot;;&quot;)).trim();&#10;            } else if (message.contains(&quot;Required request body is missing&quot;)){&#10;                msg = StringUtils.substringBefore(message,&quot;:&quot;).trim();&#10;            } else {&#10;                msg = StringUtils.substringBefore(message,&quot;;&quot;).trim();&#10;            }&#10;        }else {&#10;            //其他异常&#10;            msg = ex.getMessage();&#10;        }&#10;&#10;        if (HttpStatus.INTERNAL_SERVER_ERROR.equals(status)) {&#10;            request.setAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE, ex, WebRequest.SCOPE_REQUEST);&#10;        }&#10;        log.error(&quot;[统一异常]{}异常，异常信息:{}&quot;, ex.getClass().getSimpleName(), msg);&#10;        return createResponseResponseEntity(msg, status.value());&#10;    }&#10;&#10;    /**&#10;     * 处理403异常&#10;     *&#10;     * @param e AccessDeniedException&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(AccessDeniedException.class)&#10;    public ResponseEntity&lt;Object&gt; handleAccessDeniedException(AccessDeniedException e) {&#10;        String message = e.getMessage();&#10;        log.error(&quot;[统一异常]拒绝访问异常，异常信息，{}&quot;, message);&#10;&#10;        // 生成返回结果&#10;        return createResponseResponseEntity(message, HttpStatus.FORBIDDEN.value());&#10;    }&#10;&#10;    /**&#10;     * 处理自定义业务异常&#10;     *&#10;     * @param cause 异常&#10;     * @param e ServiceException&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(ServiceException.class)&#10;    public ResponseEntity&lt;Object&gt; handleException(Throwable cause, ServiceException e){&#10;        String message;&#10;        int code;&#10;        IExceptionEnum exceptionEnum = e.getExceptionEnum();&#10;        if(null != exceptionEnum){&#10;            message = exceptionEnum.getMessage();&#10;            code = exceptionEnum.getCode();&#10;        }else {&#10;            message = e.getMessage();&#10;            code = e.getCode();&#10;        }&#10;        log.error(&quot;[统一异常]ServiceException异常，异常信息:{}&quot;, message);&#10;        &#10;        // 记录堆栈信息&#10;        final Writer result = new StringWriter();&#10;        final PrintWriter printWriter = new PrintWriter(result);&#10;        cause.printStackTrace(printWriter);&#10;        log.error(&quot;[统一异常]其他异常，堆栈信息：{}&quot;, result);&#10;&#10;        // 生成返回结果&#10;        return Result.error(code, message);&#10;    }&#10;&#10;    /**&#10;     * 其他异常统一处理&#10;     *&#10;     * @param cause 异常&#10;     * @param e Exception&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(Exception.class)&#10;    public ResponseEntity&lt;Object&gt; exceptionHandler(Throwable cause, Exception e) {&#10;        log.error(&quot;[统一异常]其他异常，异常:{}&quot;, e.getClass().toString());&#10;        String message = e.getMessage();&#10;        log.error(&quot;[统一异常]其他异常，异常信息，{}&quot;, message);&#10;        &#10;        // 记录堆栈信息&#10;        final Writer result = new StringWriter();&#10;        final PrintWriter printWriter = new PrintWriter(result);&#10;        cause.printStackTrace(printWriter);&#10;        log.error(&quot;[统一异常]其他异常，堆栈信息：{}&quot;, result);&#10;&#10;        // 生成返回结果&#10;        return Result.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), message);&#10;    }&#10;&#10;    /**&#10;     * 返回异常处理结果&#10;     *&#10;     * @param msg 异常信息&#10;     * @param status 状态码&#10;     * @return ResponseEntity&#10;     */&#10;    private ResponseEntity&lt;Object&gt; createResponseResponseEntity(String msg, int status) {&#10;        // 生成返回结果&#10;        Result&lt;Object&gt; result = Result.error(status, msg);&#10;        return ResponseEntity.status(status).body(result);&#10;    }&#10;}" />
                    <option name="name" value="globalExceptionHandler.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ServiceException.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.enums.IExceptionEnum;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import lombok.NoArgsConstructor;&#10;    &#10;#classComment(&quot;自定义业务异常&quot;) &#10;@Getter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class ServiceException extends RuntimeException{&#10;&#10;    private IExceptionEnum exceptionEnum;&#10;&#10;    private int code;&#10;&#10;    private String msg;&#10;&#10;    public ServiceException(IExceptionEnum exceptionEnum) {&#10;        super(exceptionEnum.getMessage());&#10;        this.exceptionEnum = exceptionEnum;&#10;    }&#10;&#10;    public ServiceException(int code, String msg) {&#10;        super(msg);&#10;        this.code = code;&#10;        this.msg = msg;&#10;    }&#10;}" />
                    <option name="name" value="serviceException.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;Assert.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import java.util.function.Predicate;&#10;&#10;#classComment(&quot;异常断言接口&quot;) &#10;public interface Assert {&#10;&#10;    /**&#10;     * 创建异常&#10;     * @return {@link RuntimeException}&#10;     */&#10;    RuntimeException newException();&#10;&#10;    /**&#10;     * 创建异常&#10;     * @param code 错误码&#10;     * @param msg 错误提示&#10;     * @return {@link RuntimeException}&#10;     */&#10;    RuntimeException newException(int code, String msg);&#10;&#10;    /**&#10;     * 如predicate为true，则抛出异常&#10;     *&#10;     * @param predicate {@link Predicate}&#10;     * @param args 待判断对象&#10;     */&#10;    default &lt;T&gt; void assertException(Predicate&lt;? super T&gt; predicate, T args) {&#10;        if (predicate.test(args)) {&#10;            throw newException();&#10;        }&#10;    }&#10;    &#10;     /**&#10;     * 抛出自定义异常&#10;     *&#10;     */&#10;    default &lt;T&gt; void assertException() {&#10;        throw newException();&#10;    }&#10;&#10;    /**&#10;     * 抛出自定义异常&#10;     *&#10;     * @param code 错误码&#10;     * @param msg 错误提示&#10;     */&#10;    default void assertException(int code, String msg) {&#10;        throw newException(code, msg);&#10;    }&#10;}" />
                    <option name="name" value="assert.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ServiceExceptionAssert.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.enums.IExceptionEnum;&#10;&#10;#classComment(&quot;业务异常断言接口&quot;) &#10;public interface ServiceExceptionAssert extends IExceptionEnum, Assert{&#10;&#10;    /**&#10;     * 创建异常&#10;     *&#10;     * @return {@link RuntimeException}&#10;     */&#10;    @Override&#10;    default RuntimeException newException(){&#10;        return new ServiceException(this);&#10;    }&#10;&#10;    /**&#10;     * 创建异常&#10;     *&#10;     * @param code 错误码&#10;     * @param msg 错误提示&#10;     * @return {@link RuntimeException}&#10;     */&#10;    @Override&#10;    default RuntimeException newException(int code, String msg){&#10;        return new ServiceException(code, msg);&#10;    }&#10;}" />
                    <option name="name" value="serviceExceptionAssert.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ServletResponseStatusEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import org.springframework.http.HttpStatus;&#10;&#10;import java.util.Objects;&#10;import java.util.stream.Stream;&#10;&#10;#classComment(&quot;servlet异常和状态码枚举&quot;) &#10;@Getter&#10;@AllArgsConstructor&#10;public enum ServletResponseStatusEnum {&#10;&#10;    HttpRequestMethodNotSupportedException(&quot;HttpRequestMethodNotSupportedException&quot;,&#10;            HttpStatus.METHOD_NOT_ALLOWED.value()),&#10;    HttpMediaTypeNotSupportedException(&quot;HttpMediaTypeNotSupportedException&quot;,&#10;            HttpStatus.UNSUPPORTED_MEDIA_TYPE.value()),&#10;    HttpMediaTypeNotAcceptableException(&quot;HttpMediaTypeNotAcceptableException&quot;,&#10;            HttpStatus.NOT_ACCEPTABLE.value()),&#10;    MissingPathVariableException(&quot;MissingPathVariableException&quot;,&#10;            HttpStatus.INTERNAL_SERVER_ERROR.value()),&#10;    MissingServletRequestParameterException(&quot;MissingServletRequestParameterException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    ServletRequestBindingException(&quot;ServletRequestBindingException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    ConversionNotSupportedException(&quot;ConversionNotSupportedException&quot;,&#10;            HttpStatus.INTERNAL_SERVER_ERROR.value()),&#10;    TypeMismatchException(&quot;TypeMismatchException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    HttpMessageNotReadableException(&quot;HttpMessageNotReadableException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    HttpMessageNotWritableException(&quot;HttpMessageNotWritableException&quot;,&#10;            HttpStatus.INTERNAL_SERVER_ERROR.value()),&#10;    MethodArgumentNotValidException(&quot;MethodArgumentNotValidException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    MissingServletRequestPartException(&quot;MissingServletRequestPartException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    NoHandlerFoundException(&quot;NoHandlerFoundException&quot;,&#10;            HttpStatus.NOT_FOUND.value()),&#10;    AsyncRequestTimeoutException(&quot;AsyncRequestTimeoutException&quot;,&#10;            HttpStatus.SERVICE_UNAVAILABLE.value()),&#10;    MethodArgumentTypeMismatchException(&quot;MethodArgumentTypeMismatchException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    ;&#10;&#10;    private final String className;&#10;    private final Integer status;&#10;&#10;    public static ServletResponseStatusEnum of(String className){&#10;        Objects.requireNonNull(className);&#10;&#10;        return Stream.of(values())&#10;                .filter(bean -&gt; bean.getClassName().equals(className))&#10;                .findAny()&#10;                .orElseThrow(() -&gt; new IllegalArgumentException(className + &quot; not exists&quot;));&#10;    }&#10;}" />
                    <option name="name" value="servletResponseStatusEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;DefaultErrorController.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.enums.ExceptionEnum;&#10;import org.springframework.boot.web.servlet.error.ErrorController;&#10;import org.springframework.stereotype.Controller;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;&#10;import javax.servlet.http.HttpServletRequest;&#10;&#10;#classComment(&quot;默认错误处理控制器&quot;) &#10;@Controller&#10;public class DefaultErrorController implements ErrorController {&#10;&#10;    @RequestMapping(&quot;/error&quot;)&#10;    public String handleError(HttpServletRequest request){&#10;        //获取statusCode:401,404,500&#10;        Integer statusCode = (Integer) request.getAttribute(&quot;javax.servlet.error.status_code&quot;);&#10;        if(statusCode == 500){&#10;            throw new ServiceException(ExceptionEnum.INTERNAL_SERVER_ERROR);&#10;        }else if(statusCode == 404){&#10;            throw new ServiceException(404, &quot;Not Found&quot;);&#10;        }else if(statusCode == 403){&#10;            throw new ServiceException(403, &quot;Forbidden&quot;);&#10;        }else{&#10;            throw new ServiceException(ExceptionEnum.INTERNAL_SERVER_ERROR);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String getErrorPath() {&#10;        return &quot;/error&quot;;&#10;    }&#10;}" />
                    <option name="name" value="defaultErrorController.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;IExceptionEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;#classComment(&quot;异常枚举父类&quot;) &#10;public interface IExceptionEnum {&#10;&#10;    Integer getCode();&#10;&#10;    String getMessage();&#10;}" />
                    <option name="name" value="iExceptionEnum.java" />
                  </Template>
                </list>
              </option>
              <option name="name" value="jpa" />
            </TemplateGroup>
          </value>
        </entry>
        <entry key="jpa-plus">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;&#10;##使用宏定义设置回调（保存位置与文件后缀）&#10;#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;entity&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import $!{tableInfo.savePackageName}.common.entity.BaseEntity;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;import javax.persistence.*;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;实体&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;@Entity&#10;@Table(name = &quot;$!{tableInfo.obj.name}&quot;)&#10;##@org.hibernate.annotations.Table(appliesTo = &quot;$!{tableInfo.obj.name}&quot;,comment = &quot;$!{tableInfo.comment}&quot;)&#10;##@JsonIgnoreProperties(value={&quot;hibernateLazyInitializer&quot;,&quot;handler&quot;,&quot;fieldHandler&quot;}) &#10;public class $!{tableInfo.name} extends BaseEntity {&#10;    &#10;#foreach($column in $tableInfo.pkColumn)&#10;    @Id&#10;    @Column(name =&quot;$!{column.obj.name}&quot;)&#10;    @GeneratedValue(strategy=GenerationType.IDENTITY)&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;#foreach($column in $tableInfo.otherColumn)&#10;#if($!{column.obj.name} != &quot;create_by&quot; &amp;&amp; $!{column.obj.name} != &quot;create_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;update_by&quot; &amp;&amp; $!{column.obj.name} != &quot;update_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;is_deleted&quot;)&#10;    #if(${column.comment})/**&#10;     * ${column.comment}&#10;     */&#10;    #end&#10;@Column(name = &quot;$!{column.obj.name}&quot;)&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    &#10;#end&#10;#end&#10;}" />
                    <option name="name" value="entity.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Dto&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dto&quot;))&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dto;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.BaseDto;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;&#10;#tableComment(&quot;Dto&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;public class $!{tableName} extends BaseDto {&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.obj.name} != &quot;create_by&quot; &amp;&amp; $!{column.obj.name} != &quot;create_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;update_by&quot; &amp;&amp; $!{column.obj.name} != &quot;update_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;is_deleted&quot;)&#10;#if(${column.comment})&#10;    /** &#10;     * ${column.comment}&#10;     */&#10;#end&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    &#10;#end    &#10;#end&#10;}" />
                    <option name="name" value="dto.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Vo&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/vo&quot;))&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}vo;&#10;&#10;$!autoImport&#10;import $!{tableInfo.savePackageName}.common.entity.BaseVo;&#10;import lombok.Data;&#10;import io.swagger.annotations.ApiModel;&#10;import io.swagger.annotations.ApiModelProperty;&#10;&#10;#tableComment(&quot;Vo&quot;)&#10;@Data&#10;@ApiModel(value=&quot;$!{tableName}&quot;,description=&quot;展示$!{tableComment}实体&quot;)&#10;public class $!{tableName} extends BaseVo {&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.obj.name} != &quot;create_by&quot; &amp;&amp; $!{column.obj.name} != &quot;create_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;update_by&quot; &amp;&amp; $!{column.obj.name} != &quot;update_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;is_deleted&quot;)&#10;#if(${column.comment})&#10;    /** &#10;     * ${column.comment}&#10;     */&#10;#end&#10;    @ApiModelProperty(name = &quot;$!{column.name}&quot;, value = &quot;$!{column.comment}&quot;, required = false)&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    &#10;#end&#10;#end&#10;}" />
                    <option name="name" value="vo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Bo&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/bo&quot;))&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}bo;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.BaseBo;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;import io.swagger.annotations.ApiModel;&#10;import io.swagger.annotations.ApiModelProperty;&#10;&#10;#tableComment(&quot;Bo&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;@ApiModel(value=&quot;$!{tableName}&quot;,description=&quot;展示$!{tableComment}实体&quot;)&#10;public class $!{tableName} extends BaseBo {&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.obj.name} != &quot;create_by&quot; &amp;&amp; $!{column.obj.name} != &quot;create_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;update_by&quot; &amp;&amp; $!{column.obj.name} != &quot;update_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;is_deleted&quot;)&#10;#if(${column.comment})&#10;    /** &#10;     * ${column.comment}&#10;     */&#10;#end&#10;    @ApiModelProperty(name = &quot;$!{column.name}&quot;, value = &quot;$!{column.comment}&quot;, required = false)&#10;#if($!{tool.getClsNameByFullName($column.type)} == &quot;Date&quot;)&#10;    private String $!{column.name};&#10;#else&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;#end&#10;#end&#10;}" />
                    <option name="name" value="bo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseDto.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import java.time.LocalDateTime;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;&#10;#classComment(&quot;Dto实体基类&quot;) &#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;public class BaseDto extends PageRequest {&#10;&#10;    /**&#10;     * 是否删除(1为删除，0为未删除)&#10;     */&#10;    private Boolean deleted;&#10;    &#10;    /** &#10;     * 创建者 &#10;     */&#10;    private String createBy;&#10;&#10;    /** &#10;     * 创建时间 &#10;     */&#10;    private LocalDateTime createTime;&#10;&#10;    /** &#10;     * 更新者 &#10;     */&#10;    private String updateBy;&#10;&#10;    /** &#10;     * 更新时间 &#10;     */&#10;    private LocalDateTime updateTime;&#10;}" />
                    <option name="name" value="baseDto.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseEntity.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import java.time.LocalDateTime;&#10;import javax.persistence.Column;&#10;import lombok.Data;&#10;&#10;#classComment(&quot;实体基类&quot;) &#10;@Data&#10;public class BaseEntity{&#10;&#10;    /**&#10;     * 是否删除(1为删除，0为未删除)&#10;     */&#10;    @Column(name = &quot;is_deleted&quot;)&#10;    private Boolean deleted = false;&#10;    &#10;    /** &#10;     * 创建者 &#10;     */&#10;    private String createBy;&#10;&#10;    /** &#10;     * 创建时间 &#10;     */&#10;    private LocalDateTime createTime;&#10;&#10;    /** &#10;     * 更新者 &#10;     */&#10;    private String updateBy;&#10;&#10;    /** &#10;     * 更新时间 &#10;     */&#10;    private LocalDateTime updateTime;&#10;}" />
                    <option name="name" value="BaseEntity.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseVo.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.fasterxml.jackson.annotation.JsonFormat;&#10;import java.time.LocalDateTime;&#10;import lombok.Data;&#10;import io.swagger.annotations.ApiModel;&#10;import io.swagger.annotations.ApiModelProperty;&#10;&#10;#classComment(&quot;Vo实体基类&quot;)&#10;@Data&#10;public class BaseVo {&#10;&#10;    /** &#10;     * 创建者 &#10;     */&#10;    @ApiModelProperty(name = &quot;createBy&quot;, value = &quot;创建者&quot;, required = false)&#10;    private String createBy;&#10;&#10;    /** &#10;     * 创建时间 &#10;     */&#10;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    @ApiModelProperty(name = &quot;createTime&quot;, value = &quot;创建时间&quot;, required = false)&#10;    private LocalDateTime createTime;&#10;&#10;    /** &#10;     * 更新者 &#10;     */&#10;    @ApiModelProperty(name = &quot;updateBy&quot;, value = &quot;更新者&quot;, required = false)&#10;    private String updateBy;&#10;&#10;    /** &#10;     * 更新时间 &#10;     */&#10;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    @ApiModelProperty(name = &quot;updateTime&quot;, value = &quot;更新时间&quot;, required = false)&#10;    private LocalDateTime updateTime;&#10;}" />
                    <option name="name" value="baseVo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseBo.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.fasterxml.jackson.annotation.JsonFormat;&#10;import java.time.LocalDateTime;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;import io.swagger.annotations.ApiModel;&#10;import io.swagger.annotations.ApiModelProperty;&#10;&#10;#classComment(&quot;Bo实体基类&quot;) &#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;public class BaseBo extends PageRequest{&#10;&#10;    /** &#10;     * 开始时间 &#10;     */&#10;    @ApiModelProperty(name = &quot;startTime&quot;, value = &quot;开始时间&quot;, required = false)&#10;    private String startTime;&#10;&#10;    /** &#10;     * 结束时间 &#10;     */&#10;    @ApiModelProperty(name = &quot;endTime&quot;, value = &quot;结束时间&quot;, required = false)&#10;    private String endTime;&#10;    &#10;    /** &#10;     * 搜索值 &#10;     */&#10;    @ApiModelProperty(name = &quot;searchValue&quot;, value = &quot;搜索值&quot;, required = false)&#10;    private String searchValue;&#10;    &#10;    /** &#10;     * 创建者 &#10;     */&#10;    @ApiModelProperty(name = &quot;createBy&quot;, value = &quot;创建者&quot;, required = false)&#10;    private String createBy;&#10;&#10;    /** &#10;     * 创建时间 &#10;     */&#10;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    @ApiModelProperty(name = &quot;createTime&quot;, value = &quot;创建时间&quot;, required = false)&#10;    private LocalDateTime createTime;&#10;&#10;    /** &#10;     * 更新者 &#10;     */&#10;    @ApiModelProperty(name = &quot;updateBy&quot;, value = &quot;更新者&quot;, required = false)&#10;    private String updateBy;&#10;&#10;    /** &#10;     * 更新时间 &#10;     */&#10;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    @ApiModelProperty(name = &quot;updateTime&quot;, value = &quot;更新时间&quot;, required = false)&#10;    private LocalDateTime updateTime;&#10;}" />
                    <option name="name" value="baseBo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseMapping.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/mapping&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.mapping&quot;)&#10;&#10;import org.apache.commons.lang3.StringUtils;&#10;import org.mapstruct.InheritConfiguration;&#10;import org.mapstruct.InheritInverseConfiguration;&#10;import org.mapstruct.MapperConfig;&#10;import org.mapstruct.Mapping;&#10;&#10;import java.text.ParseException;&#10;import java.text.SimpleDateFormat;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.stream.Stream;&#10;&#10;#classComment(&quot;mapstruct通用类&quot;)&#10;@MapperConfig&#10;public interface BaseMapping&lt;SOURCE, TARGET&gt; {&#10;&#10;    /**&#10;     * 映射同名属性&#10;     */&#10;    @Mapping(target = &quot;createTime&quot;, dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    TARGET sourceToTarget(SOURCE var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性&#10;     */&#10;    @InheritInverseConfiguration(name = &quot;sourceToTarget&quot;)&#10;    SOURCE targetToSource(TARGET var1);&#10;&#10;    /**&#10;     * 映射同名属性，集合形式&#10;     */&#10;    @InheritConfiguration(name = &quot;sourceToTarget&quot;)&#10;    List&lt;TARGET&gt; sourceToTarget(List&lt;SOURCE&gt; var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性，集合形式&#10;     */&#10;    @InheritConfiguration(name = &quot;targetToSource&quot;)&#10;    List&lt;SOURCE&gt; targetToSource(List&lt;TARGET&gt; var1);&#10;&#10;    /**&#10;     * 映射同名属性，集合流形式&#10;     */&#10;    List&lt;TARGET&gt; sourceToTarget(Stream&lt;SOURCE&gt; stream);&#10;&#10;    /**&#10;     * 反向，映射同名属性，集合流形式&#10;     */&#10;    List&lt;SOURCE&gt; targetToSource(Stream&lt;TARGET&gt; stream);&#10;&#10;    default Date convertStr2Date(String str){&#10;        if(StringUtils.isNotBlank(str)){&#10;            SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);&#10;            try {&#10;                return format.parse(str);&#10;            } catch (ParseException e) {&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;&#10;        return null;&#10;    }&#10;    &#10;    default LocalDateTime convertStr2LocalDateTime(String str) {&#10;        if (StringUtils.isNotBlank(str)) {&#10;            return LocalDateTime.parse(str, DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;));&#10;        }&#10;&#10;        return null;&#10;    }&#10;&#10;    default LocalDate convertStr2LocalDate(String str) {&#10;        if (StringUtils.isNotBlank(str)) {&#10;            return LocalDate.parse(str, DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;));&#10;        }&#10;&#10;        return null;&#10;    }&#10;}" />
                    <option name="name" value="baseMapping.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;VoMapping&quot;))&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;#set($packageName = $tool.firstLowerCase($entityName.replace(&quot;sys&quot;,&quot;&quot;)))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapping/&quot;, $!{packageName}))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapping.$!{packageName};&#10;&#10;import $!{tableInfo.savePackageName}.common.mapping.BaseMapping;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.vo.$!{tableInfo.name}Vo;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.Mapping;&#10;import org.mapstruct.Mappings;&#10;import org.mapstruct.ReportingPolicy;&#10;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;VoMapping&quot;)&#10;@Mapper(componentModel = &quot;spring&quot;, unmappedTargetPolicy = ReportingPolicy.IGNORE,&#10;        unmappedSourcePolicy = ReportingPolicy.IGNORE)&#10;public interface $!{tableName} extends BaseMapping&lt;$!{tableInfo.name}, $!{tableInfo.name}Vo&gt; {&#10;&#10;    /**&#10;     * 映射同名属性&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    $!{tableInfo.name}Vo sourceToTarget($!{tableInfo.name} var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    $!{tableInfo.name} targetToSource($!{tableInfo.name}Vo var1);&#10;&#10;    /**&#10;     * 映射同名属性，集合形式&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    List&lt;$!{tableInfo.name}Vo&gt; sourceToTarget(List&lt;$!{tableInfo.name}&gt; var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性，集合形式&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    List&lt;$!{tableInfo.name}&gt; targetToSource(List&lt;$!{tableInfo.name}Vo&gt; var1);&#10;}" />
                    <option name="name" value="voMapping.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;DtoMapping&quot;))&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;#set($packageName = $tool.firstLowerCase($entityName.replace(&quot;sys&quot;,&quot;&quot;)))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapping/&quot;, $!{packageName}))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapping.$!{packageName};&#10;&#10;import $!{tableInfo.savePackageName}.bo.$!{tableInfo.name}Bo;&#10;import $!{tableInfo.savePackageName}.common.mapping.BaseMapping;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.Mapping;&#10;import org.mapstruct.Mappings;&#10;import org.mapstruct.ReportingPolicy;&#10;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;DtoMapping&quot;)&#10;@Mapper(componentModel = &quot;spring&quot;, unmappedTargetPolicy = ReportingPolicy.IGNORE,&#10;        unmappedSourcePolicy = ReportingPolicy.IGNORE)&#10;public interface $!{tableName} extends BaseMapping&lt;$!{tableInfo.name}Bo, $!{tableInfo.name}Dto&gt; {&#10;&#10;    /**&#10;     * 映射同名属性&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    $!{tableInfo.name}Dto sourceToTarget($!{tableInfo.name}Bo var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    $!{tableInfo.name}Bo targetToSource($!{tableInfo.name}Dto var1);&#10;&#10;    /**&#10;     * 映射同名属性，集合形式&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    List&lt;$!{tableInfo.name}Dto&gt; sourceToTarget(List&lt;$!{tableInfo.name}Bo&gt; var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性，集合形式&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    List&lt;$!{tableInfo.name}Bo&gt; targetToSource(List&lt;$!{tableInfo.name}Dto&gt; var1);&#10;}" />
                    <option name="name" value="dtoMapping.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Mapping&quot;))&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;#set($packageName = $tool.firstLowerCase($entityName.replace(&quot;sys&quot;,&quot;&quot;)))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapping/&quot;, $!{packageName}))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapping.$!{packageName};&#10;&#10;import $!{tableInfo.savePackageName}.common.mapping.BaseMapping;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.ReportingPolicy;&#10;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;Entity Mapping&quot;)&#10;@Mapper(componentModel = &quot;spring&quot;, unmappedTargetPolicy = ReportingPolicy.IGNORE,&#10;        unmappedSourcePolicy = ReportingPolicy.IGNORE)&#10;public interface $!{tableName} extends BaseMapping&lt;$!{tableInfo.name}Dto, $!{tableInfo.name}&gt; {&#10;&#10;    /**&#10;     * 映射同名属性&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    $!{tableInfo.name} sourceToTarget($!{tableInfo.name}Dto var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    $!{tableInfo.name}Dto targetToSource($!{tableInfo.name} var1);&#10;&#10;    /**&#10;     * 映射同名属性，集合形式&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    List&lt;$!{tableInfo.name}&gt; sourceToTarget(List&lt;$!{tableInfo.name}Dto&gt; var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性，集合形式&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    List&lt;$!{tableInfo.name}Dto&gt; targetToSource(List&lt;$!{tableInfo.name}&gt; var1);&#10;}" />
                    <option name="name" value="entityMapping.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Repository&quot;))&#10;#set($entityClass = $tableInfo.name)&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/repository&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}repository;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import org.springframework.data.jpa.repository.JpaSpecificationExecutor;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;&#10;#tableComment(&quot;数据库访问层&quot;)&#10;public interface $!{tableName} extends JpaRepository&lt;$!{entityClass}, $!pk.shortType&gt;,JpaSpecificationExecutor&lt;$!{entityClass}&gt; {&#10;  &#10;}" />
                    <option name="name" value="repository.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import $!{tableInfo.savePackageName}.vo.$!{tableInfo.name}Vo;&#10;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;服务接口&quot;)&#10;public interface $!{tableName} {&#10;    &#10;    /**&#10;     * 查询所有$!{tableComment}&#10;     *&#10;     * @return List&lt;$!{tableInfo.name}Vo&gt;&#10;     */&#10;    List&lt;$!{tableInfo.name}Vo&gt; get$!{tableInfo.name}All();&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return List&lt;$!{tableInfo.name}Vo&gt;&#10;     */&#10;    List&lt;$!{tableInfo.name}Vo&gt; get$!{tableInfo.name}List($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param dto 查询条件&#10;     * @return PageResult&lt;$!{tableInfo.name}Vo&gt;&#10;     */&#10;    PageResult&lt;$!{tableInfo.name}Vo&gt; get$!{tableInfo.name}PageList($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return $!{tableInfo.name}Vo&#10;     */&#10;    $!{tableInfo.name}Vo get$!{tableInfo.name}ById($!pk.shortType id);&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dto $!{tableInfo.comment}信息&#10;     * @return $!{tableInfo.name}Vo&#10;     */&#10;    $!{tableInfo.name}Vo save$!{tableInfo.name}($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 修改$!{tableComment}&#10;     *&#10;     * @param dto $!{tableInfo.comment}信息&#10;     * @return void&#10;     */&#10;    void update$!{tableInfo.name}($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     */&#10;    void delete$!{tableInfo.name}ById($!pk.shortType id);&#10;&#10;    /**&#10;     * 根据id集合批量删除&#10;     *&#10;     * @param ids&#10;     */&#10;    void batchDeleteByIds(List&lt;$!pk.shortType&gt; ids);&#10;}" />
                    <option name="name" value="service.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($className = $tool.append($tableInfo.name, &quot;ServiceImpl&quot;))&#10;#set($entityClass = $tableInfo.name)&#10;#set($entityClassUpper = $tableInfo.obj.name.toUpperCase())&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($className, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service/impl&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.common.enums.ExceptionEnum;&#10;import $!{tableInfo.savePackageName}.dto.$!{entityClass}Dto;&#10;import $!{tableInfo.savePackageName}.entity.$!{entityClass};&#10;import $!{tableInfo.savePackageName}.mapping.$!{packageName}.$!{entityClass}Mapping;&#10;import $!{tableInfo.savePackageName}.mapping.$!{packageName}.$!{entityClass}VoMapping;&#10;import $!{tableInfo.savePackageName}.repository.$!{entityClass}Repository;&#10;import $!{tableInfo.savePackageName}.service.$!{entityClass}Service;&#10;import $!{tableInfo.savePackageName}.vo.$!{entityClass}Vo;&#10;import lombok.RequiredArgsConstructor;&#10;import org.apache.commons.lang3.StringUtils;&#10;import org.springframework.beans.BeanUtils;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.jpa.domain.Specification;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import javax.persistence.criteria.CriteriaBuilder;&#10;import javax.persistence.criteria.CriteriaQuery;&#10;import javax.persistence.criteria.Predicate;&#10;import javax.persistence.criteria.Root;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Objects;&#10;import java.util.Optional;&#10;import java.util.stream.Collectors;&#10;&#10;#tableComment(&quot;服务实现类&quot;)&#10;@Service&#10;@RequiredArgsConstructor(onConstructor = @__(@Autowired))&#10;public class $!{className} implements $!{entityClass}Service {&#10;&#10;    private final $!{entityClass}Repository $!{entityName}Repository;&#10;    &#10;    private final $!{entityClass}VoMapping $!{entityName}VoMapping;&#10;&#10;    private final $!{entityClass}Mapping $!{entityName}Mapping;&#10;&#10;    /**&#10;     * 查询所有$!{tableComment}&#10;     *&#10;     * @return List&lt;$!{entityClass}Vo&gt;&#10;     */&#10;    @Override&#10;    public List&lt;$!{entityClass}Vo&gt; get$!{entityClass}All() {&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = $!{entityName}Repository.findAll();&#10;        return $!{entityName}VoMapping.sourceToTarget($!{entityName}List);&#10;    }&#10;    &#10;     /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return List&lt;$!{entityClass}Vo&gt;&#10;     */&#10;    @Override&#10;    public List&lt;$!{entityClass}Vo&gt; get$!{entityClass}List($!{entityClass}Dto dto) {&#10;        Specification&lt;$!{entityClass}&gt; specification = createSpecification(dto);&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = $!{entityName}Repository.findAll(specification);&#10;        return $!{entityName}VoMapping.sourceToTarget($!{entityName}List);&#10;    }&#10;    &#10;    /**&#10;     * 构建查询条件&#10;     * @param dto $!{tableComment}信息&#10;     * @return Example&#10;     */&#10;    private Specification&lt;$!{entityClass}&gt; createSpecification($!{entityClass}Dto dto){&#10;        Specification&lt;$!{entityClass}&gt; specification = new Specification&lt;$!{entityClass}&gt;() {&#10;&#10;            @Override&#10;            public Predicate toPredicate(Root&lt;$!{entityClass}&gt; root, CriteriaQuery&lt;?&gt; query,&#10;                                         CriteriaBuilder criteriaBuilder) {&#10;&#9;&#9;&#9;&#9;//集合 用于封装查询条件&#10;                List&lt;Predicate&gt; list = new ArrayList&lt;&gt;();&#10;                if (Objects.nonNull(dto)) {&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.name} == &quot;isDeleted&quot;)&#10;                    if(Objects.nonNull(dto.getDeleted())){&#10;                        list.add(criteriaBuilder.equal(root.get(&quot;isDeleted&quot;), dto.getDeleted()));&#10;#elseif($!{column.type} == &quot;java.lang.String&quot;)&#10;                    if (StringUtils.isNotBlank(dto.get$!{tool.firstUpperCase($column.name)}())) {&#10;                        list.add(criteriaBuilder.equal(root.get(&quot;$!{column.name}&quot;).as(String.class), &quot;%&quot; + dto.get$!{tool.firstUpperCase($column.name)}()+ &quot;%&quot;));&#10;#else&#10;                    if (Objects.nonNull(dto.get$!tool.firstUpperCase($column.name)())) {&#10;                        list.add(criteriaBuilder.equal(root.get(&quot;$!{column.name}&quot;), dto.get$!{tool.firstUpperCase($column.name)}()));&#10;#end&#10;                    }&#10;#end&#10;                }&#10;                Predicate[] array = new Predicate[list.size()];&#10;                return criteriaBuilder.and(list.toArray(array));&#10;            }&#10;        };&#10;        return specification;&#10;    }&#10;    &#10;    /**&#10;     * 根据条件查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param dto 查询条件&#10;     * @return Page&lt;$!{entityClass}Vo&gt;&#10;     */&#10;    @Override&#10;    public PageResult&lt;$!{entityClass}Vo&gt; get$!{entityClass}PageList($!{entityClass}Dto dto) {&#10;        Specification&lt;$!{entityClass}&gt; specification = createSpecification(dto);&#10;        PageRequest pageRequest = PageRequest.of(dto.getPage() - 1, dto.getSize());&#10;        Page&lt;$!{entityClass}&gt; page = $!{entityName}Repository.findAll(specification, pageRequest);&#10;        &#10;        List&lt;$!{entityClass}Vo&gt; $!{entityName}VoList = $!{entityName}VoMapping.&#10;                                sourceToTarget(page.getContent());&#10;        PageResult&lt;$!{entityClass}Vo&gt; pageResult = new PageResult&lt;&gt;(page.getTotalElements(), &#10;                    page.getTotalPages(), $!{entityName}VoList);&#10;        pageResult.setPage(dto.getPage());&#10;        pageResult.setSize(dto.getSize());&#10;        pageResult.setHasNext(page.hasNext());&#10;        pageResult.setHasPrevious(page.hasPrevious());&#10;        &#10;        return pageResult;&#10;    }&#10;    &#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return $!{entityClass}Vo&#10;     */&#10;    @Override&#10;    public $!{entityClass}Vo get$!{entityClass}ById($!pk.shortType id) {&#10;        Optional&lt;$!{entityClass}&gt; optional = $!{entityName}Repository.findById(id);&#10;        if(!optional.isPresent()){&#10;            ExceptionEnum.$!{entityClassUpper}_IS_NOT_EXIST.assertException();&#10;        }&#10;&#10;        return $!{entityName}VoMapping.sourceToTarget(optional.orElse(null));&#10;    }&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     * @return $!{entityClass}Vo&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public $!{entityClass}Vo save$!{entityClass}($!{entityClass}Dto dto) {&#10;        $!{entityClass} $!{entityName} = $!{entityName}Mapping.sourceToTarget(dto);&#10;        $!{entityName}.setId(null);&#10;&#10;        User result = userRepository.save(user);&#10;        if(Objects.isNull(result)){&#10;            ExceptionEnum.$!{entityClassUpper}_SAVE_ERROR.assertException();&#10;        }&#10;        return $!{entityName}VoMapping.sourceToTarget(result);&#10;    }&#10;&#10;    /**&#10;     * 修改$!{tableComment}信息&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     * @return rows&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public void update$!{entityClass}($!{entityClass}Dto dto) {&#10;        $!{entityClass} $!{entityName} = $!{entityName}Mapping.sourceToTarget(dto);&#10;        &#10;        $!{entityName}Repository.save($!{entityName});&#10;    }&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return rows&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public void delete$!{entityClass}ById($!pk.shortType id) {&#10;        $!{entityName}Repository.deleteById(id);&#10;    }&#10;&#10;    /**&#10;     * 根据id集合批量删除$!{tableComment}&#10;     *&#10;     * @param ids&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public void batchDeleteByIds(List&lt;$!pk.shortType&gt; ids) {&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = ids.stream().map(id -&gt; {&#10;            $!{entityClass} $!{entityName} = new $!{entityClass}();&#10;            $!{entityName}.setId(id);&#10;            return $!{entityName};&#10;        }).collect(Collectors.toList());&#10;        $!{entityName}Repository.deleteAll($!{entityName}List);&#10;    }&#10;}" />
                    <option name="name" value="serviceImpl.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($controllerClass = $tool.append($tableInfo.name, &quot;Controller&quot;))&#10;#set($entityClass = $tableInfo.name)&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($dtoName = $tool.append($tool.firstLowerCase($tableInfo.name),&quot;Dto&quot;))&#10;#set($dtoClass = $tool.append($tableInfo.name, &quot;Dto&quot;))&#10;#set($voClass = $tool.append($tableInfo.name, &quot;Vo&quot;))&#10;#set($voName = $tool.append($tableInfo.name, &quot;Vo&quot;))&#10;#set($serviceClass = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;#set($serviceName = $tool.append($tool.firstLowerCase($tableInfo.name),&quot;Service&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($controllerClass, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/controller&quot;))&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;&#10;&#10;import $!{tableInfo.savePackageName}.bo.$!{entityClass}Bo;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.common.entity.Result;&#10;import $!{tableInfo.savePackageName}.dto.$dtoClass;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.mapping.$!{packageName}.$!{entityClass}DtoMapping;&#10;import $!{tableInfo.savePackageName}.service.$serviceClass;&#10;import $!{tableInfo.savePackageName}.vo.$!{entityClass}Vo;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.web.bind.annotation.DeleteMapping;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.PathVariable;&#10;import org.springframework.web.bind.annotation.PostMapping;&#10;import org.springframework.web.bind.annotation.PutMapping;&#10;import org.springframework.web.bind.annotation.RequestBody;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;import javax.validation.Valid;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;控制层&quot;)&#10;@Slf4j&#10;@RestController&#10;@RequestMapping(&quot;/api/v1/$!{entityName}s&quot;)&#10;@RequiredArgsConstructor(onConstructor = @__(@Autowired))&#10;public class $!{controllerClass} {&#10;&#10;    private final $serviceClass $serviceName;&#10;    &#10;    private final $!{entityClass}DtoMapping $!{entityName}DtoMapping;&#10;&#10;    /**&#10;     * 查询所有$!{tableComment}&#10;     *&#10;     * @return Result&lt;List&lt;$!{entityClass}Vo&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/all&quot;)&#10;    public Result&lt;List&lt;$!{entityClass}Vo&gt;&gt; get$!{entityClass}All(){&#10;        List&lt;$!{entityClass}Vo&gt; $!{entityName}List = $!{serviceName}.get$!{entityClass}All();&#10;        return Result.success(&quot;查询所有$!{tableComment}成功&quot;, $!{entityName}List);&#10;    }&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param $!{entityName}Bo 查询条件&#10;     * @return Result&lt;List&lt;$!{entityClass}Vo&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/list&quot;)&#10;    public Result&lt;List&lt;$!{entityClass}Vo&gt;&gt; get$!{entityClass}List($!{entityClass}Bo $!{entityName}Bo){&#10;        $!{entityClass}Dto $!{entityName}Dto = $!{entityName}DtoMapping.sourceToTarget($!{entityName}Bo);&#10;        List&lt;$!{entityClass}Vo&gt; $!{entityName}List = $!{serviceName}.get$!{entityClass}List($!{entityName}Dto);&#10;        return Result.success(&quot;根据条件查询$!{tableComment}成功&quot;, $!{entityName}List);&#10;    }&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param $!{entityName}Bo 查询条件&#10;     * @return Result&lt;PageResult&lt;$!{entityClass}&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/page&quot;)&#10;    public Result&lt;PageResult&lt;$!{entityClass}Vo&gt;&gt; get$!{entityClass}PageList($!{entityClass}Bo $!{entityName}Bo){&#10;        $!{entityClass}Dto $!{entityName}Dto = $!{entityName}DtoMapping.sourceToTarget($!{entityName}Bo);&#10;        PageResult&lt;$!{entityClass}Vo&gt; pageResult = $!{serviceName}.get$!{entityClass}PageList($!{entityName}Dto);&#10;        return Result.success(&quot;根据条件分页查询$!{tableComment}成功&quot;, pageResult);&#10;    }&#10;&#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id $!{tableComment}id&#10;     * @return Result&lt;$!{entityClass}Vo&gt;&#10;     */&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Result&lt;$!{entityClass}Vo&gt; get$!{entityClass}ById(@PathVariable(&quot;id&quot;) Integer id){&#10;        $!{entityClass}Vo $!{entityName}Vo = $!{serviceName}.get$!{entityClass}ById(id);&#10;        return Result.success(&quot;查询$!{tableComment}成功&quot;, $!{entityName}Vo);&#10;    }&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param $!{entityName}Bo $!{tableComment}信息&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @PostMapping&#10;    public Result&lt;Void&gt; save$!{entityClass}(@Valid @RequestBody $!{entityClass}Bo $!{entityName}Bo){&#10;        $!{entityClass}Dto $!{entityName}Dto = $!{entityName}DtoMapping.sourceToTarget($!{entityName}Bo);&#10;        $!{serviceName}.save$!{entityClass}($!{entityName}Dto);&#10;        return Result.success(&quot;新增$!{tableComment}成功&quot;);&#10;    }&#10;&#10;    /**&#10;     * 修改$!{tableComment}&#10;     *&#10;     * @param $!{entityName}Bo $!{tableComment}信息&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public Result&lt;Void&gt; update$!{entityClass}(@PathVariable(&quot;id&quot;) Integer id, @RequestBody $!{entityClass}Bo $!{entityName}Bo){&#10;        $!{entityClass}Dto $!{entityName}Dto = $!{entityName}DtoMapping.sourceToTarget($!{entityName}Bo);&#10;        $!{entityName}Dto.setId(id);&#10;        $!{serviceName}.update$!{entityClass}($!{entityName}Dto);&#10;        return Result.success(&quot;更新$!{tableComment}成功&quot;);&#10;    }&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return  Result&lt;rows&gt;&#10;     */&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public Result&lt;Void&gt; delete$!{entityClass}ById(@PathVariable(&quot;id&quot;) Integer id){&#10;        $!{serviceName}.delete$!{entityClass}ById(id);&#10;        return Result.success(&quot;删除$!{tableComment}成功&quot;);&#10;    }&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param ids id集合&#10;     * @return  Result&lt;rows&gt;&#10;     */&#10;    @DeleteMapping(&quot;/batch/ids&quot;)&#10;    public Result&lt;Void&gt; batchDeleteByIds(@RequestBody List&lt;Integer&gt; ids){&#10;        $!{serviceName}.batchDeleteByIds(ids);&#10;        return Result.success(&quot;批量删除$!{tableComment}成功&quot;);&#10;    }&#10;&#10;}" />
                    <option name="name" value="controller.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;Result.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import $!{tableInfo.savePackageName}.common.enums.ResultCodeEnum;&#10;import lombok.Data;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;#classComment(&quot;响应结果封装实体&quot;) &#10;@Data&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class Result&lt;T&gt; {&#10;    &#10;    private boolean success;//是否成功&#10;    private Integer code;//返回码&#10;    private String message;//返回消息&#10;    private T data;//返回数据&#10;&#10;    private Map&lt;String,Object&gt; extend;//扩展数据&#10;    &#10;    public Result() {&#10;    }&#10;&#10;    public Result(boolean flag, Integer code, String message, T data) {&#10;        this.success = flag;&#10;        this.code = code;&#10;        this.message = message;&#10;        this.data = data;&#10;    }&#10;&#10;    public Result(boolean flag, Integer code, String message) {&#10;        this.success = flag;&#10;        this.code = code;&#10;        this.message = message;&#10;    }&#10;&#10;    /**&#10;     * 响应成功&#10;     *&#10;     * @param message 提示信息&#10;     * @return Result&lt;Void&gt;&#10;     */&#10;    public static Result&lt;Void&gt; success(String message){&#10;        return new Result&lt;&gt;(true, ResultCodeEnum.SUCCESS.getCode(), message);&#10;    }&#10;&#10;    /**&#10;     * 响应成功&#10;     *&#10;     * @param message 提示信息&#10;     * @param data 响应数据&#10;     * @return Result&lt;T&gt;&#10;     */&#10;    public static &lt;T&gt; Result&lt;T&gt; success(String message, T data){&#10;        return new Result&lt;&gt;(true, ResultCodeEnum.SUCCESS.getCode(), message, data);&#10;    }&#10;&#10;    /**&#10;     * 响应失败&#10;     *&#10;     * @param code 状态码&#10;     * @param message 提示信息&#10;     * @return Result&lt;Void&gt;&#10;     */&#10;    public static &lt;T&gt; Result&lt;T&gt; error(Integer code, String message){&#10;        return new Result&lt;&gt;(false, code, message, null);&#10;    }&#10;&#10;    /**&#10;     * 扩展数据&#10;     *&#10;     * @param key key&#10;     * @param value value&#10;     * @return Result&#10;     */&#10;    public Result&lt;T&gt; extend(String key, Object value){&#10;        if(null == extend){&#10;            extend = new HashMap&lt;&gt;();&#10;        }&#10;        this.extend.put(key, value);&#10;        return this;&#10;    }&#10;}" />
                    <option name="name" value="result.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;PageResult.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.util.List;&#10;    &#10;#classComment(&quot;分页结果实体&quot;) &#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class PageResult&lt;T&gt; {&#10;&#10;    private Long total;//总记录数&#10;    private Integer totalPage;// 总页数&#10;    private List&lt;T&gt; rows;//记录&#10;    private Integer page;&#10;    private Integer size;&#10;    private Boolean hasNext;&#10;    private Boolean hasPrevious;&#10;&#10;    public PageResult(Long total, Integer totalPage, List&lt;T&gt; rows) {&#10;        this.total = total;&#10;        this.totalPage = totalPage;&#10;        this.rows = rows;&#10;    }&#10;}" />
                    <option name="name" value="pageResult.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;PageRequest.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import lombok.Setter;&#10;import java.io.Serializable;&#10;    &#10;#classComment(&quot;分页请求基类&quot;) &#10;@Setter&#10;public class PageRequest implements Serializable{&#10;    &#10;    private Integer size;&#10;    private Integer page;&#10;    private String orderBy;&#10;&#10;    public Integer getSize() {&#10;        if (this.size == null || this.size &lt; 0 || this.size &gt; 50){&#10;            setSize(10);&#10;        }&#10;        return size;&#10;    }&#10;&#10;    public Integer getPage() {&#10;        if (this.page == null || this.page &lt; 0) {&#10;            setPage(1);&#10;        }&#10;        return page;&#10;    }&#10;&#10;    public String getOrderBy() {&#10;        return orderBy;&#10;    }&#10;}" />
                    <option name="name" value="pageRequest.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ResultCodeEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;import lombok.Getter;&#10;    &#10;#classComment(&quot;响应状态码&quot;) &#10;@Getter&#10;public enum ResultCodeEnum {&#10;&#10;    SUCCESS(20000,&quot;成功&quot;),&#10;    PARAM_ERROR(21003, &quot;参数不正确&quot;),&#10;    ;&#10;&#10;    private final Integer code;&#10;&#10;&#9;private final String message;&#10;&#9;&#10;&#9;ResultCodeEnum(Integer code, String message) {&#10;&#9;&#9;this.code = code;&#10;&#9;&#9;this.message = message;&#10;&#9;}&#10;}" />
                    <option name="name" value="resultCodeEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($entityClass = $tableInfo.name.toUpperCase())&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;##设置回调&#10;$!callback.setFileName(&quot;ExceptionEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.exception.ServiceExceptionAssert;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import lombok.NoArgsConstructor;&#10;&#10;#classComment(&quot;业务异常枚举定义&quot;) &#10;@Getter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public enum  ExceptionEnum implements ServiceExceptionAssert {&#10;    &#10;    INTERNAL_SERVER_ERROR(500, &quot;服务器打酱油了，请稍后再试~&quot;),&#10;    USERNAME_NOT_FOUND(400,&quot;用户名为空&quot;),&#10;    PASSWORD_NOT_FOUND(400,&quot;密码为空&quot;),&#10;    #foreach($table in $tableInfoList)&#10;$table.obj.name.toUpperCase()_IS_NOT_EXIST(400,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)不存在&quot;),&#10;    $table.obj.name.toUpperCase()_SAVE_ERROR(500,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)保存失败&quot;),&#10;    $table.obj.name.toUpperCase()_UPDATE_ERROR(500,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)更新失败&quot;),&#10;    $table.obj.name.toUpperCase()_DELETE_ERROR(500,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)删除失败&quot;),&#10;    #end&#10;;&#10;&#10;    private Integer code;&#10;    private String message;&#10;}" />
                    <option name="name" value="exceptionEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;GlobalExceptionHandler.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.Result;&#10;import $!{tableInfo.savePackageName}.common.enums.IExceptionEnum;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.apache.commons.lang3.StringUtils;&#10;import org.springframework.context.support.DefaultMessageSourceResolvable;&#10;import org.springframework.http.HttpHeaders;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.http.converter.HttpMessageNotReadableException;&#10;import org.springframework.lang.Nullable;&#10;import org.springframework.validation.BindException;&#10;import org.springframework.validation.FieldError;&#10;import org.springframework.web.bind.MethodArgumentNotValidException;&#10;import org.springframework.web.bind.annotation.ExceptionHandler;&#10;import org.springframework.web.bind.annotation.RestControllerAdvice;&#10;import org.springframework.web.context.request.WebRequest;&#10;import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;&#10;import org.springframework.web.util.WebUtils;&#10;&#10;import javax.validation.ConstraintViolationException;&#10;import java.nio.file.AccessDeniedException;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;    &#10;#classComment(&quot;统一异常处理类&quot;) &#10;@Slf4j&#10;@RestControllerAdvice&#10;public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {&#10;&#10;    /**&#10;     * 处理单个参数校验异常&#10;     *&#10;     * @param e ConstraintViolationException&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(ConstraintViolationException.class)&#10;    public ResponseEntity&lt;Object&gt; handleConstraintViolationException(ConstraintViolationException e) {&#10;        String message = e.getMessage();&#10;        message = StringUtils.substringAfterLast(message,&quot;:&quot;).trim();&#10;        log.error(&quot;[统一异常]单个参数校验异常，异常信息:{}&quot;,message);&#10;&#10;        // 生成返回结果&#10;        return createResponseResponseEntity(message, HttpStatus.BAD_REQUEST.value());&#10;    }&#10;&#10;    /**&#10;     * 自定义异常处理&#10;     * @param ex&#10;     * @param body&#10;     * @param headers&#10;     * @param status&#10;     * @param request&#10;     * @return&#10;     */&#10;    @Override&#10;    protected ResponseEntity&lt;Object&gt; handleExceptionInternal(&#10;            Exception ex, @Nullable Object body, HttpHeaders headers, HttpStatus status, WebRequest request) {&#10;        String msg=&quot;&quot;;&#10;        if(ex instanceof BindException){&#10;            //处理普通类型Content-Type参数校验异常&#10;            List&lt;FieldError&gt; fieldErrors = ((BindException)ex).getFieldErrors();&#10;            msg = fieldErrors.stream().map(DefaultMessageSourceResolvable::getDefaultMessage)&#10;                    .collect(Collectors.joining(&quot;|&quot;));&#10;            log.error(&quot;[统一异常]对象参数校验异常，异常信息:{}&quot;, msg);&#10;        }else if(ex instanceof MethodArgumentNotValidException) {&#10;            //处理Content-Type=application/json的参数校验异常&#10;            List&lt;FieldError&gt; fieldErrors = ((MethodArgumentNotValidException) ex).getBindingResult().getFieldErrors();&#10;            msg = fieldErrors.stream().map(DefaultMessageSourceResolvable::getDefaultMessage)&#10;                    .collect(Collectors.joining(&quot;|&quot;));&#10;            log.error(&quot;[统一异常]对象参数校验异常，异常信息:{}&quot;,msg);&#10;        } else if (ex instanceof HttpMessageNotReadableException){&#10;            //处理请求体为空异常&#10;            String message = ex.getMessage();&#10;            log.error(&quot;[统一异常]参数错误异常，异常信息，{}&quot;, message);&#10;            if(message.contains(&quot;JSON parse error&quot;)) {&#10;                String paramName = StringUtils.substringBetween(message, &quot;[\&quot;&quot;, &quot;\&quot;]&quot;);&#10;                msg = paramName + &quot;: &quot; + StringUtils.substring(message,&#10;                        message.indexOf(&quot;problem:&quot;) + 8, message.indexOf(&quot;;&quot;)).trim();&#10;            } else if (message.contains(&quot;Required request body is missing&quot;)){&#10;                msg = StringUtils.substringBefore(message,&quot;:&quot;).trim();&#10;            } else {&#10;                msg = StringUtils.substringBefore(message,&quot;;&quot;).trim();&#10;            }&#10;        }else {&#10;            //其他异常&#10;            msg = ex.getMessage();&#10;        }&#10;&#10;        if (HttpStatus.INTERNAL_SERVER_ERROR.equals(status)) {&#10;            request.setAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE, ex, WebRequest.SCOPE_REQUEST);&#10;        }&#10;        log.error(&quot;[统一异常]{}异常，异常信息:{}&quot;, ex.getClass().getSimpleName(), msg);&#10;        return createResponseResponseEntity(msg, status.value());&#10;    }&#10;&#10;    /**&#10;     * 处理403异常&#10;     *&#10;     * @param e AccessDeniedException&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(AccessDeniedException.class)&#10;    public ResponseEntity&lt;Object&gt; handleAccessDeniedException(AccessDeniedException e) {&#10;        String message = e.getMessage();&#10;        log.error(&quot;[统一异常]拒绝访问异常，异常信息，{}&quot;, message);&#10;&#10;        // 生成返回结果&#10;        return createResponseResponseEntity(message, HttpStatus.FORBIDDEN.value());&#10;    }&#10;&#10;    /**&#10;     * 处理自定义业务异常&#10;     *&#10;     * @param cause 异常&#10;     * @param e ServiceException&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(ServiceException.class)&#10;    public ResponseEntity&lt;Object&gt; handleException(Throwable cause, ServiceException e){&#10;        String message;&#10;        int code;&#10;        IExceptionEnum exceptionEnum = e.getExceptionEnum();&#10;        if(null != exceptionEnum){&#10;            message = exceptionEnum.getMessage();&#10;            code = exceptionEnum.getCode();&#10;        }else {&#10;            message = e.getMessage();&#10;            code = e.getCode();&#10;        }&#10;        log.error(&quot;[统一异常]ServiceException异常，异常信息:{}&quot;, message);&#10;        &#10;        // 记录堆栈信息&#10;        final Writer result = new StringWriter();&#10;        final PrintWriter printWriter = new PrintWriter(result);&#10;        cause.printStackTrace(printWriter);&#10;        log.error(&quot;[统一异常]其他异常，堆栈信息：{}&quot;, result);&#10;&#10;        // 生成返回结果&#10;        return Result.error(code, message);&#10;    }&#10;&#10;    /**&#10;     * 其他异常统一处理&#10;     *&#10;     * @param cause 异常&#10;     * @param e Exception&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(Exception.class)&#10;    public ResponseEntity&lt;Object&gt; exceptionHandler(Throwable cause, Exception e) {&#10;        log.error(&quot;[统一异常]其他异常，异常:{}&quot;, e.getClass().toString());&#10;        String message = e.getMessage();&#10;        log.error(&quot;[统一异常]其他异常，异常信息，{}&quot;, message);&#10;        &#10;        // 记录堆栈信息&#10;        final Writer result = new StringWriter();&#10;        final PrintWriter printWriter = new PrintWriter(result);&#10;        cause.printStackTrace(printWriter);&#10;        log.error(&quot;[统一异常]其他异常，堆栈信息：{}&quot;, result);&#10;&#10;        // 生成返回结果&#10;        return Result.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), message);&#10;    }&#10;&#10;    /**&#10;     * 返回异常处理结果&#10;     *&#10;     * @param msg 异常信息&#10;     * @param status 状态码&#10;     * @return ResponseEntity&#10;     */&#10;    private ResponseEntity&lt;Object&gt; createResponseResponseEntity(String msg, int status) {&#10;        // 生成返回结果&#10;        Result&lt;Object&gt; result = Result.error(status, msg);&#10;        return ResponseEntity.status(status).body(result);&#10;    }&#10;}" />
                    <option name="name" value="globalExceptionHandler.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ServiceException.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.enums.IExceptionEnum;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import lombok.NoArgsConstructor;&#10;    &#10;#classComment(&quot;自定义业务异常&quot;) &#10;@Getter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class ServiceException extends RuntimeException{&#10;&#10;    private IExceptionEnum exceptionEnum;&#10;&#10;    private int code;&#10;&#10;    private String msg;&#10;&#10;    public ServiceException(IExceptionEnum exceptionEnum) {&#10;        super(exceptionEnum.getMessage());&#10;        this.exceptionEnum = exceptionEnum;&#10;    }&#10;&#10;    public ServiceException(int code, String msg) {&#10;        super(msg);&#10;        this.code = code;&#10;        this.msg = msg;&#10;    }&#10;}" />
                    <option name="name" value="serviceException.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;Assert.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import java.util.function.Predicate;&#10;&#10;#classComment(&quot;异常断言接口&quot;) &#10;public interface Assert {&#10;&#10;    /**&#10;     * 创建异常&#10;     * @return {@link RuntimeException}&#10;     */&#10;    RuntimeException newException();&#10;&#10;    /**&#10;     * 创建异常&#10;     * @param code 错误码&#10;     * @param msg 错误提示&#10;     * @return {@link RuntimeException}&#10;     */&#10;    RuntimeException newException(int code, String msg);&#10;&#10;    /**&#10;     * 如predicate为true，则抛出异常&#10;     *&#10;     * @param predicate {@link Predicate}&#10;     * @param args 待判断对象&#10;     */&#10;    default &lt;T&gt; void assertException(Predicate&lt;? super T&gt; predicate, T args) {&#10;        if (predicate.test(args)) {&#10;            throw newException();&#10;        }&#10;    }&#10;    &#10;     /**&#10;     * 抛出自定义异常&#10;     *&#10;     */&#10;    default &lt;T&gt; void assertException() {&#10;        throw newException();&#10;    }&#10;&#10;    /**&#10;     * 抛出自定义异常&#10;     *&#10;     * @param code 错误码&#10;     * @param msg 错误提示&#10;     */&#10;    default void assertException(int code, String msg) {&#10;        throw newException(code, msg);&#10;    }&#10;}" />
                    <option name="name" value="assert.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ServiceExceptionAssert.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.enums.IExceptionEnum;&#10;&#10;#classComment(&quot;业务异常断言接口&quot;) &#10;public interface ServiceExceptionAssert extends IExceptionEnum, Assert{&#10;&#10;    /**&#10;     * 创建异常&#10;     *&#10;     * @return {@link RuntimeException}&#10;     */&#10;    @Override&#10;    default RuntimeException newException(){&#10;        return new ServiceException(this);&#10;    }&#10;&#10;    /**&#10;     * 创建异常&#10;     *&#10;     * @param code 错误码&#10;     * @param msg 错误提示&#10;     * @return {@link RuntimeException}&#10;     */&#10;    @Override&#10;    default RuntimeException newException(int code, String msg){&#10;        return new ServiceException(code, msg);&#10;    }&#10;}" />
                    <option name="name" value="serviceExceptionAssert.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ServletResponseStatusEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import org.springframework.http.HttpStatus;&#10;&#10;import java.util.Objects;&#10;import java.util.stream.Stream;&#10;&#10;#classComment(&quot;servlet异常和状态码枚举&quot;) &#10;@Getter&#10;@AllArgsConstructor&#10;public enum ServletResponseStatusEnum {&#10;&#10;    HttpRequestMethodNotSupportedException(&quot;HttpRequestMethodNotSupportedException&quot;,&#10;            HttpStatus.METHOD_NOT_ALLOWED.value()),&#10;    HttpMediaTypeNotSupportedException(&quot;HttpMediaTypeNotSupportedException&quot;,&#10;            HttpStatus.UNSUPPORTED_MEDIA_TYPE.value()),&#10;    HttpMediaTypeNotAcceptableException(&quot;HttpMediaTypeNotAcceptableException&quot;,&#10;            HttpStatus.NOT_ACCEPTABLE.value()),&#10;    MissingPathVariableException(&quot;MissingPathVariableException&quot;,&#10;            HttpStatus.INTERNAL_SERVER_ERROR.value()),&#10;    MissingServletRequestParameterException(&quot;MissingServletRequestParameterException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    ServletRequestBindingException(&quot;ServletRequestBindingException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    ConversionNotSupportedException(&quot;ConversionNotSupportedException&quot;,&#10;            HttpStatus.INTERNAL_SERVER_ERROR.value()),&#10;    TypeMismatchException(&quot;TypeMismatchException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    HttpMessageNotReadableException(&quot;HttpMessageNotReadableException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    HttpMessageNotWritableException(&quot;HttpMessageNotWritableException&quot;,&#10;            HttpStatus.INTERNAL_SERVER_ERROR.value()),&#10;    MethodArgumentNotValidException(&quot;MethodArgumentNotValidException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    MissingServletRequestPartException(&quot;MissingServletRequestPartException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    NoHandlerFoundException(&quot;NoHandlerFoundException&quot;,&#10;            HttpStatus.NOT_FOUND.value()),&#10;    AsyncRequestTimeoutException(&quot;AsyncRequestTimeoutException&quot;,&#10;            HttpStatus.SERVICE_UNAVAILABLE.value()),&#10;    MethodArgumentTypeMismatchException(&quot;MethodArgumentTypeMismatchException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    ;&#10;&#10;    private final String className;&#10;    private final Integer status;&#10;&#10;    public static ServletResponseStatusEnum of(String className){&#10;        Objects.requireNonNull(className);&#10;&#10;        return Stream.of(values())&#10;                .filter(bean -&gt; bean.getClassName().equals(className))&#10;                .findAny()&#10;                .orElseThrow(() -&gt; new IllegalArgumentException(className + &quot; not exists&quot;));&#10;    }&#10;}" />
                    <option name="name" value="servletResponseStatusEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;DefaultErrorController.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.enums.ExceptionEnum;&#10;import org.springframework.boot.web.servlet.error.ErrorController;&#10;import org.springframework.stereotype.Controller;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;&#10;import javax.servlet.http.HttpServletRequest;&#10;&#10;#classComment(&quot;默认错误处理控制器&quot;) &#10;@Controller&#10;public class DefaultErrorController implements ErrorController {&#10;&#10;    @RequestMapping(&quot;/error&quot;)&#10;    public String handleError(HttpServletRequest request){&#10;        //获取statusCode:401,404,500&#10;        Integer statusCode = (Integer) request.getAttribute(&quot;javax.servlet.error.status_code&quot;);&#10;        if(statusCode == 500){&#10;            throw new ServiceException(ExceptionEnum.INTERNAL_SERVER_ERROR);&#10;        }else if(statusCode == 404){&#10;            throw new ServiceException(404, &quot;Not Found&quot;);&#10;        }else if(statusCode == 403){&#10;            throw new ServiceException(403, &quot;Forbidden&quot;);&#10;        }else{&#10;            throw new ServiceException(ExceptionEnum.INTERNAL_SERVER_ERROR);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String getErrorPath() {&#10;        return &quot;/error&quot;;&#10;    }&#10;}" />
                    <option name="name" value="defaultErrorController.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;IExceptionEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;#classComment(&quot;异常枚举父类&quot;) &#10;public interface IExceptionEnum {&#10;&#10;    Integer getCode();&#10;&#10;    String getMessage();&#10;}" />
                    <option name="name" value="iExceptionEnum.java" />
                  </Template>
                </list>
              </option>
              <option name="name" value="jpa-plus" />
            </TemplateGroup>
          </value>
        </entry>
        <entry key="mapper">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##使用宏定义设置回调（保存位置与文件后缀）&#10;#save(&quot;/pojo&quot;, &quot;.java&quot;)&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;pojo&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import $!{tableInfo.savePackageName}.common.pojo.BasePojo;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;import tk.mybatis.mapper.annotation.KeySql;&#10;import javax.persistence.*;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;实体&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;@Table(name = &quot;$!{tableInfo.obj.name}&quot;)&#10;##@org.hibernate.annotations.Table(appliesTo = &quot;$!{tableInfo.obj.name}&quot;,comment = &quot;$!{tableInfo.comment}&quot;)&#10;##@JsonIgnoreProperties(value={&quot;hibernateLazyInitializer&quot;,&quot;handler&quot;,&quot;fieldHandler&quot;}) &#10;public class $!{tableInfo.name} extends BasePojo {&#10;    &#10;#foreach($column in $tableInfo.pkColumn)&#10;    @Id&#10;    @KeySql(useGeneratedKeys = true)&#10;    @Column(name =&quot;$!{column.obj.name}&quot;)&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;#foreach($column in $tableInfo.otherColumn)&#10;#if($!{column.obj.name} != &quot;create_by&quot; &amp;&amp; $!{column.obj.name} != &quot;create_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;update_by&quot; &amp;&amp; $!{column.obj.name} != &quot;update_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;is_deleted&quot;)&#10;#if(${column.comment})&#10;    /**&#10;     * ${column.comment}&#10;     */&#10;    #end&#10;@Column(name = &quot;$!{column.obj.name}&quot;)&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;&#10;#end&#10;#end&#10;}" />
                    <option name="name" value="pojo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Dto&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dto&quot;))&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dto;&#10;&#10;$!autoImport&#10;import $!{tableInfo.savePackageName}.common.entity.BaseDto;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;&#10;#tableComment(&quot;Dto&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;public class $!{tableName} extends BaseDto {&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.obj.name} != &quot;create_by&quot; &amp;&amp; $!{column.obj.name} != &quot;create_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;update_by&quot; &amp;&amp; $!{column.obj.name} != &quot;update_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;is_deleted&quot;)&#10;#if(${column.comment})&#10;    /** &#10;     * ${column.comment}&#10;     */&#10;#end&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    &#10;#end&#10;#end&#10;}" />
                    <option name="name" value="dto.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Vo&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/vo&quot;))&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}vo;&#10;&#10;$!autoImport&#10;import lombok.Data;&#10;import io.swagger.annotations.ApiModel;&#10;import io.swagger.annotations.ApiModelProperty;&#10;&#10;#tableComment(&quot;Vo&quot;)&#10;@Data&#10;@ApiModel(value=&quot;$!{tableName}&quot;,description=&quot;展示$!{tableComment}实体&quot;)&#10;public class $!{tableName} {&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if(${column.comment})&#10;    /** &#10;     * ${column.comment}&#10;     */&#10;#end&#10;    @ApiModelProperty(name = &quot;$!{column.name}&quot;, value = &quot;$!{column.comment}&quot;, required = false)&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    &#10;#end&#10;}" />
                    <option name="name" value="vo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Bo&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/bo&quot;))&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}bo;&#10;&#10;import lombok.Data;&#10;import io.swagger.annotations.ApiModel;&#10;import io.swagger.annotations.ApiModelProperty;&#10;&#10;#tableComment(&quot;Bo&quot;)&#10;@Data&#10;@ApiModel(value=&quot;$!{tableName}&quot;,description=&quot;展示$!{tableComment}实体&quot;)&#10;public class $!{tableName} {&#10;#foreach($column in $tableInfo.fullColumn)&#10;&#10;#if(${column.comment})&#10;    /** &#10;     * ${column.comment}&#10;     */&#10;#end&#10;    @ApiModelProperty(name = &quot;$!{column.name}&quot;, value = &quot;$!{column.comment}&quot;, required = false)&#10;#if($!{tool.getClsNameByFullName($column.type)} == &quot;Date&quot;)&#10;    private String $!{column.name};&#10;#else&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;#end&#10;}" />
                    <option name="name" value="bo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseDto.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import java.time.LocalDateTime;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;&#10;#classComment(&quot;Dto实体基类&quot;) &#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;public class BaseDto extends PageRequest{&#10;&#10;    /**&#10;     * 是否删除(1为删除，0为未删除)&#10;     */&#10;    private Boolean deleted;&#10;    &#10;    /** &#10;     * 创建者 &#10;     */&#10;    private String createBy;&#10;&#10;    /** &#10;     * 创建时间 &#10;     */&#10;    private LocalDateTime createTime;&#10;&#10;    /** &#10;     * 更新者 &#10;     */&#10;    private String updateBy;&#10;&#10;    /** &#10;     * 更新时间 &#10;     */&#10;    private LocalDateTime updateTime;&#10;}" />
                    <option name="name" value="baseDto.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseEntity.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import java.time.LocalDateTime;&#10;import javax.persistence.Column;&#10;import lombok.Data;&#10;&#10;#classComment(&quot;实体基类&quot;) &#10;@Data&#10;public class BasePojo{&#10;&#10;    /**&#10;     * 是否删除(1为删除，0为未删除)&#10;     */&#10;    @Column(name = &quot;is_deleted&quot;)&#10;    private Boolean deleted = false;&#10;    &#10;    /** &#10;     * 创建者 &#10;     */&#10;    private String createBy;&#10;&#10;    /** &#10;     * 创建时间 &#10;     */&#10;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    private LocalDateTime createTime;&#10;&#10;    /** &#10;     * 更新者 &#10;     */&#10;    private String updateBy;&#10;&#10;    /** &#10;     * 更新时间 &#10;     */&#10;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    private LocalDateTime updateTime;&#10;}" />
                    <option name="name" value="basePojo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.pojo.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;服务接口&quot;)&#10;public interface $!{tableName} {&#10;    &#10;    /**&#10;     * 查询所有$!{tableComment}&#10;     *&#10;     * @return List&lt;$!{tableInfo.name}&gt;&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; get$!{tableInfo.name}All();&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return List&lt;$!{tableInfo.name}&gt;&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; get$!{tableInfo.name}List($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param dto 查询条件&#10;     * @return PageResult&lt;$!{tableInfo.name}&gt;&#10;     */&#10;    PageResult&lt;$!{tableInfo.name}&gt; get$!{tableInfo.name}PageList($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return $!{tableInfo.name}&#10;     */&#10;    $!{tableInfo.name} get$!{tableInfo.name}ById($!pk.shortType id);&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dto $!{tableInfo.comment}信息&#10;     * @return rows&#10;     */&#10;    int save$!{tableInfo.name}($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 修改$!{tableComment}&#10;     *&#10;     * @param dto $!{tableInfo.comment}信息&#10;     * @return rows&#10;     */&#10;    int update$!{tableInfo.name}($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return rows&#10;     */&#10;    int delete$!{tableInfo.name}ById($!pk.shortType id);&#10;&#10;    /**&#10;     * 根据id集合批量删除&#10;     *&#10;     * @param ids id集合&#10;     * @return rows&#10;     */&#10;    int batchDeleteByIds(List&lt;$!pk.shortType&gt; ids);&#10;}" />
                    <option name="name" value="service.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($className = $tool.append($tableInfo.name, &quot;ServiceImpl&quot;))&#10;#set($entityClass = $tableInfo.name)&#10;#set($entityClassUpper = $tableInfo.obj.name.toUpperCase())&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($className, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service/impl&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;&#10;&#10;import com.github.pagehelper.PageHelper;&#10;import com.github.pagehelper.PageInfo;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.common.enums.ExceptionEnum;&#10;import $!{tableInfo.savePackageName}.pojo.$!{entityClass};&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import $!{tableInfo.savePackageName}.mapper.$!{entityClass}Mapper;&#10;import $!{tableInfo.savePackageName}.service.$!{entityClass}Service;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.apache.commons.lang3.StringUtils;&#10;import org.springframework.beans.BeanUtils;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;import tk.mybatis.mapper.entity.Example;&#10;&#10;import java.util.List;&#10;import java.util.Objects;&#10;&#10;#tableComment(&quot;服务实现类&quot;)&#10;@Slf4j&#10;@Service&#10;@RequiredArgsConstructor(onConstructor = @__(@Autowired))&#10;public class $!{className} implements $!{entityClass}Service {&#10;&#10;    private final $!{entityClass}Mapper $!{entityName}Mapper;&#10;&#10;    /**&#10;     * 查询所有$!{tableComment}&#10;     *&#10;     * @return List&lt;$!{entityClass}&gt;&#10;     */&#10;    @Override&#10;    public List&lt;$!{entityClass}&gt; get$!{entityClass}All() {&#10;        return $!{entityName}Mapper.selectAll();&#10;    }&#10;    &#10;     /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return List&lt;$!{entityClass}&gt;&#10;     */&#10;    @Override&#10;    public List&lt;$!{entityClass}&gt; get$!{entityClass}List($!{entityClass}Dto dto) {&#10;        //构建查询条件&#10;        Example example = createExample(dto);&#10;        return $!{entityName}Mapper.selectByExample(example);&#10;    }&#10;    &#10;    /**&#10;     * 构建查询条件&#10;     * @param dto $!{tableComment}信息&#10;     * @return Example&#10;     */&#10;    private Example createExample($!{entityClass}Dto dto){&#10;        Example example=new Example($!{entityClass}.class);&#10;        Example.Criteria criteria = example.createCriteria();&#10;        if(null != dto){&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if($!{column.name} == &quot;isDeleted&quot;)&#10;        if(Objects.nonNull(dto.getDeleted())){&#10;    #elseif($!{column.type} == &quot;java.lang.String&quot;)&#10;        if(StringUtils.isNotBlank(dto.get$!{tool.firstUpperCase($column.name)}())){&#10;    #else&#10;        if(Objects.nonNull(dto.get$!tool.firstUpperCase($column.name)())){&#10;    #end&#10;    #if($!{column.name} == &quot;title&quot; || $!{column.name} == &quot;name&quot;)&#10;        criteria.andLike(&quot;$!{column.name}&quot;, &quot;%&quot;+dto.get$!tool.firstUpperCase($column.name)()+&quot;%&quot;);&#10;    #elseif($!{column.name} == &quot;isDeleted&quot;)&#10;        criteria.andEqualTo(&quot;deleted&quot;, dto.getDeleted());&#10;    #else&#10;        criteria.andEqualTo(&quot;$!{column.name}&quot;, dto.get$!tool.firstUpperCase($column.name)());&#10;    #end&#10;        }&#10;#end&#10;        }&#10;        return example;&#10;    }&#10;    &#10;    /**&#10;     * 根据条件查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param dto 查询条件&#10;     * @return PageResult&lt;$!{entityClass}&gt;&#10;     */&#10;    @Override&#10;    public PageResult&lt;$!{entityClass}&gt; get$!{entityClass}PageList($!{entityClass}Dto dto) {&#10;        //构建查询条件&#10;        Example example = createExample(dto);&#10;        String orderBy;&#10;        if(StringUtils.isNotBlank(dto.getOrderBy())){&#10;            orderBy = dto.getOrderBy();&#10;        }else {&#10;            orderBy = &quot;id desc&quot;;&#10;        }&#10;        &#10;        PageHelper.startPage(dto.getPage(), dto.getSize());&#10;        PageHelper.orderBy(orderBy);&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = $!{entityName}Mapper.selectByExample(example);&#10;        PageInfo&lt;$!{entityClass}&gt; pageInfo = PageInfo.of($!{entityName}List);&#10;&#10;        PageResult&lt;$!{entityClass}&gt; pageResult = new PageResult&lt;&gt;(pageInfo.getTotal(), &#10;                    pageInfo.getPages(), pageInfo.getList());&#10;        pageResult.setPage(dto.getPage());&#10;        pageResult.setSize(dto.getSize());&#10;        pageResult.setHasNext(pageInfo.isHasNextPage());&#10;        pageResult.setHasPrevious(pageInfo.isHasPreviousPage());&#10;    &#10;        return pageResult;&#10;    }&#10;    &#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return $!{entityClass}&#10;     */&#10;    @Override&#10;    public $!{entityClass} get$!{entityClass}ById($!pk.shortType id) {&#10;        $!{entityClass} $!{entityName} = $!{entityName}Mapper.selectByPrimaryKey(id);&#10;        &#10;        ExceptionEnum.$!{entityClassUpper}_IS_NOT_EXIST.&#10;                      assertException(Objects::isNull, $!{entityName});&#10;        &#10;        return $!{entityName};&#10;    }&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     * @return rows&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public int save$!{entityClass}($!{entityClass}Dto dto) {&#10;        $!{entityClass} $!{entityName} = new $!{entityClass}();&#10;        BeanUtils.copyProperties(dto, $!{entityName});&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.name} == &quot;id&quot;)&#10;        $!{entityName}.setId(null);&#10;#end&#10;#end&#10;&#10;        int result = $!{entityName}Mapper.insertSelective($!{entityName});&#10;        &#10;        ExceptionEnum.$!{entityClassUpper}_SAVE_ERROR.&#10;                      assertException(num -&gt; num != 1, result);&#10;        &#10;        return result;&#10;    }&#10;&#10;    /**&#10;     * 修改$!{tableComment}信息&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     * @return rows&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public int update$!{entityClass}($!{entityClass}Dto dto) {&#10;        $!{entityClass} $!{entityName} = new $!{entityClass}();&#10;        BeanUtils.copyProperties(dto, $!{entityName});&#10;&#10;        int result = $!{entityName}Mapper.updateByPrimaryKeySelective($!{entityName});&#10;        &#10;        ExceptionEnum.$!{entityClassUpper}_UPDATE_ERROR.&#10;                      assertException(num -&gt; num != 1, result);&#10;        &#10;        return result;&#10;    }&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return rows&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public int delete$!{entityClass}ById($!pk.shortType id) {&#10;        int result = $!{entityName}Mapper.deleteByPrimaryKey(id);&#10;        &#10;        ExceptionEnum.$!{entityClassUpper}_DELETE_ERROR.&#10;                      assertException(num -&gt; num != 1, result);&#10;        &#10;        return result;&#10;    }&#10;&#10;    /**&#10;     * 根据id集合批量删除$!{tableComment}&#10;     *&#10;     * @param ids id集合&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public int batchDeleteByIds(List&lt;$!pk.shortType&gt; ids) {&#10;        int result = $!{entityName}Mapper.deleteByIdList(ids);&#10;        &#10;        ExceptionEnum.$!{entityClassUpper}_DELETE_ERROR.&#10;                      assertException(num -&gt; num != ids.size(), result);&#10;        &#10;        return result;&#10;    }&#10;}" />
                    <option name="name" value="serviceImpl.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($controllerClass = $tool.append($tableInfo.name, &quot;Controller&quot;))&#10;#set($entityClass = $tableInfo.name)&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($dtoName = $tool.append($tool.firstLowerCase($tableInfo.name),&quot;Dto&quot;))&#10;#set($dtoClass = $tool.append($tableInfo.name, &quot;Dto&quot;))&#10;#set($voClass = $tool.append($tableInfo.name, &quot;Vo&quot;))&#10;#set($voName = $tool.append($tableInfo.name, &quot;Vo&quot;))&#10;#set($serviceClass = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;#set($serviceName = $tool.append($tool.firstLowerCase($tableInfo.name),&quot;Service&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($controllerClass, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/controller&quot;))&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.common.entity.Result;&#10;import $!{tableInfo.savePackageName}.dto.$dtoClass;&#10;import $!{tableInfo.savePackageName}.pojo.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.service.$serviceClass;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.web.bind.annotation.DeleteMapping;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.PathVariable;&#10;import org.springframework.web.bind.annotation.PostMapping;&#10;import org.springframework.web.bind.annotation.PutMapping;&#10;import org.springframework.web.bind.annotation.RequestBody;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;import javax.validation.Valid;&#10;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;控制层&quot;)&#10;@Slf4j&#10;@RestController&#10;@RequestMapping(&quot;/api/v1/$!{entityName}s&quot;)&#10;@RequiredArgsConstructor(onConstructor = @__(@Autowired))&#10;public class $!{controllerClass} {&#10;&#10;    private final $serviceClass $serviceName;&#10;&#10;    /**&#10;     * 查询所有$!{tableComment}&#10;     *&#10;     * @return Result&lt;List&lt;$!{entityClass}&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/all&quot;)&#10;    public Result&lt;List&lt;$!{entityClass}&gt;&gt; get$!{entityClass}All(){&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = $!{serviceName}.get$!{entityClass}All();&#10;        return Result.success(&quot;查询所有$!{tableComment}成功&quot;, $!{entityName}List);&#10;    }&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return Result&lt;List&lt;$!{entityClass}&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/list&quot;)&#10;    public Result&lt;List&lt;$!{entityClass}&gt;&gt; get$!{entityClass}List($!{entityClass}Dto dto){&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = $!{serviceName}.get$!{entityClass}List(dto);&#10;        return Result.success(&quot;根据条件查询$!{tableComment}成功&quot;, $!{entityName}List);&#10;    }&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param dto 查询条件&#10;     * @return Result&lt;PageResult&lt;$!{entityClass}&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/page&quot;)&#10;    public Result&lt;PageResult&lt;$!{entityClass}&gt;&gt; get$!{entityClass}PageList($!{entityClass}Dto dto){&#10;        PageResult&lt;$!{entityClass}&gt; pageResult = $!{serviceName}.get$!{entityClass}PageList(dto);&#10;        return Result.success(&quot;根据条件分页查询$!{tableComment}成功&quot;, pageResult);&#10;    }&#10;&#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id $!{tableComment}id&#10;     * @return Result&lt;$!{entityClass}&gt;&#10;     */&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Result&lt;$!{entityClass}&gt; get$!{entityClass}ById(@PathVariable(&quot;id&quot;) $!pk.shortType id){&#10;        $!{entityClass} $!{entityName} = $!{serviceName}.get$!{entityClass}ById(id);&#10;        return Result.success(&quot;查询$!{tableComment}成功&quot;, $!{entityName});&#10;    }&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @PostMapping&#10;    public Result&lt;Void&gt; save$!{entityClass}(@RequestBody $!{entityClass}Dto dto){&#10;        $!{serviceName}.save$!{entityClass}(dto);&#10;        return Result.success(&quot;新增$!{tableComment}成功&quot;);&#10;    }&#10;&#10;    /**&#10;     * 修改$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public Result&lt;Void&gt; update$!{entityClass}(@PathVariable(&quot;id&quot;) $!pk.shortType id, @RequestBody $!{entityClass}Dto dto){&#10;        dto.setId(id);&#10;        $!{serviceName}.update$!{entityClass}(dto);&#10;        return Result.success(&quot;更新$!{tableComment}成功&quot;);&#10;    }&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return  Result&lt;rows&gt;&#10;     */&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public Result&lt;Void&gt; delete$!{entityClass}ById(@PathVariable(&quot;id&quot;) $!pk.shortType id){&#10;        $!{serviceName}.delete$!{entityClass}ById(id);&#10;        return Result.success(&quot;删除$!{tableComment}成功&quot;);&#10;    }&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param ids id集合&#10;     * @return  Result&lt;rows&gt;&#10;     */&#10;    @DeleteMapping(&quot;/batch/ids&quot;)&#10;    public Result&lt;Void&gt; batchDeleteByIds(@RequestBody List&lt;$!pk.shortType&gt; ids){&#10;        $!{serviceName}.batchDeleteByIds(ids);&#10;        return Result.success(&quot;批量删除$!{tableComment}成功&quot;);&#10;    }&#10;&#10;}" />
                    <option name="name" value="controller.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Mapper&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapper&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapper;&#10;&#10;import $!{tableInfo.savePackageName}.common.mapper.BaseMapper;&#10;import $!{tableInfo.savePackageName}.pojo.$!{tableInfo.name};&#10;&#10;#tableComment(&quot;Mapper接口&quot;)&#10;public interface $!{tableName} extends BaseMapper&lt;$!{tableInfo.name}, $!pk.shortType&gt;{&#10;    &#10;    &#10;}" />
                    <option name="name" value="mapper.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseMapper.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/mapper&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.mapper&quot;)&#10;&#10;import tk.mybatis.mapper.additional.idlist.IdListMapper;&#10;import tk.mybatis.mapper.additional.insert.InsertListMapper;&#10;import tk.mybatis.mapper.annotation.RegisterMapper;&#10;import tk.mybatis.mapper.common.Mapper;&#10;&#10;#classComment(&quot;Mapper基类&quot;) &#10;@RegisterMapper&#10;public interface BaseMapper&lt;T,PK&gt; extends Mapper&lt;T&gt;, IdListMapper&lt;T,PK&gt;, InsertListMapper&lt;T&gt; {&#10;    &#10;}" />
                    <option name="name" value="baseMapper.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Feign&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/feign&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}feign;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.common.entity.Result;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import $!{tableInfo.savePackageName}.pojo.$!{tableInfo.name};&#10;import org.springframework.cloud.openfeign.FeignClient;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;feign服务接口&quot;)&#10;@FeignClient(name=&quot;$!{entityName}-service&quot;, path=&quot;/api/v1/$!{entityName}s&quot;)&#10;public interface $!{tableName} {&#10;    &#10;    /**&#10;     * 查询所有$!{tableComment}&#10;     *&#10;     * @return Result&lt;List&lt;$!{tableInfo.name}&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/all&quot;)&#10;    Result&lt;List&lt;$!{tableInfo.name}&gt;&gt; get$!{tableInfo.name}All();&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return Result&lt;List&lt;$!{tableInfo.name}&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/list&quot;)&#10;    Result&lt;List&lt;$!{tableInfo.name}&gt;&gt; get$!{tableInfo.name}List(@RequestParam $!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param dto 查询条件&#10;     * @return Result&lt;PageResult&lt;$!{tableInfo.name}&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/page&quot;)&#10;    Result&lt;PageResult&lt;$!{tableInfo.name}&gt;&gt; get$!{tableInfo.name}PageList(@RequestParam $!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return Result&lt;$!{tableInfo.name}&gt;&#10;     */&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    Result&lt;$!{tableInfo.name}&gt; get$!{tableInfo.name}ById(@PathVariable(&quot;id&quot;) $!pk.shortType id);&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dto $!{tableInfo.comment}信息&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @PostMapping&#10;    Result&lt;Integer&gt; save$!{tableInfo.name}(@RequestBody $!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 修改$!{tableComment}信息&#10;     *&#10;     * @param dto $!{tableInfo.comment}信息&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    Result&lt;Integer&gt; update$!{tableInfo.name}(@PathVariable(&quot;id&quot;) $!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    Result&lt;Integer&gt; delete$!{tableInfo.name}ById(@PathVariable(&quot;id&quot;) $!pk.shortType id);&#10;&#10;    /**&#10;     * 根据id集合批量删除&#10;     *&#10;     * @param ids&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @DeleteMapping(&quot;/batch/ids&quot;)&#10;    Result&lt;Integer&gt; batchDeleteByIds(@RequestBody List&lt;$!pk.shortType&gt; ids);&#10;}" />
                    <option name="name" value="feign.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入mybatis支持&#10;$!init&#10;$!mybatisSupport&#10;&#10;##设置保存名称与保存位置&#10;$!callback.setFileName($tool.append($!{tableInfo.name}, &quot;Mapper.xml&quot;))&#10;$!callback.setSavePath($tool.append($modulePath, &quot;/src/main/resources/mappers&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&#10;&lt;mapper namespace=&quot;$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper&quot;&gt;&#10;    &lt;resultMap type=&quot;$!{tableInfo.savePackageName}.pojo.$!{tableInfo.name}&quot; id=&quot;BaseResultMap&quot;&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.obj.name} == &quot;is_deleted&quot;)&#10;        &lt;result property=&quot;deleted&quot; column=&quot;$!column.obj.name&quot; jdbcType=&quot;$!column.ext.jdbcType&quot;/&gt;&#10;#else&#10;        &lt;result property=&quot;$!column.name&quot; column=&quot;$!column.obj.name&quot; jdbcType=&quot;$!column.ext.jdbcType&quot;/&gt;&#10;#end&#10;#end&#10;    &lt;/resultMap&gt;&#10;&#10;    &lt;sql id=&quot;BaseSql&quot;&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{velocityCount} == $!{tableInfo.fullColumn.size()})&#10;        $!{column.obj.name}&#10;#else&#10;        $!{column.obj.name},&#10;#end&#10;#end&#10;    &lt;/sql&gt;&#10;&lt;/mapper&gt;" />
                    <option name="name" value="mapper.xml" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;Result.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import $!{tableInfo.savePackageName}.common.enums.ResultCodeEnum;&#10;import lombok.Data;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;#classComment(&quot;响应结果封装实体&quot;) &#10;@Data&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class Result&lt;T&gt; {&#10;    &#10;    private boolean success;//是否成功&#10;    private Integer code;//返回码&#10;    private String message;//返回消息&#10;    private T data;//返回数据&#10;&#10;    private Map&lt;String,Object&gt; extend;//扩展数据&#10;    &#10;    public Result() {&#10;    }&#10;&#10;    public Result(boolean flag, Integer code, String message, T data) {&#10;        this.success = flag;&#10;        this.code = code;&#10;        this.message = message;&#10;        this.data = data;&#10;    }&#10;&#10;    public Result(boolean flag, Integer code, String message) {&#10;        this.success = flag;&#10;        this.code = code;&#10;        this.message = message;&#10;    }&#10;&#10;    /**&#10;     * 响应成功&#10;     *&#10;     * @param message 提示信息&#10;     * @return Result&lt;Void&gt;&#10;     */&#10;    public static Result&lt;Void&gt; success(String message){&#10;        return new Result&lt;&gt;(true, ResultCodeEnum.SUCCESS.getCode(), message);&#10;    }&#10;&#10;    /**&#10;     * 响应成功&#10;     *&#10;     * @param message 提示信息&#10;     * @param data 响应数据&#10;     * @return Result&lt;T&gt;&#10;     */&#10;    public static &lt;T&gt; Result&lt;T&gt; success(String message, T data){&#10;        return new Result&lt;&gt;(true, ResultCodeEnum.SUCCESS.getCode(), message, data);&#10;    }&#10;&#10;    /**&#10;     * 响应失败&#10;     *&#10;     * @param code 状态码&#10;     * @param message 提示信息&#10;     * @return Result&lt;Void&gt;&#10;     */&#10;    public static &lt;T&gt; Result&lt;T&gt; error(Integer code, String message){&#10;        return new Result&lt;&gt;(false, code, message, null);&#10;    }&#10;&#10;    /**&#10;     * 扩展数据&#10;     *&#10;     * @param key key&#10;     * @param value value&#10;     * @return Result&#10;     */&#10;    public Result&lt;T&gt; extend(String key, Object value){&#10;        if(null == extend){&#10;            extend = new HashMap&lt;&gt;();&#10;        }&#10;        this.extend.put(key, value);&#10;        return this;&#10;    }&#10;}" />
                    <option name="name" value="result.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;PageResult.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.util.List;&#10;&#10;#classComment(&quot;分页结果实体&quot;) &#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class PageResult&lt;T&gt; {&#10;&#10;    private Long total;//总记录数&#10;    private Integer totalPage;// 总页数&#10;    private List&lt;T&gt; rows;//记录&#10;    private Integer page;&#10;    private Integer size;&#10;    private Boolean hasNext;&#10;    private Boolean hasPrevious;&#10;&#10;    public PageResult(Long total, Integer totalPage, List&lt;T&gt; rows) {&#10;        this.total = total;&#10;        this.totalPage = totalPage;&#10;        this.rows = rows;&#10;    }&#10;}" />
                    <option name="name" value="pageResult.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;PageRequest.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import lombok.Setter;&#10;import java.io.Serializable;&#10;&#10;#classComment(&quot;分页请求基类&quot;) &#10;@Setter&#10;public class PageRequest implements Serializable{&#10;    &#10;    private Integer size;&#10;    private Integer page;&#10;    private String orderBy;&#10;&#10;    public Integer getSize() {&#10;        if (this.size == null || this.size &lt; 0 || this.size &gt; 50){&#10;            setSize(10);&#10;        }&#10;        return size;&#10;    }&#10;&#10;    public Integer getPage() {&#10;        if (this.page == null || this.page &lt; 0) {&#10;            setPage(1);&#10;        }&#10;        return page;&#10;    }&#10;&#10;    public String getOrderBy() {&#10;        return orderBy;&#10;    }&#10;}" />
                    <option name="name" value="pageRequest.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ResultCodeEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;import lombok.Getter;&#10;&#10;#classComment(&quot;响应状态码&quot;) &#10;@Getter&#10;public enum ResultCodeEnum {&#10;&#10;    SUCCESS(20000,&quot;成功&quot;),&#10;    PARAM_ERROR(21003, &quot;参数不正确&quot;),&#10;    ;&#10;&#10;    private final Integer code;&#10;&#10;&#9;private final String message;&#10;&#9;&#10;&#9;ResultCodeEnum(Integer code, String message) {&#10;&#9;&#9;this.code = code;&#10;&#9;&#9;this.message = message;&#10;&#9;}&#10;}" />
                    <option name="name" value="resultCodeEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($entityClass = $tableInfo.name.toUpperCase())&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;##设置回调&#10;$!callback.setFileName(&quot;ExceptionEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.exception.ServiceExceptionAssert;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import lombok.NoArgsConstructor;&#10;&#10;#classComment(&quot;业务异常枚举定义&quot;) &#10;@Getter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public enum  ExceptionEnum implements ServiceExceptionAssert {&#10;    &#10;    INTERNAL_SERVER_ERROR(500, &quot;服务器打酱油了，请稍后再试~&quot;),&#10;    USERNAME_NOT_FOUND(400,&quot;用户名为空&quot;),&#10;    PASSWORD_NOT_FOUND(400,&quot;密码为空&quot;),&#10;    #foreach($table in $tableInfoList)&#10;$table.obj.name.toUpperCase()_IS_NOT_EXIST(400,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)不存在&quot;),&#10;    $table.obj.name.toUpperCase()_SAVE_ERROR(500,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)保存失败&quot;),&#10;    $table.obj.name.toUpperCase()_UPDATE_ERROR(500,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)更新失败&quot;),&#10;    $table.obj.name.toUpperCase()_DELETE_ERROR(500,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)删除失败&quot;),&#10;    #end&#10;;&#10;&#10;    private Integer code;&#10;    private String message;&#10;}" />
                    <option name="name" value="exceptionEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;GlobalExceptionHandler.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.Result;&#10;import $!{tableInfo.savePackageName}.common.enums.IExceptionEnum;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.apache.commons.lang3.StringUtils;&#10;import org.springframework.context.support.DefaultMessageSourceResolvable;&#10;import org.springframework.http.HttpHeaders;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.http.converter.HttpMessageNotReadableException;&#10;import org.springframework.lang.Nullable;&#10;import org.springframework.validation.BindException;&#10;import org.springframework.validation.FieldError;&#10;import org.springframework.web.bind.MethodArgumentNotValidException;&#10;import org.springframework.web.bind.annotation.ExceptionHandler;&#10;import org.springframework.web.bind.annotation.RestControllerAdvice;&#10;import org.springframework.web.context.request.WebRequest;&#10;import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;&#10;import org.springframework.web.util.WebUtils;&#10;&#10;import javax.validation.ConstraintViolationException;&#10;import java.nio.file.AccessDeniedException;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;    &#10;#classComment(&quot;统一异常处理类&quot;) &#10;@Slf4j&#10;@RestControllerAdvice&#10;public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {&#10;&#10;    /**&#10;     * 处理单个参数校验异常&#10;     *&#10;     * @param e ConstraintViolationException&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(ConstraintViolationException.class)&#10;    public ResponseEntity&lt;Object&gt; handleConstraintViolationException(ConstraintViolationException e) {&#10;        String message = e.getMessage();&#10;        message = StringUtils.substringAfterLast(message,&quot;:&quot;).trim();&#10;        log.error(&quot;[统一异常]单个参数校验异常，异常信息:{}&quot;,message);&#10;&#10;        // 生成返回结果&#10;        return createResponseResponseEntity(message, HttpStatus.BAD_REQUEST.value());&#10;    }&#10;&#10;    /**&#10;     * 自定义异常处理&#10;     * @param ex&#10;     * @param body&#10;     * @param headers&#10;     * @param status&#10;     * @param request&#10;     * @return&#10;     */&#10;    @Override&#10;    protected ResponseEntity&lt;Object&gt; handleExceptionInternal(&#10;            Exception ex, @Nullable Object body, HttpHeaders headers, HttpStatus status, WebRequest request) {&#10;        String msg=&quot;&quot;;&#10;        if(ex instanceof BindException){&#10;            //处理普通类型Content-Type参数校验异常&#10;            List&lt;FieldError&gt; fieldErrors = ((BindException)ex).getFieldErrors();&#10;            msg = fieldErrors.stream().map(DefaultMessageSourceResolvable::getDefaultMessage)&#10;                    .collect(Collectors.joining(&quot;|&quot;));&#10;            log.error(&quot;[统一异常]对象参数校验异常，异常信息:{}&quot;, msg);&#10;        }else if(ex instanceof MethodArgumentNotValidException) {&#10;            //处理Content-Type=application/json的参数校验异常&#10;            List&lt;FieldError&gt; fieldErrors = ((MethodArgumentNotValidException) ex).getBindingResult().getFieldErrors();&#10;            msg = fieldErrors.stream().map(DefaultMessageSourceResolvable::getDefaultMessage)&#10;                    .collect(Collectors.joining(&quot;|&quot;));&#10;            log.error(&quot;[统一异常]对象参数校验异常，异常信息:{}&quot;,msg);&#10;        } else if (ex instanceof HttpMessageNotReadableException){&#10;            //处理请求体为空异常&#10;            String message = ex.getMessage();&#10;            log.error(&quot;[统一异常]参数错误异常，异常信息，{}&quot;, message);&#10;            if(message.contains(&quot;JSON parse error&quot;)) {&#10;                String paramName = StringUtils.substringBetween(message, &quot;[\&quot;&quot;, &quot;\&quot;]&quot;);&#10;                msg = paramName + &quot;: &quot; + StringUtils.substring(message,&#10;                        message.indexOf(&quot;problem:&quot;) + 8, message.indexOf(&quot;;&quot;)).trim();&#10;            } else if (message.contains(&quot;Required request body is missing&quot;)){&#10;                msg = StringUtils.substringBefore(message,&quot;:&quot;).trim();&#10;            } else {&#10;                msg = StringUtils.substringBefore(message,&quot;;&quot;).trim();&#10;            }&#10;        }else {&#10;            //其他异常&#10;            msg = ex.getMessage();&#10;        }&#10;&#10;        if (HttpStatus.INTERNAL_SERVER_ERROR.equals(status)) {&#10;            request.setAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE, ex, WebRequest.SCOPE_REQUEST);&#10;        }&#10;        log.error(&quot;[统一异常]{}异常，异常信息:{}&quot;, ex.getClass().getSimpleName(), msg);&#10;        return createResponseResponseEntity(msg, status.value());&#10;    }&#10;&#10;    /**&#10;     * 处理403异常&#10;     *&#10;     * @param e AccessDeniedException&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(AccessDeniedException.class)&#10;    public ResponseEntity&lt;Object&gt; handleAccessDeniedException(AccessDeniedException e) {&#10;        String message = e.getMessage();&#10;        log.error(&quot;[统一异常]拒绝访问异常，异常信息，{}&quot;, message);&#10;&#10;        // 生成返回结果&#10;        return createResponseResponseEntity(message, HttpStatus.FORBIDDEN.value());&#10;    }&#10;&#10;    /**&#10;     * 处理自定义业务异常&#10;     *&#10;     * @param cause 异常&#10;     * @param e ServiceException&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(ServiceException.class)&#10;    public ResponseEntity&lt;Object&gt; handleException(Throwable cause, ServiceException e){&#10;        String message;&#10;        int code;&#10;        IExceptionEnum exceptionEnum = e.getExceptionEnum();&#10;        if(null != exceptionEnum){&#10;            message = exceptionEnum.getMessage();&#10;            code = exceptionEnum.getCode();&#10;        }else {&#10;            message = e.getMessage();&#10;            code = e.getCode();&#10;        }&#10;        log.error(&quot;[统一异常]ServiceException异常，异常信息:{}&quot;, message);&#10;        &#10;        // 记录堆栈信息&#10;        final Writer result = new StringWriter();&#10;        final PrintWriter printWriter = new PrintWriter(result);&#10;        cause.printStackTrace(printWriter);&#10;        log.error(&quot;[统一异常]其他异常，堆栈信息：{}&quot;, result);&#10;&#10;        // 生成返回结果&#10;        return Result.error(code, message);&#10;    }&#10;&#10;    /**&#10;     * 其他异常统一处理&#10;     *&#10;     * @param cause 异常&#10;     * @param e Exception&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(Exception.class)&#10;    public ResponseEntity&lt;Object&gt; exceptionHandler(Throwable cause, Exception e) {&#10;        log.error(&quot;[统一异常]其他异常，异常:{}&quot;, e.getClass().toString());&#10;        String message = e.getMessage();&#10;        log.error(&quot;[统一异常]其他异常，异常信息，{}&quot;, message);&#10;        &#10;        // 记录堆栈信息&#10;        final Writer result = new StringWriter();&#10;        final PrintWriter printWriter = new PrintWriter(result);&#10;        cause.printStackTrace(printWriter);&#10;        log.error(&quot;[统一异常]其他异常，堆栈信息：{}&quot;, result);&#10;&#10;        // 生成返回结果&#10;        return Result.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), message);&#10;    }&#10;&#10;    /**&#10;     * 返回异常处理结果&#10;     *&#10;     * @param msg 异常信息&#10;     * @param status 状态码&#10;     * @return ResponseEntity&#10;     */&#10;    private ResponseEntity&lt;Object&gt; createResponseResponseEntity(String msg, int status) {&#10;        // 生成返回结果&#10;        Result&lt;Object&gt; result = Result.error(status, msg);&#10;        return ResponseEntity.status(status).body(result);&#10;    }&#10;}" />
                    <option name="name" value="globalExceptionHandler.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ServiceException.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.enums.IExceptionEnum;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import lombok.NoArgsConstructor;&#10;&#10;#classComment(&quot;自定义业务异常&quot;) &#10;@Getter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class ServiceException extends RuntimeException{&#10;&#10;    private IExceptionEnum exceptionEnum;&#10;&#10;    private int code;&#10;&#10;    private String msg;&#10;&#10;    public ServiceException(IExceptionEnum exceptionEnum) {&#10;        super(exceptionEnum.getMessage());&#10;        this.exceptionEnum = exceptionEnum;&#10;    }&#10;&#10;    public ServiceException(int code, String msg) {&#10;        super(msg);&#10;        this.code = code;&#10;        this.msg = msg;&#10;    }&#10;}" />
                    <option name="name" value="serviceException.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;Assert.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import java.util.function.Predicate;&#10;&#10;#classComment(&quot;异常断言接口&quot;) &#10;public interface Assert {&#10;&#10;    /**&#10;     * 创建异常&#10;     * @return {@link RuntimeException}&#10;     */&#10;    RuntimeException newException();&#10;&#10;    /**&#10;     * 创建异常&#10;     * @param code 错误码&#10;     * @param msg 错误提示&#10;     * @return {@link RuntimeException}&#10;     */&#10;    RuntimeException newException(int code, String msg);&#10;&#10;    /**&#10;     * 如predicate为true，则抛出异常&#10;     *&#10;     * @param predicate {@link Predicate}&#10;     * @param args 待判断对象&#10;     */&#10;    default &lt;T&gt; void assertException(Predicate&lt;? super T&gt; predicate, T args) {&#10;        if (predicate.test(args)) {&#10;            throw newException();&#10;        }&#10;    }&#10;    &#10;     /**&#10;     * 抛出自定义异常&#10;     *&#10;     */&#10;    default &lt;T&gt; void assertException() {&#10;        throw newException();&#10;    }&#10;&#10;    /**&#10;     * 抛出自定义异常&#10;     *&#10;     * @param code 错误码&#10;     * @param msg 错误提示&#10;     */&#10;    default void assertException(int code, String msg) {&#10;        throw newException(code, msg);&#10;    }&#10;}" />
                    <option name="name" value="assert.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ServiceExceptionAssert.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.enums.IExceptionEnum;&#10;&#10;#classComment(&quot;业务异常断言接口&quot;) &#10;public interface ServiceExceptionAssert extends IExceptionEnum, Assert{&#10;&#10;    /**&#10;     * 创建异常&#10;     *&#10;     * @return {@link RuntimeException}&#10;     */&#10;    @Override&#10;    default RuntimeException newException(){&#10;        return new ServiceException(this);&#10;    }&#10;&#10;    /**&#10;     * 创建异常&#10;     *&#10;     * @param code 错误码&#10;     * @param msg 错误提示&#10;     * @return {@link RuntimeException}&#10;     */&#10;    @Override&#10;    default RuntimeException newException(int code, String msg){&#10;        return new ServiceException(code, msg);&#10;    }&#10;}" />
                    <option name="name" value="serviceExceptionAssert.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ServletResponseStatusEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import org.springframework.http.HttpStatus;&#10;&#10;import java.util.Objects;&#10;import java.util.stream.Stream;&#10;&#10;#classComment(&quot;servlet异常和状态码枚举&quot;) &#10;@Getter&#10;@AllArgsConstructor&#10;public enum ServletResponseStatusEnum {&#10;&#10;    HttpRequestMethodNotSupportedException(&quot;HttpRequestMethodNotSupportedException&quot;,&#10;            HttpStatus.METHOD_NOT_ALLOWED.value()),&#10;    HttpMediaTypeNotSupportedException(&quot;HttpMediaTypeNotSupportedException&quot;,&#10;            HttpStatus.UNSUPPORTED_MEDIA_TYPE.value()),&#10;    HttpMediaTypeNotAcceptableException(&quot;HttpMediaTypeNotAcceptableException&quot;,&#10;            HttpStatus.NOT_ACCEPTABLE.value()),&#10;    MissingPathVariableException(&quot;MissingPathVariableException&quot;,&#10;            HttpStatus.INTERNAL_SERVER_ERROR.value()),&#10;    MissingServletRequestParameterException(&quot;MissingServletRequestParameterException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    ServletRequestBindingException(&quot;ServletRequestBindingException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    ConversionNotSupportedException(&quot;ConversionNotSupportedException&quot;,&#10;            HttpStatus.INTERNAL_SERVER_ERROR.value()),&#10;    TypeMismatchException(&quot;TypeMismatchException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    HttpMessageNotReadableException(&quot;HttpMessageNotReadableException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    HttpMessageNotWritableException(&quot;HttpMessageNotWritableException&quot;,&#10;            HttpStatus.INTERNAL_SERVER_ERROR.value()),&#10;    MethodArgumentNotValidException(&quot;MethodArgumentNotValidException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    MissingServletRequestPartException(&quot;MissingServletRequestPartException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    NoHandlerFoundException(&quot;NoHandlerFoundException&quot;,&#10;            HttpStatus.NOT_FOUND.value()),&#10;    AsyncRequestTimeoutException(&quot;AsyncRequestTimeoutException&quot;,&#10;            HttpStatus.SERVICE_UNAVAILABLE.value()),&#10;    MethodArgumentTypeMismatchException(&quot;MethodArgumentTypeMismatchException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    ;&#10;&#10;    private final String className;&#10;    private final Integer status;&#10;&#10;    public static ServletResponseStatusEnum of(String className){&#10;        Objects.requireNonNull(className);&#10;&#10;        return Stream.of(values())&#10;                .filter(bean -&gt; bean.getClassName().equals(className))&#10;                .findAny()&#10;                .orElseThrow(() -&gt; new IllegalArgumentException(className + &quot; not exists&quot;));&#10;    }&#10;}" />
                    <option name="name" value="servletResponseStatusEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;DefaultErrorController.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.enums.ExceptionEnum;&#10;import org.springframework.boot.web.servlet.error.ErrorController;&#10;import org.springframework.stereotype.Controller;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;&#10;import javax.servlet.http.HttpServletRequest;&#10;&#10;#classComment(&quot;默认错误处理控制器&quot;) &#10;@Controller&#10;public class DefaultErrorController implements ErrorController {&#10;&#10;    @RequestMapping(&quot;/error&quot;)&#10;    public String handleError(HttpServletRequest request){&#10;        //获取statusCode:401,404,500&#10;        Integer statusCode = (Integer) request.getAttribute(&quot;javax.servlet.error.status_code&quot;);&#10;        if(statusCode == 500){&#10;            throw new ServiceException(ExceptionEnum.INTERNAL_SERVER_ERROR);&#10;        }else if(statusCode == 404){&#10;            throw new ServiceException(404, &quot;Not Found&quot;);&#10;        }else if(statusCode == 403){&#10;            throw new ServiceException(403, &quot;Forbidden&quot;);&#10;        }else{&#10;            throw new ServiceException(ExceptionEnum.INTERNAL_SERVER_ERROR);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String getErrorPath() {&#10;        return &quot;/error&quot;;&#10;    }&#10;}" />
                    <option name="name" value="defaultErrorController.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;IExceptionEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;#classComment(&quot;异常枚举父类&quot;) &#10;public interface IExceptionEnum {&#10;&#10;    Integer getCode();&#10;&#10;    String getMessage();&#10;}" />
                    <option name="name" value="iExceptionEnum.java" />
                  </Template>
                </list>
              </option>
              <option name="name" value="mapper" />
            </TemplateGroup>
          </value>
        </entry>
        <entry key="mapper-plus">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##使用宏定义设置回调（保存位置与文件后缀）&#10;#save(&quot;/pojo&quot;, &quot;.java&quot;)&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;pojo&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import $!{tableInfo.savePackageName}.common.entity.BasePojo;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;import tk.mybatis.mapper.annotation.KeySql;&#10;import javax.persistence.*;&#10;import java.io.Serializable;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;实体&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;@Table(name = &quot;$!{tableInfo.obj.name}&quot;)&#10;##@org.hibernate.annotations.Table(appliesTo = &quot;$!{tableInfo.obj.name}&quot;,comment = &quot;$!{tableInfo.comment}&quot;)&#10;##@JsonIgnoreProperties(value={&quot;hibernateLazyInitializer&quot;,&quot;handler&quot;,&quot;fieldHandler&quot;}) &#10;public class $!{tableInfo.name} extends BasePojo implements Serializable {&#10;    &#10;#foreach($column in $tableInfo.pkColumn)&#10;    @Id&#10;    @KeySql(useGeneratedKeys = true)&#10;    @Column(name =&quot;$!{column.obj.name}&quot;)&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;#foreach($column in $tableInfo.otherColumn)&#10;#if($!{column.obj.name} != &quot;create_by&quot; &amp;&amp; $!{column.obj.name} != &quot;create_time&quot; &amp;&amp; &#10;    $!{column.obj.name} != &quot;update_by&quot; &amp;&amp; $!{column.obj.name} != &quot;update_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;is_deleted&quot;)&#10;#if(${column.comment})&#10;    /**&#10;     * ${column.comment}&#10;     */&#10;    #end&#10;@Column(name = &quot;$!{column.obj.name}&quot;)&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    &#10;#end&#10;#end&#10;}" />
                    <option name="name" value="pojo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Dto&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dto&quot;))&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dto;&#10;&#10;$!autoImport&#10;import $!{tableInfo.savePackageName}.common.entity.BaseDto;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;&#10;#tableComment(&quot;Dto&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;public class $!{tableName} extends BaseDto {&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.obj.name} != &quot;create_by&quot; &amp;&amp; $!{column.obj.name} != &quot;create_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;update_by&quot; &amp;&amp; $!{column.obj.name} != &quot;update_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;is_deleted&quot;)&#10;#if(${column.comment})&#10;    /** &#10;     * ${column.comment}&#10;     */&#10;#end&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    &#10;#end    &#10;#end&#10;}" />
                    <option name="name" value="dto.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Vo&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/vo&quot;))&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}vo;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.BaseVo;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;import io.swagger.annotations.ApiModel;&#10;import io.swagger.annotations.ApiModelProperty;&#10;&#10;#tableComment(&quot;Vo&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;@ApiModel(value=&quot;$!{tableName}&quot;,description=&quot;展示$!{tableComment}实体&quot;)&#10;public class $!{tableName} extends BaseVo {&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.obj.name} != &quot;create_by&quot; &amp;&amp; $!{column.obj.name} != &quot;create_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;update_by&quot; &amp;&amp; $!{column.obj.name} != &quot;update_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;is_deleted&quot;)&#10;#if(${column.comment})&#10;    /** &#10;     * ${column.comment}&#10;     */&#10;#end&#10;    @ApiModelProperty(name = &quot;$!{column.name}&quot;, value = &quot;$!{column.comment}&quot;, required = false)&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    &#10;#end&#10;#end&#10;}" />
                    <option name="name" value="vo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Bo&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/bo&quot;))&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}bo;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.BaseBo;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;import io.swagger.annotations.ApiModel;&#10;import io.swagger.annotations.ApiModelProperty;&#10;&#10;#tableComment(&quot;Bo&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;@ApiModel(value=&quot;$!{tableName}&quot;,description=&quot;展示$!{tableComment}实体&quot;)&#10;public class $!{tableName} extends BaseBo {&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.obj.name} != &quot;create_by&quot; &amp;&amp; $!{column.obj.name} != &quot;create_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;update_by&quot; &amp;&amp; $!{column.obj.name} != &quot;update_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;is_deleted&quot;)&#10;#if(${column.comment})&#10;    /** &#10;     * ${column.comment}&#10;     */&#10;#end&#10;    @ApiModelProperty(name = &quot;$!{column.name}&quot;, value = &quot;$!{column.comment}&quot;, required = false)&#10;#if($!{tool.getClsNameByFullName($column.type)} == &quot;Date&quot;)&#10;    private String $!{column.name};&#10;#else&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10; &#10;#end&#10;#end&#10;}" />
                    <option name="name" value="bo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseBo.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import java.time.LocalDateTime;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;import io.swagger.annotations.ApiModel;&#10;import io.swagger.annotations.ApiModelProperty;&#10;&#10;#classComment(&quot;Bo实体基类&quot;) &#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;public class BaseBo extends PageRequest{&#10;&#10;    /** &#10;     * 开始时间 &#10;     */&#10;    @ApiModelProperty(name = &quot;startTime&quot;, value = &quot;开始时间&quot;, required = false)&#10;    private String startTime;&#10;&#10;    /** &#10;     * 结束时间 &#10;     */&#10;    @ApiModelProperty(name = &quot;endTime&quot;, value = &quot;结束时间&quot;, required = false)&#10;    private String endTime;&#10;    &#10;    /** &#10;     * 搜索值 &#10;     */&#10;    @ApiModelProperty(name = &quot;searchValue&quot;, value = &quot;搜索值&quot;, required = false)&#10;    private String searchValue;&#10;    &#10;    /** &#10;     * 创建者 &#10;     */&#10;    @ApiModelProperty(name = &quot;createBy&quot;, value = &quot;创建者&quot;, required = false)&#10;    private String createBy;&#10;&#10;    /** &#10;     * 创建时间 &#10;     */&#10;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    @ApiModelProperty(name = &quot;createTime&quot;, value = &quot;创建时间&quot;, required = false)&#10;    private LocalDateTime createTime;&#10;&#10;    /** &#10;     * 更新者 &#10;     */&#10;    @ApiModelProperty(name = &quot;updateBy&quot;, value = &quot;更新者&quot;, required = false)&#10;    private String updateBy;&#10;&#10;    /** &#10;     * 更新时间 &#10;     */&#10;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    @ApiModelProperty(name = &quot;updateTime&quot;, value = &quot;更新时间&quot;, required = false)&#10;    private LocalDateTime updateTime;&#10;}" />
                    <option name="name" value="baseBo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseDto.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import java.time.LocalDateTime;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;&#10;#classComment(&quot;Dto实体基类&quot;) &#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;public class BaseDto extends PageRequest{&#10;    &#10;    /** &#10;     * 开始时间 &#10;     */&#10;    private LocalDateTime startTime;&#10;    &#10;    /** &#10;     * 结束时间 &#10;     */&#10;    private LocalDateTime endTime;&#10;&#10;    /** &#10;     * 搜索值 &#10;     */&#10;    private String searchValue;&#10;&#10;    /** &#10;     * 数据权限 &#10;     */&#10;    private String dataScope;&#10;    &#10;    /** &#10;     * 创建者 &#10;     */&#10;    private String createBy;&#10;&#10;    /** &#10;     * 创建时间 &#10;     */&#10;    private LocalDateTime createTime;&#10;&#10;    /** &#10;     * 更新者 &#10;     */&#10;    private String updateBy;&#10;&#10;    /** &#10;     * 更新时间 &#10;     */&#10;    private LocalDateTime updateTime;&#10;}" />
                    <option name="name" value="baseDto.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseVo.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.fasterxml.jackson.annotation.JsonFormat;&#10;import java.time.LocalDateTime;&#10;import lombok.Data;&#10;import io.swagger.annotations.ApiModel;&#10;import io.swagger.annotations.ApiModelProperty;&#10;&#10;#classComment(&quot;Vo实体基类&quot;)&#10;@Data&#10;public class BaseVo {&#10;&#10;    /** &#10;     * 创建者 &#10;     */&#10;    @ApiModelProperty(name = &quot;createBy&quot;, value = &quot;创建者&quot;, required = false)&#10;    private String createBy;&#10;&#10;    /** &#10;     * 创建时间 &#10;     */&#10;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    @ApiModelProperty(name = &quot;createTime&quot;, value = &quot;创建时间&quot;, required = false)&#10;    private LocalDateTime createTime;&#10;&#10;    /** &#10;     * 更新者 &#10;     */&#10;    @ApiModelProperty(name = &quot;updateBy&quot;, value = &quot;更新者&quot;, required = false)&#10;    private String updateBy;&#10;&#10;    /** &#10;     * 更新时间 &#10;     */&#10;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    @ApiModelProperty(name = &quot;updateTime&quot;, value = &quot;更新时间&quot;, required = false)&#10;    private LocalDateTime updateTime;&#10;}" />
                    <option name="name" value="baseVo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BasePojo.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.fasterxml.jackson.annotation.JsonFormat;&#10;import javax.persistence.Column;&#10;import java.time.LocalDateTime;&#10;import lombok.Data;&#10;&#10;#classComment(&quot;Pojo实体基类&quot;)&#10;@Data&#10;public class BasePojo {&#10;&#10;    /**&#10;     * 是否删除(1为删除，0为未删除)&#10;     */&#10;    @Column(name = &quot;is_deleted&quot;)&#10;    private Boolean deleted;&#10;&#10;    /** &#10;     * 创建者 &#10;     */&#10;    @Column(name = &quot;create_by&quot;)&#10;    private String createBy;&#10;&#10;    /** &#10;     * 创建时间 &#10;     */&#10;    @Column(name = &quot;create_time&quot;)&#10;    private LocalDateTime createTime;&#10;&#10;    /** &#10;     * 更新者 &#10;     */&#10;    @Column(name = &quot;update_by&quot;)&#10;    private String updateBy;&#10;&#10;    /** &#10;     * 更新时间 &#10;     */&#10;    @Column(name = &quot;update_time&quot;)&#10;    private LocalDateTime updateTime;&#10;}" />
                    <option name="name" value="basePojo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import $!{tableInfo.savePackageName}.vo.$!{tableInfo.name}Vo;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;服务接口&quot;)&#10;public interface $!{tableName} {&#10;    &#10;    /**&#10;     * 查询所有$!{tableComment}&#10;     *&#10;     * @return List&lt;$!{tableInfo.name}Vo&gt;&#10;     */&#10;    List&lt;$!{tableInfo.name}Vo&gt; get$!{tableInfo.name}All();&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return List&lt;$!{tableInfo.name}Vo&gt;&#10;     */&#10;    List&lt;$!{tableInfo.name}Vo&gt; get$!{tableInfo.name}List($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param dto 查询条件&#10;     * @return PageResult&lt;$!{tableInfo.name}Vo&gt;&#10;     */&#10;    PageResult&lt;$!{tableInfo.name}Vo&gt; get$!{tableInfo.name}PageList($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return $!{tableInfo.name}Vo&#10;     */&#10;    $!{tableInfo.name}Vo get$!{tableInfo.name}ById($!pk.shortType id);&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dto $!{tableInfo.comment}信息&#10;     * @return rows&#10;     */&#10;    int save$!{tableInfo.name}($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 修改$!{tableComment}&#10;     *&#10;     * @param dto $!{tableInfo.comment}信息&#10;     * @return rows&#10;     */&#10;    int update$!{tableInfo.name}($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return rows&#10;     */&#10;    int delete$!{tableInfo.name}ById($!pk.shortType id);&#10;&#10;    /**&#10;     * 根据id集合批量删除&#10;     *&#10;     * @param ids id集合&#10;     * @return rows&#10;     */&#10;    int batchDeleteByIds(List&lt;$!pk.shortType&gt; ids);&#10;}" />
                    <option name="name" value="service.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($className = $tool.append($tableInfo.name, &quot;ServiceImpl&quot;))&#10;#set($entityClass = $tableInfo.name)&#10;#set($entityClassUpper = $tableInfo.name.toUpperCase())&#10;#set($entityNameUpper = $tableInfo.obj.name.toUpperCase())&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;#set($packageName = $tool.firstLowerCase($entityName.replace(&quot;sys&quot;,&quot;&quot;)))&#10;##设置回调&#10;$!callback.setFileName($tool.append($className, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service/impl&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;&#10;&#10;import com.github.pagehelper.PageHelper;&#10;import com.github.pagehelper.PageInfo;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.common.enums.ExceptionEnum;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import $!{tableInfo.savePackageName}.mapper.$!{entityClass}Mapper;&#10;import $!{tableInfo.savePackageName}.mapping.$!{packageName}.$!{entityClass}Mapping;&#10;import $!{tableInfo.savePackageName}.mapping.$!{packageName}.$!{entityClass}VoMapping;&#10;import $!{tableInfo.savePackageName}.pojo.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.service.$!{entityClass}Service;&#10;import $!{tableInfo.savePackageName}.vo.$!{tableInfo.name}Vo;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.apache.commons.lang3.StringUtils;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;import tk.mybatis.mapper.entity.Example;&#10;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Objects;&#10;&#10;#tableComment(&quot;服务实现类&quot;)&#10;@Slf4j&#10;@Service&#10;@RequiredArgsConstructor(onConstructor = @__(@Autowired))&#10;public class $!{className} implements $!{entityClass}Service {&#10;&#10;    private final $!{entityClass}Mapper $!{entityName}Mapper;&#10;    &#10;    private final $!{entityClass}VoMapping $!{entityName}VoMapping;&#10;&#10;    private final $!{entityClass}Mapping $!{entityName}Mapping;&#10;&#10;    /**&#10;     * 查询所有$!{tableComment}&#10;     *&#10;     * @return List&lt;$!{entityClass}Vo&gt;&#10;     */&#10;    @Override&#10;    public List&lt;$!{entityClass}Vo&gt; get$!{entityClass}All() {&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = $!{entityName}Mapper.selectAll();&#10;        return $!{entityName}VoMapping.sourceToTarget($!{entityName}List);&#10;    }&#10;    &#10;     /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return List&lt;$!{entityClass}Vo&gt;&#10;     */&#10;    @Override&#10;    public List&lt;$!{entityClass}Vo&gt; get$!{entityClass}List($!{entityClass}Dto dto) {&#10;        //构建查询条件&#10;        Example example = createExample(dto);&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = $!{entityName}Mapper.selectByExample(example);&#10;        return $!{entityName}VoMapping.sourceToTarget($!{entityName}List);&#10;    }&#10;    &#10;    /**&#10;     * 构建查询条件&#10;     * @param dto $!{tableComment}信息&#10;     * @return Example&#10;     */&#10;    private Example createExample($!{entityClass}Dto dto){&#10;        Example example=new Example($!{entityClass}.class);&#10;        Example.Criteria criteria = example.createCriteria();&#10;        if(null != dto){&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.name} == &quot;createTime&quot;)&#10;            if(StringUtils.isNotBlank(dto.getBeginTime()) &amp;&amp; StringUtils.isNotBlank(dto.getEndTime())){&#10;                criteria.andBetween(&quot;createTime&quot;, dto.getBeginTime(), dto.getEndTime());&#10;            }&#10;#elseif($!{column.name} != &quot;createBy&quot; &amp;&amp; $!{column.name} != &quot;updateTime&quot; &amp;&amp;&#10;        $!{column.name} != &quot;updateBy&quot; &amp;&amp; $!{column.name} != &quot;remark&quot;)&#10;    #if($!{column.name} == &quot;isDeleted&quot;)&#10;        if(Objects.nonNull(dto.getDeleted())){&#10;    #elseif($!{column.type} == &quot;java.lang.String&quot;)&#10;        if(StringUtils.isNotBlank(dto.get$!{tool.firstUpperCase($column.name)}())){&#10;    #else&#10;        if(Objects.nonNull(dto.get$!tool.firstUpperCase($column.name)())){&#10;    #end&#10;    #if($!{column.name} == &quot;title&quot; || $!{column.name} == &quot;name&quot;)&#10;        criteria.andLike(&quot;$!{column.name}&quot;, &quot;%&quot;+dto.get$!tool.firstUpperCase($column.name)()+&quot;%&quot;);&#10;    #elseif($!{column.name} == &quot;isDeleted&quot;)&#10;        criteria.andEqualTo(&quot;deleted&quot;, dto.getDeleted());&#10;    #else&#10;        criteria.andEqualTo(&quot;$!{column.name}&quot;, dto.get$!tool.firstUpperCase($column.name)());&#10;    #end&#10;        }&#10;#end&#10;#end&#10;        }&#10;        return example;&#10;    }&#10;    &#10;    /**&#10;     * 根据条件查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param dto 查询条件&#10;     * @return PageResult&lt;$!{entityClass}Vo&gt;&#10;     */&#10;    @Override&#10;    public PageResult&lt;$!{entityClass}Vo&gt; get$!{entityClass}PageList($!{entityClass}Dto dto) {&#10;        //构建查询条件&#10;        Example example = createExample(dto);&#10;        String orderBy;&#10;        if(StringUtils.isNotBlank(dto.getOrderBy())){&#10;            orderBy = dto.getOrderBy();&#10;        }else {&#10;            orderBy = &quot;id desc&quot;;&#10;        }&#10;        &#10;        PageHelper.startPage(dto.getPage(), dto.getSize());&#10;        PageHelper.orderBy(orderBy);&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = $!{entityName}Mapper.selectByExample(example);&#10;        PageInfo&lt;$!{entityClass}&gt; pageInfo = PageInfo.of($!{entityName}List);&#10;&#10;        List&lt;$!{entityClass}Vo&gt; $!{entityName}VoList = $!{entityName}VoMapping.sourceToTarget(pageInfo.getList());&#10;        PageResult&lt;$!{entityClass}Vo&gt; pageResult = new PageResult&lt;&gt;(pageInfo.getTotal(), &#10;                    pageInfo.getPages(), $!{entityName}VoList);&#10;        pageResult.setPage(dto.getPage());&#10;        pageResult.setSize(dto.getSize());&#10;        pageResult.setHasNext(pageInfo.isHasNextPage());&#10;        pageResult.setHasPrevious(pageInfo.isHasPreviousPage());&#10;    &#10;        return pageResult;&#10;    }&#10;    &#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return $!{entityClass}Vo&#10;     */&#10;    @Override&#10;    public $!{entityClass}Vo get$!{entityClass}ById($!pk.shortType id) {&#10;        $!{entityClass} $!{entityName} = $!{entityName}Mapper.selectByPrimaryKey(id);&#10;        &#10;        ExceptionEnum.$!{entityNameUpper}_IS_NOT_EXIST.&#10;                      assertException(Objects::isNull, $!{entityName});&#10;&#10;        return $!{entityName}VoMapping.sourceToTarget($!{entityName});&#10;    }&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     * @return rows&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public int save$!{entityClass}($!{entityClass}Dto dto) {&#10;        $!{entityClass} $!{entityName} = $!{entityName}Mapping.sourceToTarget(dto);&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.name} == &quot;id&quot;)&#10;        $!{entityName}.setId(null);&#10;#end&#10;#end&#10;        $!{entityName}.setCreateTime(new Date());&#10;        int result = $!{entityName}Mapper.insertSelective($!{entityName});&#10;        &#10;        ExceptionEnum.$!{entityNameUpper}_SAVE_ERROR.&#10;                      assertException(num -&gt; num != 1, result);&#10;        &#10;        return result;&#10;    }&#10;&#10;    /**&#10;     * 修改$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     * @return rows&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public int update$!{entityClass}($!{entityClass}Dto dto) {&#10;        $!{entityClass} $!{entityName} = $!{entityName}Mapping.sourceToTarget(dto);&#10;        $!{entityName}.setUpdateTime(new Date());&#10;&#10;        int result = $!{entityName}Mapper.updateByPrimaryKeySelective($!{entityName});&#10;        &#10;        ExceptionEnum.$!{entityNameUpper}_UPDATE_ERROR.&#10;                      assertException(num -&gt; num != 1, result);&#10;        &#10;        return result;&#10;    }&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return rows&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public int delete$!{entityClass}ById($!pk.shortType id) {&#10;        int result = $!{entityName}Mapper.deleteByPrimaryKey(id);&#10;        &#10;        ExceptionEnum.$!{entityNameUpper}_DELETE_ERROR.&#10;                      assertException(num -&gt; num != 1, result);&#10;        &#10;        return result;&#10;    }&#10;&#10;    /**&#10;     * 根据id集合批量删除$!{tableComment}&#10;     *&#10;     * @param ids id集合&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public int batchDeleteByIds(List&lt;$!pk.shortType&gt; ids) {&#10;        int result = $!{entityName}Mapper.deleteByIdList(ids);&#10;        &#10;        ExceptionEnum.$!{entityNameUpper}_DELETE_ERROR.&#10;                      assertException(num -&gt; num != ids.size(), result);&#10;        &#10;        return result;&#10;    }&#10;}" />
                    <option name="name" value="serviceImpl.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($controllerClass = $tool.append($tableInfo.name, &quot;Controller&quot;))&#10;#set($entityClass = $tableInfo.name)&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($dtoName = $tool.append($tool.firstLowerCase($tableInfo.name),&quot;Dto&quot;))&#10;#set($dtoClass = $tool.append($tableInfo.name, &quot;Dto&quot;))&#10;#set($voClass = $tool.append($tableInfo.name, &quot;Vo&quot;))&#10;#set($voName = $tool.append($tableInfo.name, &quot;Vo&quot;))&#10;#set($serviceClass = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;#set($serviceName = $tool.append($tool.firstLowerCase($tableInfo.name),&quot;Service&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;#set($packageName = $tool.firstLowerCase($entityName.replace(&quot;sys&quot;,&quot;&quot;)))&#10;##设置回调&#10;$!callback.setFileName($tool.append($controllerClass, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/controller&quot;))&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;&#10;&#10;import $!{tableInfo.savePackageName}.bo.$!{entityClass}Bo;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.common.entity.Result;&#10;import $!{tableInfo.savePackageName}.mapping.$!{packageName}.$!{entityClass}DtoMapping;&#10;import $!{tableInfo.savePackageName}.service.$serviceClass;&#10;import $!{tableInfo.savePackageName}.dto.$dtoClass;&#10;import $!{tableInfo.savePackageName}.vo.$!{entityClass}Vo;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.web.bind.annotation.DeleteMapping;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.PathVariable;&#10;import org.springframework.web.bind.annotation.PostMapping;&#10;import org.springframework.web.bind.annotation.PutMapping;&#10;import org.springframework.web.bind.annotation.RequestBody;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;import javax.validation.Valid;&#10;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;控制层&quot;)&#10;@Slf4j&#10;@RestController&#10;@RequestMapping(&quot;/api/v1/$!{entityName}s&quot;)&#10;@RequiredArgsConstructor(onConstructor = @__(@Autowired))&#10;public class $!{controllerClass} {&#10;&#10;    private final $serviceClass $serviceName;&#10;    &#10;    private final $!{entityClass}DtoMapping $!{entityName}DtoMapping;&#10;&#10;    /**&#10;     * 查询所有$!{tableComment}&#10;     *&#10;     * @return Result&lt;List&lt;$!{entityClass}Vo&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/all&quot;)&#10;    public Result&lt;List&lt;$!{entityClass}Vo&gt;&gt; get$!{entityClass}All(){&#10;        List&lt;$!{entityClass}Vo&gt; $!{entityName}VoList = $!{serviceName}.get$!{entityClass}All();&#10;        return Result.success(&quot;查询所有$!{tableComment}成功&quot;, $!{entityName}VoList);&#10;    }&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param $!{entityName}Bo 查询条件&#10;     * @return Result&lt;List&lt;$!{entityClass}Vo&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/list&quot;)&#10;    public Result&lt;List&lt;$!{entityClass}Vo&gt;&gt; get$!{entityClass}List($!{entityClass}Bo $!{entityName}Bo){&#10;        $!{entityClass}Dto $!{entityName}Dto = $!{entityName}DtoMapping.sourceToTarget($!{entityName}Bo);&#10;        List&lt;$!{entityClass}Vo&gt; $!{entityName}VoList = $!{serviceName}.get$!{entityClass}List($!{entityName}Dto);&#10;        return Result.success(&quot;根据条件查询$!{tableComment}成功&quot;, $!{entityName}VoList);&#10;    }&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param $!{entityName}Bo 查询条件&#10;     * @return Result&lt;PageResult&lt;$!{entityClass}Vo&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/page&quot;)&#10;    public Result&lt;PageResult&lt;$!{entityClass}Vo&gt;&gt; get$!{entityClass}PageList($!{entityClass}Bo $!{entityName}Bo){&#10;        $!{entityClass}Dto $!{entityName}Dto = $!{entityName}DtoMapping.sourceToTarget($!{entityName}Bo);&#10;        PageResult&lt;$!{entityClass}Vo&gt; pageResult = $!{serviceName}.get$!{entityClass}PageList($!{entityName}Dto);&#10;        return Result.success(&quot;根据条件分页查询$!{tableComment}成功&quot;, pageResult);&#10;    }&#10;&#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id $!{tableComment}id&#10;     * @return Result&lt;$!{entityClass}Vo&gt;&#10;     */&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Result&lt;$!{entityClass}Vo&gt; get$!{entityClass}ById(@PathVariable(&quot;id&quot;) $!pk.shortType id){&#10;        $!{entityClass}Vo $!{entityName}Vo = $!{serviceName}.get$!{entityClass}ById(id);&#10;        return Result.success(&quot;查询$!{tableComment}成功&quot;, $!{entityName}Vo);&#10;    }&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param $!{entityName}Bo $!{tableComment}信息&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @PostMapping&#10;    public Result&lt;Void&gt; save$!{entityClass}(@RequestBody $!{entityClass}Bo $!{entityName}Bo){&#10;        $!{entityClass}Dto $!{entityName}Dto = $!{entityName}DtoMapping.sourceToTarget($!{entityName}Bo);&#10;        $!{serviceName}.save$!{entityClass}($!{entityName}Dto);&#10;        return Result.success(&quot;新增$!{tableComment}成功&quot;);&#10;    }&#10;&#10;    /**&#10;     * 修改$!{tableComment}&#10;     *&#10;     * @param $!{entityName}Bo $!{tableComment}信息&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public Result&lt;Void&gt; update$!{entityClass}(@PathVariable(&quot;id&quot;) $!pk.shortType id, @RequestBody $!{entityClass}Bo $!{entityName}Bo){&#10;        $!{entityClass}Dto $!{entityName}Dto = $!{entityName}DtoMapping.sourceToTarget($!{entityName}Bo);&#10;        $!{entityName}Dto.setId(id);&#10;        $!{serviceName}.update$!{entityClass}( $!{entityName}Dto);&#10;        return Result.success(&quot;更新$!{tableComment}成功&quot;);&#10;    }&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return  Result&lt;rows&gt;&#10;     */&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public Result&lt;Void&gt; delete$!{entityClass}ById(@PathVariable(&quot;id&quot;) $!pk.shortType id){&#10;        $!{serviceName}.delete$!{entityClass}ById(id);&#10;        return Result.success(&quot;删除$!{tableComment}成功&quot;);&#10;    }&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param ids id集合&#10;     * @return  Result&lt;rows&gt;&#10;     */&#10;    @DeleteMapping(&quot;/batch/ids&quot;)&#10;    public Result&lt;Void&gt; batchDeleteByIds(@RequestBody List&lt;$!pk.shortType&gt; ids){&#10;        $!{serviceName}.batchDeleteByIds(ids);&#10;        return Result.success(&quot;批量删除$!{tableComment}成功&quot;);&#10;    }&#10;&#10;}" />
                    <option name="name" value="controller.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Mapper&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapper&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapper;&#10;&#10;import $!{tableInfo.savePackageName}.common.mapper.BaseMapper;&#10;import $!{tableInfo.savePackageName}.pojo.$!{tableInfo.name};&#10;&#10;#tableComment(&quot;Mapper接口&quot;)&#10;public interface $!{tableName} extends BaseMapper&lt;$!{tableInfo.name}, $!pk.shortType&gt;{&#10;    &#10;    &#10;}" />
                    <option name="name" value="mapper.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseMapper.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/mapper&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.mapper&quot;)&#10;&#10;import tk.mybatis.mapper.additional.idlist.IdListMapper;&#10;import tk.mybatis.mapper.additional.insert.InsertListMapper;&#10;import tk.mybatis.mapper.annotation.RegisterMapper;&#10;import tk.mybatis.mapper.common.Mapper;&#10;&#10;#classComment(&quot;Mapper基类&quot;)&#10;@RegisterMapper&#10;public interface BaseMapper&lt;T,PK&gt; extends Mapper&lt;T&gt;, IdListMapper&lt;T,PK&gt;, InsertListMapper&lt;T&gt; {&#10;    &#10;}" />
                    <option name="name" value="baseMapper.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Feign&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/feign&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}feign;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.common.entity.Result;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import $!{tableInfo.savePackageName}.pojo.$!{tableInfo.name};&#10;import org.springframework.cloud.openfeign.FeignClient;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;feign服务接口&quot;)&#10;@FeignClient(name=&quot;$!{entityName}-service&quot;, path=&quot;/api/v1/$!{entityName}s&quot;)&#10;public interface $!{tableName} {&#10;    &#10;    /**&#10;     * 查询所有$!{tableComment}&#10;     *&#10;     * @return Result&lt;List&lt;$!{tableInfo.name}&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/all&quot;)&#10;    Result&lt;List&lt;$!{tableInfo.name}&gt;&gt; get$!{tableInfo.name}All();&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return Result&lt;List&lt;$!{tableInfo.name}&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/list&quot;)&#10;    Result&lt;List&lt;$!{tableInfo.name}&gt;&gt; get$!{tableInfo.name}List(@RequestParam $!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param dto 查询条件&#10;     * @return Result&lt;PageResult&lt;$!{tableInfo.name}&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/page&quot;)&#10;    Result&lt;PageResult&lt;$!{tableInfo.name}&gt;&gt; get$!{tableInfo.name}PageList(@RequestParam $!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return Result&lt;$!{tableInfo.name}&gt;&#10;     */&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    Result&lt;$!{tableInfo.name}&gt; get$!{tableInfo.name}ById(@PathVariable(&quot;id&quot;) $!pk.shortType id);&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dto $!{tableInfo.comment}信息&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @PostMapping&#10;    Result&lt;Integer&gt; save$!{tableInfo.name}(@RequestBody $!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 修改$!{tableComment}信息&#10;     *&#10;     * @param dto $!{tableInfo.comment}信息&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    Result&lt;Integer&gt; update$!{tableInfo.name}(@PathVariable(&quot;id&quot;) $!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    Result&lt;Integer&gt; delete$!{tableInfo.name}ById(@PathVariable(&quot;id&quot;) $!pk.shortType id);&#10;&#10;    /**&#10;     * 根据id集合批量删除&#10;     *&#10;     * @param ids&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @DeleteMapping(&quot;/batch/ids&quot;)&#10;    Result&lt;Integer&gt; batchDeleteByIds(@RequestBody List&lt;$!pk.shortType&gt; ids);&#10;}" />
                    <option name="name" value="feign.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入mybatis支持&#10;$!init&#10;$!mybatisSupport&#10;&#10;##设置保存名称与保存位置&#10;$!callback.setFileName($tool.append($!{tableInfo.name}, &quot;Mapper.xml&quot;))&#10;$!callback.setSavePath($tool.append($modulePath, &quot;/src/main/resources/mappers&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&#10;&lt;mapper namespace=&quot;$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper&quot;&gt;&#10;    &lt;resultMap type=&quot;$!{tableInfo.savePackageName}.pojo.$!{tableInfo.name}&quot; id=&quot;BaseResultMap&quot;&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.obj.name} == &quot;is_deleted&quot;)&#10;        &lt;result property=&quot;deleted&quot; column=&quot;$!column.obj.name&quot; jdbcType=&quot;$!column.ext.jdbcType&quot;/&gt;&#10;#else&#10;        &lt;result property=&quot;$!column.name&quot; column=&quot;$!column.obj.name&quot; jdbcType=&quot;$!column.ext.jdbcType&quot;/&gt;&#10;#end&#10;#end&#10;    &lt;/resultMap&gt;&#10;&#10;    &lt;sql id=&quot;BaseSql&quot;&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{velocityCount} == $!{tableInfo.fullColumn.size()})&#10;        $!{column.obj.name}&#10;#else&#10;        $!{column.obj.name},&#10;#end&#10;#end&#10;    &lt;/sql&gt;&#10;&lt;/mapper&gt;" />
                    <option name="name" value="mapper.xml" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;Result.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import $!{tableInfo.savePackageName}.common.enums.ResultCodeEnum;&#10;import lombok.Data;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;#classComment(&quot;响应结果封装实体&quot;)&#10;@Data&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class Result&lt;T&gt; {&#10;    &#10;    private boolean success;//是否成功&#10;    private Integer code;//返回码&#10;    private String message;//返回消息&#10;    private T data;//返回数据&#10;&#10;    private Map&lt;String,Object&gt; extend;//扩展数据&#10;    &#10;    public Result() {&#10;    }&#10;&#10;    public Result(boolean flag, Integer code, String message, T data) {&#10;        this.success = flag;&#10;        this.code = code;&#10;        this.message = message;&#10;        this.data = data;&#10;    }&#10;&#10;    public Result(boolean flag, Integer code, String message) {&#10;        this.success = flag;&#10;        this.code = code;&#10;        this.message = message;&#10;    }&#10;&#10;    /**&#10;     * 响应成功&#10;     *&#10;     * @param message 提示信息&#10;     * @return Result&lt;Void&gt;&#10;     */&#10;    public static Result&lt;Void&gt; success(String message){&#10;        return new Result&lt;&gt;(true, ResultCodeEnum.SUCCESS.getCode(), message);&#10;    }&#10;&#10;    /**&#10;     * 响应成功&#10;     *&#10;     * @param message 提示信息&#10;     * @param data 响应数据&#10;     * @return Result&lt;T&gt;&#10;     */&#10;    public static &lt;T&gt; Result&lt;T&gt; success(String message, T data){&#10;        return new Result&lt;&gt;(true, ResultCodeEnum.SUCCESS.getCode(), message, data);&#10;    }&#10;&#10;    /**&#10;     * 响应失败&#10;     *&#10;     * @param code 状态码&#10;     * @param message 提示信息&#10;     * @return Result&lt;Void&gt;&#10;     */&#10;    public static &lt;T&gt; Result&lt;T&gt; error(Integer code, String message){&#10;        return new Result&lt;&gt;(false, code, message, null);&#10;    }&#10;&#10;    /**&#10;     * 扩展数据&#10;     *&#10;     * @param key key&#10;     * @param value value&#10;     * @return Result&#10;     */&#10;    public Result&lt;T&gt; extend(String key, Object value){&#10;        if(null == extend){&#10;            extend = new HashMap&lt;&gt;();&#10;        }&#10;        this.extend.put(key, value);&#10;        return this;&#10;    }&#10;}" />
                    <option name="name" value="result.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;PageResult.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.util.List;&#10;&#10;#classComment(&quot;分页结果实体&quot;)&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class PageResult&lt;T&gt; {&#10;&#10;    private Long total;//总记录数&#10;    private Integer totalPage;// 总页数&#10;    private List&lt;T&gt; rows;//记录&#10;    private Integer page;&#10;    private Integer size;&#10;    private Boolean hasNext;&#10;    private Boolean hasPrevious;&#10;&#10;    public PageResult(Long total, Integer totalPage, List&lt;T&gt; rows) {&#10;        this.total = total;&#10;        this.totalPage = totalPage;&#10;        this.rows = rows;&#10;    }&#10;}" />
                    <option name="name" value="pageResult.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;PageRequest.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import lombok.Setter;&#10;import java.io.Serializable;&#10;&#10;#classComment(&quot;分页请求基类&quot;)&#10;@Setter&#10;public class PageRequest implements Serializable{&#10;    &#10;    private Integer size;&#10;    private Integer page;&#10;    private String orderBy;&#10;&#10;    public Integer getSize() {&#10;        if (this.size == null || this.size &lt; 0 || this.size &gt; 50){&#10;            setSize(10);&#10;        }&#10;        return size;&#10;    }&#10;&#10;    public Integer getPage() {&#10;        if (this.page == null || this.page &lt; 0) {&#10;            setPage(1);&#10;        }&#10;        return page;&#10;    }&#10;&#10;    public String getOrderBy() {&#10;        return orderBy;&#10;    }&#10;}" />
                    <option name="name" value="pageRequest.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ResultCodeEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;import lombok.Getter;&#10;&#10;#classComment(&quot;响应状态码&quot;) &#10;@Getter&#10;public enum ResultCodeEnum {&#10;&#10;    SUCCESS(20000,&quot;成功&quot;),&#10;    PARAM_ERROR(21003, &quot;参数不正确&quot;),&#10;    ;&#10;&#10;    private final Integer code;&#10;&#10;&#9;private final String message;&#10;&#9;&#10;&#9;ResultCodeEnum(Integer code, String message) {&#10;&#9;&#9;this.code = code;&#10;&#9;&#9;this.message = message;&#10;&#9;}&#10;}" />
                    <option name="name" value="resultCodeEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($entityClass = $tableInfo.name.toUpperCase())&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;##设置回调&#10;$!callback.setFileName(&quot;ExceptionEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.exception.ServiceExceptionAssert;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import lombok.NoArgsConstructor;&#10;&#10;#classComment(&quot;异常枚举定义&quot;) &#10;@Getter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public enum  ExceptionEnum implements ServiceExceptionAssert {&#10;    &#10;    INTERNAL_SERVER_ERROR(500, &quot;服务器打酱油了，请稍后再试~&quot;),&#10;    USERNAME_NOT_FOUND(400,&quot;用户名为空&quot;),&#10;    PASSWORD_NOT_FOUND(400,&quot;密码为空&quot;),&#10;    #foreach($table in $tableInfoList)&#10;$table.obj.name.toUpperCase()_IS_NOT_EXIST(400,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)不存在&quot;),&#10;    $table.obj.name.toUpperCase()_SAVE_ERROR(500,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)保存失败&quot;),&#10;    $table.obj.name.toUpperCase()_UPDATE_ERROR(500,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)更新失败&quot;),&#10;    $table.obj.name.toUpperCase()_DELETE_ERROR(500,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)删除失败&quot;),&#10;    #end&#10;;&#10;&#10;    private Integer code;&#10;    private String message;&#10;}" />
                    <option name="name" value="exceptionEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;GlobalExceptionHandler.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.Result;&#10;import $!{tableInfo.savePackageName}.common.enums.IExceptionEnum;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.apache.commons.lang3.StringUtils;&#10;import org.springframework.context.support.DefaultMessageSourceResolvable;&#10;import org.springframework.http.HttpHeaders;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.http.converter.HttpMessageNotReadableException;&#10;import org.springframework.lang.Nullable;&#10;import org.springframework.validation.BindException;&#10;import org.springframework.validation.FieldError;&#10;import org.springframework.web.bind.MethodArgumentNotValidException;&#10;import org.springframework.web.bind.annotation.ExceptionHandler;&#10;import org.springframework.web.bind.annotation.RestControllerAdvice;&#10;import org.springframework.web.context.request.WebRequest;&#10;import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;&#10;import org.springframework.web.util.WebUtils;&#10;&#10;import javax.validation.ConstraintViolationException;&#10;import java.nio.file.AccessDeniedException;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;    &#10;#classComment(&quot;统一异常处理类&quot;) &#10;@Slf4j&#10;@RestControllerAdvice&#10;public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {&#10;&#10;    /**&#10;     * 处理单个参数校验异常&#10;     *&#10;     * @param e ConstraintViolationException&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(ConstraintViolationException.class)&#10;    public ResponseEntity&lt;Object&gt; handleConstraintViolationException(ConstraintViolationException e) {&#10;        String message = e.getMessage();&#10;        message = StringUtils.substringAfterLast(message,&quot;:&quot;).trim();&#10;        log.error(&quot;[统一异常]单个参数校验异常，异常信息:{}&quot;,message);&#10;&#10;        // 生成返回结果&#10;        return createResponseResponseEntity(message, HttpStatus.BAD_REQUEST.value());&#10;    }&#10;&#10;    /**&#10;     * 自定义异常处理&#10;     * @param ex&#10;     * @param body&#10;     * @param headers&#10;     * @param status&#10;     * @param request&#10;     * @return&#10;     */&#10;    @Override&#10;    protected ResponseEntity&lt;Object&gt; handleExceptionInternal(&#10;            Exception ex, @Nullable Object body, HttpHeaders headers, HttpStatus status, WebRequest request) {&#10;        String msg=&quot;&quot;;&#10;        if(ex instanceof BindException){&#10;            //处理普通类型Content-Type参数校验异常&#10;            List&lt;FieldError&gt; fieldErrors = ((BindException)ex).getFieldErrors();&#10;            msg = fieldErrors.stream().map(DefaultMessageSourceResolvable::getDefaultMessage)&#10;                    .collect(Collectors.joining(&quot;|&quot;));&#10;            log.error(&quot;[统一异常]对象参数校验异常，异常信息:{}&quot;, msg);&#10;        }else if(ex instanceof MethodArgumentNotValidException) {&#10;            //处理Content-Type=application/json的参数校验异常&#10;            List&lt;FieldError&gt; fieldErrors = ((MethodArgumentNotValidException) ex).getBindingResult().getFieldErrors();&#10;            msg = fieldErrors.stream().map(DefaultMessageSourceResolvable::getDefaultMessage)&#10;                    .collect(Collectors.joining(&quot;|&quot;));&#10;            log.error(&quot;[统一异常]对象参数校验异常，异常信息:{}&quot;,msg);&#10;        } else if (ex instanceof HttpMessageNotReadableException){&#10;            //处理请求体为空异常&#10;            String message = ex.getMessage();&#10;            log.error(&quot;[统一异常]参数错误异常，异常信息，{}&quot;, message);&#10;            if(message.contains(&quot;JSON parse error&quot;)) {&#10;                String paramName = StringUtils.substringBetween(message, &quot;[\&quot;&quot;, &quot;\&quot;]&quot;);&#10;                msg = paramName + &quot;: &quot; + StringUtils.substring(message,&#10;                        message.indexOf(&quot;problem:&quot;) + 8, message.indexOf(&quot;;&quot;)).trim();&#10;            } else if (message.contains(&quot;Required request body is missing&quot;)){&#10;                msg = StringUtils.substringBefore(message,&quot;:&quot;).trim();&#10;            } else {&#10;                msg = StringUtils.substringBefore(message,&quot;;&quot;).trim();&#10;            }&#10;        }else {&#10;            //其他异常&#10;            msg = ex.getMessage();&#10;        }&#10;&#10;        if (HttpStatus.INTERNAL_SERVER_ERROR.equals(status)) {&#10;            request.setAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE, ex, WebRequest.SCOPE_REQUEST);&#10;        }&#10;        log.error(&quot;[统一异常]{}异常，异常信息:{}&quot;, ex.getClass().getSimpleName(), msg);&#10;        return createResponseResponseEntity(msg, status.value());&#10;    }&#10;&#10;    /**&#10;     * 处理403异常&#10;     *&#10;     * @param e AccessDeniedException&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(AccessDeniedException.class)&#10;    public ResponseEntity&lt;Object&gt; handleAccessDeniedException(AccessDeniedException e) {&#10;        String message = e.getMessage();&#10;        log.error(&quot;[统一异常]拒绝访问异常，异常信息，{}&quot;, message);&#10;&#10;        // 生成返回结果&#10;        return createResponseResponseEntity(message, HttpStatus.FORBIDDEN.value());&#10;    }&#10;&#10;    /**&#10;     * 处理自定义业务异常&#10;     *&#10;     * @param cause 异常&#10;     * @param e ServiceException&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(ServiceException.class)&#10;    public ResponseEntity&lt;Object&gt; handleException(Throwable cause, ServiceException e){&#10;        String message;&#10;        int code;&#10;        IExceptionEnum exceptionEnum = e.getExceptionEnum();&#10;        if(null != exceptionEnum){&#10;            message = exceptionEnum.getMessage();&#10;            code = exceptionEnum.getCode();&#10;        }else {&#10;            message = e.getMessage();&#10;            code = e.getCode();&#10;        }&#10;        log.error(&quot;[统一异常]ServiceException异常，异常信息:{}&quot;, message);&#10;        &#10;        // 记录堆栈信息&#10;        final Writer result = new StringWriter();&#10;        final PrintWriter printWriter = new PrintWriter(result);&#10;        cause.printStackTrace(printWriter);&#10;        log.error(&quot;[统一异常]其他异常，堆栈信息：{}&quot;, result);&#10;&#10;        // 生成返回结果&#10;        return Result.error(code, message);&#10;    }&#10;&#10;    /**&#10;     * 其他异常统一处理&#10;     *&#10;     * @param cause 异常&#10;     * @param e Exception&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(Exception.class)&#10;    public ResponseEntity&lt;Object&gt; exceptionHandler(Throwable cause, Exception e) {&#10;        log.error(&quot;[统一异常]其他异常，异常:{}&quot;, e.getClass().toString());&#10;        String message = e.getMessage();&#10;        log.error(&quot;[统一异常]其他异常，异常信息，{}&quot;, message);&#10;        &#10;        // 记录堆栈信息&#10;        final Writer result = new StringWriter();&#10;        final PrintWriter printWriter = new PrintWriter(result);&#10;        cause.printStackTrace(printWriter);&#10;        log.error(&quot;[统一异常]其他异常，堆栈信息：{}&quot;, result);&#10;&#10;        // 生成返回结果&#10;        return Result.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), message);&#10;    }&#10;&#10;    /**&#10;     * 返回异常处理结果&#10;     *&#10;     * @param msg 异常信息&#10;     * @param status 状态码&#10;     * @return ResponseEntity&#10;     */&#10;    private ResponseEntity&lt;Object&gt; createResponseResponseEntity(String msg, int status) {&#10;        // 生成返回结果&#10;        Result&lt;Object&gt; result = Result.error(status, msg);&#10;        return ResponseEntity.status(status).body(result);&#10;    }&#10;}" />
                    <option name="name" value="globalExceptionHandler.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ServiceException.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.enums.IExceptionEnum;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import lombok.NoArgsConstructor;&#10;&#10;#classComment(&quot;自定义业务异常&quot;) &#10;@Getter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class ServiceException extends RuntimeException{&#10;&#10;    private IExceptionEnum exceptionEnum;&#10;&#10;    private int code;&#10;&#10;    private String msg;&#10;&#10;    public ServiceException(IExceptionEnum exceptionEnum) {&#10;        super(exceptionEnum.getMessage());&#10;        this.exceptionEnum = exceptionEnum;&#10;    }&#10;&#10;    public ServiceException(int code, String msg) {&#10;        super(msg);&#10;        this.code = code;&#10;        this.msg = msg;&#10;    }&#10;}" />
                    <option name="name" value="serviceException.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseMapping.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/mapping&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.mapping&quot;)&#10;&#10;import org.apache.commons.lang3.StringUtils;&#10;import org.mapstruct.InheritConfiguration;&#10;import org.mapstruct.InheritInverseConfiguration;&#10;import org.mapstruct.MapperConfig;&#10;import org.mapstruct.Mapping;&#10;&#10;import java.text.ParseException;&#10;import java.text.SimpleDateFormat;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.stream.Stream;&#10;&#10;#classComment(&quot;mapstruct通用类&quot;)&#10;@MapperConfig&#10;public interface BaseMapping&lt;SOURCE, TARGET&gt; {&#10;&#10;    /**&#10;     * 映射同名属性&#10;     */&#10;    @Mapping(target = &quot;createTime&quot;, dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    TARGET sourceToTarget(SOURCE var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性&#10;     */&#10;    @InheritInverseConfiguration(name = &quot;sourceToTarget&quot;)&#10;    SOURCE targetToSource(TARGET var1);&#10;&#10;    /**&#10;     * 映射同名属性，集合形式&#10;     */&#10;    @InheritConfiguration(name = &quot;sourceToTarget&quot;)&#10;    List&lt;TARGET&gt; sourceToTarget(List&lt;SOURCE&gt; var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性，集合形式&#10;     */&#10;    @InheritConfiguration(name = &quot;targetToSource&quot;)&#10;    List&lt;SOURCE&gt; targetToSource(List&lt;TARGET&gt; var1);&#10;&#10;    /**&#10;     * 映射同名属性，集合流形式&#10;     */&#10;    List&lt;TARGET&gt; sourceToTarget(Stream&lt;SOURCE&gt; stream);&#10;&#10;    /**&#10;     * 反向，映射同名属性，集合流形式&#10;     */&#10;    List&lt;SOURCE&gt; targetToSource(Stream&lt;TARGET&gt; stream);&#10;&#10;    default Date convertStr2Date(String str){&#10;        if(StringUtils.isNotBlank(str)){&#10;            SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);&#10;            try {&#10;                return format.parse(str);&#10;            } catch (ParseException e) {&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;&#10;        return null;&#10;    }&#10;    &#10;    default LocalDateTime convertStr2LocalDateTime(String str) {&#10;        if (StringUtils.isNotBlank(str)) {&#10;            return LocalDateTime.parse(str, DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;));&#10;        }&#10;&#10;        return null;&#10;    }&#10;&#10;    default LocalDate convertStr2LocalDate(String str) {&#10;        if (StringUtils.isNotBlank(str)) {&#10;            return LocalDate.parse(str, DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;));&#10;        }&#10;&#10;        return null;&#10;    }&#10;}" />
                    <option name="name" value="baseMapping.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;VoMapping&quot;))&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;#set($packageName = $tool.firstLowerCase($entityName.replace(&quot;sys&quot;,&quot;&quot;)))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapping/&quot;, $!{packageName}))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapping.$!{packageName};&#10;&#10;import $!{tableInfo.savePackageName}.common.mapping.BaseMapping;&#10;import $!{tableInfo.savePackageName}.pojo.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.vo.$!{tableInfo.name}Vo;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.Mapping;&#10;import org.mapstruct.Mappings;&#10;import org.mapstruct.ReportingPolicy;&#10;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;VoMapping&quot;)&#10;@Mapper(componentModel = &quot;spring&quot;, unmappedTargetPolicy = ReportingPolicy.IGNORE,&#10;        unmappedSourcePolicy = ReportingPolicy.IGNORE)&#10;public interface $!{tableName} extends BaseMapping&lt;$!{tableInfo.name}, $!{tableInfo.name}Vo&gt; {&#10;&#10;    /**&#10;     * 映射同名属性&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    @Mappings({&#10;            @Mapping(target = &quot;createTime&quot;, dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;),&#10;            @Mapping(target = &quot;updateTime&quot;, dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    })&#10;    $!{tableInfo.name}Vo sourceToTarget($!{tableInfo.name} var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    $!{tableInfo.name} targetToSource($!{tableInfo.name}Vo var1);&#10;&#10;    /**&#10;     * 映射同名属性，集合形式&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    List&lt;$!{tableInfo.name}Vo&gt; sourceToTarget(List&lt;$!{tableInfo.name}&gt; var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性，集合形式&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    List&lt;$!{tableInfo.name}&gt; targetToSource(List&lt;$!{tableInfo.name}Vo&gt; var1);&#10;}" />
                    <option name="name" value="voMapping.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;DtoMapping&quot;))&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;#set($packageName = $tool.firstLowerCase($entityName.replace(&quot;sys&quot;,&quot;&quot;)))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapping/&quot;, $!{packageName}))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapping.$!{packageName};&#10;&#10;import $!{tableInfo.savePackageName}.bo.$!{tableInfo.name}Bo;&#10;import $!{tableInfo.savePackageName}.common.mapping.BaseMapping;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.Mapping;&#10;import org.mapstruct.Mappings;&#10;import org.mapstruct.ReportingPolicy;&#10;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;DtoMapping&quot;)&#10;@Mapper(componentModel = &quot;spring&quot;, unmappedTargetPolicy = ReportingPolicy.IGNORE,&#10;        unmappedSourcePolicy = ReportingPolicy.IGNORE)&#10;public interface $!{tableName} extends BaseMapping&lt;$!{tableInfo.name}Bo, $!{tableInfo.name}Dto&gt; {&#10;&#10;    /**&#10;     * 映射同名属性&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    @Mappings({&#10;&#9;&#9;@Mapping(target = &quot;startTime&quot;, expression = &quot;java(convertStr2LocalDateTime(var1.getStartTime()))&quot;),&#10;&#9;&#9;@Mapping(target = &quot;endTime&quot;, expression = &quot;java(convertStr2LocalDateTime(var1.getEndTime()))&quot;)&#10;    })&#10;    $!{tableInfo.name}Dto sourceToTarget($!{tableInfo.name}Bo var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    $!{tableInfo.name}Bo targetToSource($!{tableInfo.name}Dto var1);&#10;&#10;    /**&#10;     * 映射同名属性，集合形式&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    List&lt;$!{tableInfo.name}Dto&gt; sourceToTarget(List&lt;$!{tableInfo.name}Bo&gt; var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性，集合形式&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    List&lt;$!{tableInfo.name}Bo&gt; targetToSource(List&lt;$!{tableInfo.name}Dto&gt; var1);&#10;}" />
                    <option name="name" value="dtoMapping.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Mapping&quot;))&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;#set($packageName = $tool.firstLowerCase($entityName.replace(&quot;sys&quot;,&quot;&quot;)))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapping/&quot;, $!{packageName}))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapping.$!{packageName};&#10;&#10;import $!{tableInfo.savePackageName}.common.mapping.BaseMapping;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import $!{tableInfo.savePackageName}.pojo.$!{tableInfo.name};&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.ReportingPolicy;&#10;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;Pojo Mapping&quot;)&#10;@Mapper(componentModel = &quot;spring&quot;, unmappedTargetPolicy = ReportingPolicy.IGNORE,&#10;        unmappedSourcePolicy = ReportingPolicy.IGNORE)&#10;public interface $!{tableName} extends BaseMapping&lt;$!{tableInfo.name}Dto, $!{tableInfo.name}&gt; {&#10;&#10;    /**&#10;     * 映射同名属性&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    $!{tableInfo.name} sourceToTarget($!{tableInfo.name}Dto var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    $!{tableInfo.name}Dto targetToSource($!{tableInfo.name} var1);&#10;&#10;    /**&#10;     * 映射同名属性，集合形式&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    List&lt;$!{tableInfo.name}&gt; sourceToTarget(List&lt;$!{tableInfo.name}Dto&gt; var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性，集合形式&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    List&lt;$!{tableInfo.name}Dto&gt; targetToSource(List&lt;$!{tableInfo.name}&gt; var1);&#10;}" />
                    <option name="name" value="pojoMapping.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;Assert.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import java.util.function.Predicate;&#10;&#10;#classComment(&quot;异常断言接口&quot;) &#10;public interface Assert {&#10;&#10;    /**&#10;     * 创建异常&#10;     * @return {@link RuntimeException}&#10;     */&#10;    RuntimeException newException();&#10;&#10;    /**&#10;     * 创建异常&#10;     * @param code 错误码&#10;     * @param msg 错误提示&#10;     * @return {@link RuntimeException}&#10;     */&#10;    RuntimeException newException(int code, String msg);&#10;&#10;    /**&#10;     * 如predicate为true，则抛出异常&#10;     *&#10;     * @param predicate {@link Predicate}&#10;     * @param args 待判断对象&#10;     */&#10;    default &lt;T&gt; void assertException(Predicate&lt;? super T&gt; predicate, T args) {&#10;        if (predicate.test(args)) {&#10;            throw newException();&#10;        }&#10;    }&#10;    &#10;     /**&#10;     * 抛出自定义异常&#10;     *&#10;     */&#10;    default &lt;T&gt; void assertException() {&#10;        throw newException();&#10;    }&#10;&#10;    /**&#10;     * 抛出自定义异常&#10;     *&#10;     * @param code 错误码&#10;     * @param msg 错误提示&#10;     */&#10;    default void assertException(int code, String msg) {&#10;        throw newException(code, msg);&#10;    }&#10;}" />
                    <option name="name" value="assert.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ServiceExceptionAssert.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.enums.IExceptionEnum;&#10;&#10;#classComment(&quot;业务异常断言接口&quot;) &#10;public interface ServiceExceptionAssert extends IExceptionEnum, Assert{&#10;&#10;    /**&#10;     * 创建异常&#10;     *&#10;     * @return {@link RuntimeException}&#10;     */&#10;    @Override&#10;    default RuntimeException newException(){&#10;        return new ServiceException(this);&#10;    }&#10;&#10;    /**&#10;     * 创建异常&#10;     *&#10;     * @param code 错误码&#10;     * @param msg 错误提示&#10;     * @return {@link RuntimeException}&#10;     */&#10;    @Override&#10;    default RuntimeException newException(int code, String msg){&#10;        return new ServiceException(code, msg);&#10;    }&#10;}" />
                    <option name="name" value="serviceExceptionAssert.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ServletResponseStatusEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import org.springframework.http.HttpStatus;&#10;&#10;import java.util.Objects;&#10;import java.util.stream.Stream;&#10;&#10;#classComment(&quot;servlet异常和状态码枚举&quot;) &#10;@Getter&#10;@AllArgsConstructor&#10;public enum ServletResponseStatusEnum {&#10;&#10;    HttpRequestMethodNotSupportedException(&quot;HttpRequestMethodNotSupportedException&quot;,&#10;            HttpStatus.METHOD_NOT_ALLOWED.value()),&#10;    HttpMediaTypeNotSupportedException(&quot;HttpMediaTypeNotSupportedException&quot;,&#10;            HttpStatus.UNSUPPORTED_MEDIA_TYPE.value()),&#10;    HttpMediaTypeNotAcceptableException(&quot;HttpMediaTypeNotAcceptableException&quot;,&#10;            HttpStatus.NOT_ACCEPTABLE.value()),&#10;    MissingPathVariableException(&quot;MissingPathVariableException&quot;,&#10;            HttpStatus.INTERNAL_SERVER_ERROR.value()),&#10;    MissingServletRequestParameterException(&quot;MissingServletRequestParameterException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    ServletRequestBindingException(&quot;ServletRequestBindingException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    ConversionNotSupportedException(&quot;ConversionNotSupportedException&quot;,&#10;            HttpStatus.INTERNAL_SERVER_ERROR.value()),&#10;    TypeMismatchException(&quot;TypeMismatchException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    HttpMessageNotReadableException(&quot;HttpMessageNotReadableException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    HttpMessageNotWritableException(&quot;HttpMessageNotWritableException&quot;,&#10;            HttpStatus.INTERNAL_SERVER_ERROR.value()),&#10;    MethodArgumentNotValidException(&quot;MethodArgumentNotValidException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    MissingServletRequestPartException(&quot;MissingServletRequestPartException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    NoHandlerFoundException(&quot;NoHandlerFoundException&quot;,&#10;            HttpStatus.NOT_FOUND.value()),&#10;    AsyncRequestTimeoutException(&quot;AsyncRequestTimeoutException&quot;,&#10;            HttpStatus.SERVICE_UNAVAILABLE.value()),&#10;    MethodArgumentTypeMismatchException(&quot;MethodArgumentTypeMismatchException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    ;&#10;&#10;    private final String className;&#10;    private final Integer status;&#10;&#10;    public static ServletResponseStatusEnum of(String className){&#10;        Objects.requireNonNull(className);&#10;&#10;        return Stream.of(values())&#10;                .filter(bean -&gt; bean.getClassName().equals(className))&#10;                .findAny()&#10;                .orElseThrow(() -&gt; new IllegalArgumentException(className + &quot; not exists&quot;));&#10;    }&#10;}" />
                    <option name="name" value="servletResponseStatusEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;DefaultErrorController.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.enums.ExceptionEnum;&#10;import org.springframework.boot.web.servlet.error.ErrorController;&#10;import org.springframework.stereotype.Controller;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;&#10;import javax.servlet.http.HttpServletRequest;&#10;&#10;#classComment(&quot;默认错误处理控制器&quot;) &#10;@Controller&#10;public class DefaultErrorController implements ErrorController {&#10;&#10;    @RequestMapping(&quot;/error&quot;)&#10;    public String handleError(HttpServletRequest request){&#10;        //获取statusCode:401,404,500&#10;        Integer statusCode = (Integer) request.getAttribute(&quot;javax.servlet.error.status_code&quot;);&#10;        if(statusCode == 500){&#10;            throw new ServiceException(ExceptionEnum.INTERNAL_SERVER_ERROR);&#10;        }else if(statusCode == 404){&#10;            throw new ServiceException(404, &quot;Not Found&quot;);&#10;        }else if(statusCode == 403){&#10;            throw new ServiceException(403, &quot;Forbidden&quot;);&#10;        }else{&#10;            throw new ServiceException(ExceptionEnum.INTERNAL_SERVER_ERROR);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String getErrorPath() {&#10;        return &quot;/error&quot;;&#10;    }&#10;}" />
                    <option name="name" value="defaultErrorController.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;IExceptionEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;#classComment(&quot;异常枚举父类&quot;) &#10;public interface IExceptionEnum {&#10;&#10;    Integer getCode();&#10;&#10;    String getMessage();&#10;}" />
                    <option name="name" value="iExceptionEnum.java" />
                  </Template>
                </list>
              </option>
              <option name="name" value="mapper-plus" />
            </TemplateGroup>
          </value>
        </entry>
        <entry key="mybatis">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##使用宏定义设置回调（保存位置与文件后缀）&#10;#save(&quot;/pojo&quot;, &quot;.java&quot;)&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;pojo&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import $!{tableInfo.savePackageName}.common.pojo.BasePojo;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;实体&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;public class $!{tableInfo.name} extends BasePojo {&#10;    &#10;#foreach($column in $tableInfo.pkColumn)&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;#foreach($column in $tableInfo.otherColumn)&#10;#if($!{column.obj.name} != &quot;create_by&quot; &amp;&amp; $!{column.obj.name} != &quot;create_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;update_by&quot; &amp;&amp; $!{column.obj.name} != &quot;update_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;is_deleted&quot;)&#10;    #if(${column.comment})&#10;    /** &#10;     * ${column.comment}&#10;     */&#10;#end&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    &#10;#end&#10;#end&#10;}" />
                    <option name="name" value="pojo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Dto&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dto&quot;))&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dto;&#10;&#10;$!autoImport&#10;import $!{tableInfo.savePackageName}.common.entity.BaseDto;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;&#10;#tableComment(&quot;Dto&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;public class $!{tableName} extends BaseDto {&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.obj.name} != &quot;create_by&quot; &amp;&amp; $!{column.obj.name} != &quot;create_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;update_by&quot; &amp;&amp; $!{column.obj.name} != &quot;update_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;is_deleted&quot;)&#10;#if(${column.comment})&#10;    /** &#10;     * ${column.comment}&#10;     */&#10;#end&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    &#10;#end&#10;#end&#10;}" />
                    <option name="name" value="dto.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Vo&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/vo&quot;))&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}vo;&#10;&#10;$!autoImport&#10;import lombok.Data;&#10;import io.swagger.annotations.ApiModel;&#10;import io.swagger.annotations.ApiModelProperty;&#10;&#10;#tableComment(&quot;Vo&quot;)&#10;@Data&#10;@ApiModel(value=&quot;$!{tableName}&quot;,description=&quot;展示$!{tableComment}实体&quot;)&#10;public class $!{tableName} {&#10;#foreach($column in $tableInfo.fullColumn)&#10;&#10;#if(${column.comment})&#10;    /** &#10;     * ${column.comment}&#10;     */&#10;#end&#10;    @ApiModelProperty(name = &quot;$!{column.name}&quot;, value = &quot;$!{column.comment}&quot;, required = false)&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;}" />
                    <option name="name" value="vo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Bo&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/bo&quot;))&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}bo;&#10;&#10;import lombok.Data;&#10;import io.swagger.annotations.ApiModel;&#10;import io.swagger.annotations.ApiModelProperty;&#10;&#10;#tableComment(&quot;Bo&quot;)&#10;@Data&#10;@ApiModel(value=&quot;$!{tableName}&quot;,description=&quot;展示$!{tableComment}实体&quot;)&#10;public class $!{tableName} {&#10;#foreach($column in $tableInfo.fullColumn)&#10;&#10;#if(${column.comment})&#10;    /** &#10;     * ${column.comment}&#10;     */&#10;#end&#10;    @ApiModelProperty(name = &quot;$!{column.name}&quot;, value = &quot;$!{column.comment}&quot;, required = false)&#10;#if($!{tool.getClsNameByFullName($column.type)} == &quot;Date&quot;)&#10;    private String $!{column.name};&#10;#else&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;#end&#10;}" />
                    <option name="name" value="bo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseDto.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import java.time.LocalDateTime;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;&#10;#classComment(&quot;Dto实体基类&quot;) &#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;public class BaseDto extends PageRequest{&#10;&#10;    /**&#10;     * 是否删除(1为删除，0为未删除)&#10;     */&#10;    private Boolean deleted;&#10;    &#10;    /** &#10;     * 创建者 &#10;     */&#10;    private String createBy;&#10;&#10;    /** &#10;     * 创建时间 &#10;     */&#10;    private LocalDateTime createTime;&#10;&#10;    /** &#10;     * 更新者 &#10;     */&#10;    private String updateBy;&#10;&#10;    /** &#10;     * 更新时间 &#10;     */&#10;    private LocalDateTime updateTime;&#10;}" />
                    <option name="name" value="baseDto.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseEntity.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import java.time.LocalDateTime;&#10;import javax.persistence.Column;&#10;import lombok.Data;&#10;&#10;#classComment(&quot;实体基类&quot;) &#10;@Data&#10;public class BasePojo{&#10;&#10;    /**&#10;     * 是否删除(1为删除，0为未删除)&#10;     */&#10;    @Column(name = &quot;is_deleted&quot;)&#10;    private Boolean deleted = false;&#10;    &#10;    /** &#10;     * 创建者 &#10;     */&#10;    private String createBy;&#10;&#10;    /** &#10;     * 创建时间 &#10;     */&#10;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    private LocalDateTime createTime;&#10;&#10;    /** &#10;     * 更新者 &#10;     */&#10;    private String updateBy;&#10;&#10;    /** &#10;     * 更新时间 &#10;     */&#10;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    private LocalDateTime updateTime;&#10;}" />
                    <option name="name" value="basePojo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.pojo.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;服务接口&quot;)&#10;public interface $!{tableName} {&#10;    &#10;    /**&#10;     * 查询所有$!{tableComment}&#10;     *&#10;     * @return List&lt;$!{tableInfo.name}&gt;&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; get$!{tableInfo.name}All();&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return List&lt;$!{tableInfo.name}&gt;&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; get$!{tableInfo.name}List($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param dto 查询条件&#10;     * @return PageResult&lt;$!{tableInfo.name}&gt;&#10;     */&#10;    PageResult&lt;$!{tableInfo.name}&gt; get$!{tableInfo.name}PageList($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return $!{tableInfo.name}&#10;     */&#10;    $!{tableInfo.name} get$!{tableInfo.name}ById($!pk.shortType id);&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dto $!{tableInfo.comment}信息&#10;     * @return rows&#10;     */&#10;    $!{tableInfo.name} save$!{tableInfo.name}($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 修改$!{tableComment}&#10;     *&#10;     * @param dto $!{tableInfo.comment}信息&#10;     * @return rows&#10;     */&#10;    int update$!{tableInfo.name}($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return rows&#10;     */&#10;    int delete$!{tableInfo.name}ById($!pk.shortType id);&#10;&#10;    /**&#10;     * 根据id集合批量删除&#10;     *&#10;     * @param ids id集合&#10;     * @return rows&#10;     */&#10;    int batchDeleteByIds(List&lt;$!pk.shortType&gt; ids);&#10;}" />
                    <option name="name" value="service.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($className = $tool.append($tableInfo.name, &quot;ServiceImpl&quot;))&#10;#set($entityClass = $tableInfo.name)&#10;#set($entityClassUpper = $tableInfo.obj.name.toUpperCase())&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($className, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service/impl&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;&#10;&#10;import com.github.pagehelper.PageHelper;&#10;import com.github.pagehelper.PageInfo;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.common.enums.ExceptionEnum;&#10;import $!{tableInfo.savePackageName}.pojo.$!{entityClass};&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import $!{tableInfo.savePackageName}.mapper.$!{entityClass}Mapper;&#10;import $!{tableInfo.savePackageName}.service.$!{entityClass}Service;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.apache.commons.lang3.StringUtils;&#10;import org.springframework.beans.BeanUtils;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.util.List;&#10;import java.util.Objects;&#10;&#10;#tableComment(&quot;服务实现类&quot;)&#10;@Slf4j&#10;@Service&#10;@RequiredArgsConstructor(onConstructor = @__(@Autowired))&#10;public class $!{className} implements $!{entityClass}Service {&#10;&#10;    private final $!{entityClass}Mapper $!{entityName}Mapper;&#10;&#10;    /**&#10;     * 查询所有$!{tableComment}&#10;     *&#10;     * @return List&lt;$!{entityClass}&gt;&#10;     */&#10;    @Override&#10;    public List&lt;$!{entityClass}&gt; get$!{entityClass}All() {&#10;        return $!{entityName}Mapper.select$!{entityClass}All();&#10;    }&#10;    &#10;     /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return List&lt;$!{entityClass}&gt;&#10;     */&#10;    @Override&#10;    public List&lt;$!{entityClass}&gt; get$!{entityClass}List($!{entityClass}Dto dto) {&#10;        return $!{entityName}Mapper.select$!{entityClass}List(dto);&#10;    }&#10;    &#10;    /**&#10;     * 根据条件查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param dto 查询条件&#10;     * @return PageResult&lt;$!{entityClass}&gt;&#10;     */&#10;    @Override&#10;    public PageResult&lt;$!{entityClass}&gt; get$!{entityClass}PageList($!{entityClass}Dto dto) {&#10;        String orderBy;&#10;        if(StringUtils.isNotBlank(dto.getOrderBy())){&#10;            orderBy = dto.getOrderBy();&#10;        }else {&#10;            orderBy = &quot;id desc&quot;;&#10;        }&#10;        &#10;        PageHelper.startPage(dto.getPage(), dto.getSize());&#10;        PageHelper.orderBy(orderBy);&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = $!{entityName}Mapper.selectByExample(example);&#10;        PageInfo&lt;$!{entityClass}&gt; pageInfo = PageInfo.of($!{entityName}List);&#10;&#10;        PageResult&lt;$!{entityClass}&gt; pageResult = new PageResult&lt;&gt;(pageInfo.getTotal(), &#10;                    pageInfo.getPages(), pageInfo.getList());&#10;        pageResult.setPage(dto.getPage());&#10;        pageResult.setSize(dto.getSize());&#10;        pageResult.setHasNext(pageInfo.isHasNextPage());&#10;        pageResult.setHasPrevious(pageInfo.isHasPreviousPage());&#10;    &#10;        return pageResult;&#10;    }&#10;    &#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return $!{entityClass}&#10;     */&#10;    @Override&#10;    public $!{entityClass} get$!{entityClass}ById($!pk.shortType id) {&#10;        $!{entityClass} $!{entityName} = $!{entityName}Mapper.select$!{entityClass}ById(id);&#10;        &#10;        ExceptionEnum.$!{entityClassUpper}_IS_NOT_EXIST.&#10;                      assertException(Objects::isNull, $!{entityName});&#10;        &#10;        return $!{entityName};&#10;    }&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     * @return rows&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public $!{tableInfo.name} save$!{entityClass}($!{entityClass}Dto dto) {&#10;        $!{entityClass} $!{entityName} = new $!{entityClass}();&#10;        BeanUtils.copyProperties(dto, $!{entityName});&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.name} == &quot;id&quot;)&#10;        $!{entityName}.setId(null);&#10;#end&#10;#end&#10;&#10;        int result = $!{entityName}Mapper.insert$!{entityClass}($!{entityName});&#10;        &#10;        ExceptionEnum.$!{entityClassUpper}_SAVE_ERROR.&#10;                      assertException(num -&gt; num != 1, result);&#10;        &#10;        return $!{entityName};&#10;    }&#10;&#10;    /**&#10;     * 修改$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     * @return rows&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public int update$!{entityClass}($!{entityClass}Dto dto) {&#10;        $!{entityClass} $!{entityName} = new $!{entityClass}();&#10;        BeanUtils.copyProperties(dto, $!{entityName});&#10;&#10;        int result = $!{entityName}Mapper.update$!{entityClass}ById($!{entityName});&#10;        &#10;        ExceptionEnum.$!{entityClassUpper}_UPDATE_ERROR.&#10;                      assertException(num -&gt; num != 1, result);&#10;        &#10;        return result;&#10;    }&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return rows&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public int delete$!{entityClass}ById($!pk.shortType id) {&#10;        int result = $!{entityName}Mapper.delete$!{entityClass}ById(id);&#10;        &#10;        ExceptionEnum.$!{entityClassUpper}_DELETE_ERROR.&#10;                      assertException(num -&gt; num != 1, result);&#10;        &#10;        return result;&#10;    }&#10;&#10;    /**&#10;     * 根据id集合批量删除$!{tableComment}&#10;     *&#10;     * @param ids id集合&#10;     * @return rows&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public int batchDeleteByIds(List&lt;$!pk.shortType&gt; ids) {&#10;        int result = $!{entityName}Mapper.batchDeleteByIds(ids);&#10;        &#10;        ExceptionEnum.$!{entityClassUpper}_DELETE_ERROR.&#10;                      assertException(num -&gt; num != ids.size(), result);&#10;        &#10;        return result;&#10;    }&#10;}" />
                    <option name="name" value="serviceImpl.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($controllerClass = $tool.append($tableInfo.name, &quot;Controller&quot;))&#10;#set($entityClass = $tableInfo.name)&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($dtoName = $tool.append($tool.firstLowerCase($tableInfo.name),&quot;Dto&quot;))&#10;#set($dtoClass = $tool.append($tableInfo.name, &quot;Dto&quot;))&#10;#set($voClass = $tool.append($tableInfo.name, &quot;Vo&quot;))&#10;#set($voName = $tool.append($tableInfo.name, &quot;Vo&quot;))&#10;#set($serviceClass = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;#set($serviceName = $tool.append($tool.firstLowerCase($tableInfo.name),&quot;Service&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($controllerClass, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/controller&quot;))&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.common.entity.Result;&#10;import $!{tableInfo.savePackageName}.dto.$dtoClass;&#10;import $!{tableInfo.savePackageName}.pojo.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.service.$serviceClass;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.web.bind.annotation.DeleteMapping;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.PathVariable;&#10;import org.springframework.web.bind.annotation.PostMapping;&#10;import org.springframework.web.bind.annotation.PutMapping;&#10;import org.springframework.web.bind.annotation.RequestBody;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;import javax.validation.Valid;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;控制层&quot;)&#10;@Slf4j&#10;@RestController&#10;@RequestMapping(&quot;/api/v1/$!{entityName}s&quot;)&#10;@RequiredArgsConstructor(onConstructor = @__(@Autowired))&#10;public class $!{controllerClass} {&#10;&#10;    private final $serviceClass $serviceName;&#10;&#10;    /**&#10;     * 查询所有$!{tableComment}&#10;     *&#10;     * @return Result&lt;List&lt;$!{entityClass}&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/all&quot;)&#10;    public Result&lt;List&lt;$!{entityClass}&gt;&gt; get$!{entityClass}All(){&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = $!{serviceName}.get$!{entityClass}All();&#10;        return Result.success(&quot;查询所有$!{tableComment}成功&quot;, $!{entityName}List);&#10;    }&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return Result&lt;List&lt;$!{entityClass}&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/list&quot;)&#10;    public Result&lt;List&lt;$!{entityClass}&gt;&gt; get$!{entityClass}List($!{entityClass}Dto dto){&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = $!{serviceName}.get$!{entityClass}List(dto);&#10;        return Result.success(&quot;根据条件查询$!{tableComment}成功&quot;, $!{entityName}List);&#10;    }&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param dto 查询条件&#10;     * @return Result&lt;PageResult&lt;$!{entityClass}&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/page&quot;)&#10;    public Result&lt;PageResult&lt;$!{entityClass}&gt;&gt; get$!{entityClass}PageList($!{entityClass}Dto dto){&#10;        PageResult&lt;$!{entityClass}&gt; pageResult = $!{serviceName}.get$!{entityClass}PageList(dto);&#10;        return Result.success(&quot;根据条件分页查询$!{tableComment}成功&quot;, pageResult);&#10;    }&#10;&#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id $!{tableComment}id&#10;     * @return Result&lt;$!{entityClass}&gt;&#10;     */&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Result&lt;$!{entityClass}&gt; get$!{entityClass}ById(@PathVariable(&quot;id&quot;) $!pk.shortType id){&#10;        $!{entityClass} $!{entityName} = $!{serviceName}.get$!{entityClass}ById(id);&#10;        return Result.success(&quot;查询$!{tableComment}成功&quot;, $!{entityName});&#10;    }&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @PostMapping&#10;    public Result&lt;Void&gt; save$!{entityClass}(@RequestBody $!{entityClass}Dto dto){&#10;        $!{serviceName}.save$!{entityClass}(dto);&#10;        return Result.success(&quot;新增$!{tableComment}成功&quot;);&#10;    }&#10;&#10;    /**&#10;     * 修改$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public Result&lt;Void&gt; update$!{entityClass}(@PathVariable(&quot;id&quot;) $!pk.shortType id, @RequestBody $!{entityClass}Dto dto){&#10;        dto.setId(id);&#10;        $!{serviceName}.update$!{entityClass}(dto);&#10;        return Result.success(&quot;更新$!{tableComment}成功&quot;);&#10;    }&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return  Result&lt;rows&gt;&#10;     */&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public Result&lt;Void&gt; delete$!{entityClass}ById(@PathVariable(&quot;id&quot;) $!pk.shortType id){&#10;        $!{serviceName}.delete$!{entityClass}ById(id);&#10;        return Result.success(&quot;删除$!{tableComment}成功&quot;);&#10;    }&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param ids id集合&#10;     * @return  Result&lt;rows&gt;&#10;     */&#10;    @DeleteMapping(&quot;/batch/ids&quot;)&#10;    public Result&lt;Void&gt; batchDeleteByIds(@RequestBody List&lt;$!pk.shortType&gt; ids){&#10;        $!{serviceName}.batchDeleteByIds(ids);&#10;        return Result.success(&quot;批量删除$!{tableComment}成功&quot;);&#10;    }&#10;&#10;}" />
                    <option name="name" value="controller.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Mapper&quot;))&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapper&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapper;&#10;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import $!{tableInfo.savePackageName}.pojo.$!{tableInfo.name};&#10;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;Mapper接口&quot;)&#10;public interface $!{tableName}{&#10;    &#10;    /**&#10;     * 查询所有$!{tableComment}&#10;     *&#10;     * @return List&lt;$!{tableInfo.name}&gt;&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; select$!{tableInfo.name}All();&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return List&lt;$!{tableInfo.name}&gt;&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; select$!{tableInfo.name}List($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return $!{tableInfo.name}&#10;     */&#10;    $!{tableInfo.name} select$!{tableInfo.name}ById($!pk.shortType id);&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param $!{entityName} $!{tableComment}信息&#10;     * @return rows&#10;     */&#10;    int insert$!{tableInfo.name}($!{tableInfo.name} $!{entityName});&#10;&#10;    /**&#10;     * 修改$!{tableComment}信息&#10;     *&#10;     * @param $!{entityName} $!{tableComment}信息&#10;     * @return rows&#10;     */&#10;    int update$!{tableInfo.name}ById($!{tableInfo.name} $!{entityName});&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return rows&#10;     */&#10;    int delete$!{tableInfo.name}ById($!pk.shortType id);&#10;&#10;    /**&#10;     * 根据id集合批量删除&#10;     *&#10;     * @param ids id集合&#10;     * @return rows&#10;     */&#10;    int batchDeleteByIds(List&lt;$!pk.shortType&gt; ids);&#10;}" />
                    <option name="name" value="mapper.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Feign&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/feign&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}feign;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.common.entity.Result;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import $!{tableInfo.savePackageName}.pojo.$!{tableInfo.name};&#10;import org.springframework.cloud.openfeign.FeignClient;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;feign服务接口&quot;)&#10;@FeignClient(name=&quot;$!{entityName}-service&quot;, path=&quot;/api/v1/$!{entityName}s&quot;)&#10;public interface $!{tableName} {&#10;    &#10;    /**&#10;     * 查询所有$!{tableComment}&#10;     *&#10;     * @return Result&lt;List&lt;$!{tableInfo.name}&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/all&quot;)&#10;    Result&lt;List&lt;$!{tableInfo.name}&gt;&gt; get$!{tableInfo.name}All();&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return Result&lt;List&lt;$!{tableInfo.name}&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/list&quot;)&#10;    Result&lt;List&lt;$!{tableInfo.name}&gt;&gt; get$!{tableInfo.name}List(@RequestParam $!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param dto 查询条件&#10;     * @return Result&lt;PageResult&lt;$!{tableInfo.name}&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/page&quot;)&#10;    Result&lt;PageResult&lt;$!{tableInfo.name}&gt;&gt; get$!{tableInfo.name}PageList(@RequestParam $!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return Result&lt;$!{tableInfo.name}&gt;&#10;     */&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    Result&lt;$!{tableInfo.name}&gt; get$!{tableInfo.name}ById(@PathVariable(&quot;id&quot;) $!pk.shortType id);&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dto $!{tableInfo.comment}信息&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @PostMapping&#10;    Result&lt;Integer&gt; save$!{tableInfo.name}(@RequestBody $!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 修改$!{tableComment}信息&#10;     *&#10;     * @param dto $!{tableInfo.comment}信息&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    Result&lt;Integer&gt; update$!{tableInfo.name}(@PathVariable(&quot;id&quot;) $!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    Result&lt;Integer&gt; delete$!{tableInfo.name}ById(@PathVariable(&quot;id&quot;) $!pk.shortType id);&#10;&#10;    /**&#10;     * 根据id集合批量删除&#10;     *&#10;     * @param ids&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @DeleteMapping(&quot;/batch/ids&quot;)&#10;    Result&lt;Integer&gt; batchDeleteByIds(@RequestBody List&lt;$!pk.shortType&gt; ids);&#10;}" />
                    <option name="name" value="feign.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入mybatis支持&#10;$!init&#10;$!mybatisSupport&#10;&#10;##定义初始变量&#10;#set($tableName = $tableInfo.obj.name)&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;&#10;##设置保存名称与保存位置&#10;$!callback.setFileName($tool.append($!{tableInfo.name}, &quot;Mapper.xml&quot;))&#10;$!callback.setSavePath($tool.append($modulePath, &quot;/src/main/resources/mappers&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&#10;&lt;mapper namespace=&quot;$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper&quot;&gt;&#10;    &lt;resultMap type=&quot;$!{tableInfo.savePackageName}.pojo.$!{tableInfo.name}&quot; id=&quot;BaseResultMap&quot;&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.obj.name} == &quot;is_deleted&quot;)&#10;        &lt;result property=&quot;deleted&quot; column=&quot;$!column.obj.name&quot; jdbcType=&quot;$!column.ext.jdbcType&quot;/&gt;&#10;#else&#10;        &lt;result property=&quot;$!column.name&quot; column=&quot;$!column.obj.name&quot; jdbcType=&quot;$!column.ext.jdbcType&quot;/&gt;&#10;#end&#10;#end&#10;    &lt;/resultMap&gt;&#10;&#10;    &lt;sql id=&quot;BaseSql&quot;&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{velocityCount} == $!{tableInfo.fullColumn.size()})&#10;        $!{column.obj.name}&#10;    #else&#10;        $!{column.obj.name},&#10;#end&#10;#end&#10;&lt;/sql&gt;&#10;&#10;    &lt;sql id=&quot;BaseWhere&quot;&gt;&#10;        &lt;where&gt;&#10;        #foreach($column in $tableInfo.fullColumn)&#10;    #if($!{column.name} == &quot;isDeleted&quot;)&#10;&lt;if test=&quot;deleted!=null&quot;&gt;&#10;    #elseif($!{column.type} == &quot;java.lang.String&quot;)&#10;&lt;if test=&quot;$!{column.name}!=null and $!{column.name}!=''&quot;&gt;&#10;    #else&#10;&lt;if test=&quot;$!{column.name}!=null&quot;&gt;&#10;    #end&#10;#if($!{column.name} == &quot;isDeleted&quot;)&#10;            and is_deleted = #{deleted}}&#10;    #else&#10;            and $!{column.obj.name} = #{$!{column.name}}&#10;    #end&#10;        &lt;/if&gt;&#10;        #end&#10;&lt;/where&gt;&#10;    &lt;/sql&gt;&#10;&#10;    &lt;select id=&quot;select$!{tableInfo.name}All&quot; resultMap=&quot;BaseResultMap&quot;&gt;&#10;&#9;&#9;select &lt;include refid=&quot;BaseSql&quot;/&gt;&#10;&#9;&#9;from $!{tableName}&#10;&#9;&lt;/select&gt;&#10;&#10;&#9;&lt;select id=&quot;select$!{tableInfo.name}List&quot; resultMap=&quot;BaseResultMap&quot;&gt;&#10;&#9;&#9;select &lt;include refid=&quot;BaseSql&quot;/&gt;&#10;&#9;&#9;from $!{tableName}&#10;&#9;&#9;&lt;include refid=&quot;BaseWhere&quot;/&gt;&#10;&#9;&lt;/select&gt;&#10;&#10;&#9;&lt;select id=&quot;select$!{tableInfo.name}ById&quot; resultMap=&quot;BaseResultMap&quot;&gt;&#10;&#9;&#9;select &lt;include refid=&quot;BaseSql&quot;/&gt;&#10;&#9;&#9;from $!{tableName}&#10;&#9;&#9;where id = #{id}&#10;&#9;&lt;/select&gt;&#10;&#10;&#9;&lt;insert id=&quot;insert$!{tableInfo.name}&quot; parameterType=&quot;$!{tableInfo.savePackageName}.pojo.$!{tableInfo.name}&quot;&#10;&#9;    useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;&#10;&#9;    insert into $!{tableName}&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if($!{velocityCount} == $!{tableInfo.fullColumn.size()})&#10;        $!{column.obj.name})&#10;    #elseif($!{velocityCount} == 1)&#10;            ($!{column.obj.name},&#10;    #else&#10;        $!{column.obj.name},&#10;    #end&#10;#end&#10;&#9;values&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if($!{velocityCount} == $!{tableInfo.fullColumn.size()})&#10;        #{$!{column.name}})&#10;    #elseif($!{velocityCount} == 1)&#10;            (#{$!{column.name}},&#10;    #else&#10;#if($!{column.name} == &quot;isDeleted&quot;)&#10;        #{deleted},&#10;#else&#10;        #{$!{column.name}},&#10;#end&#10;    #end&#10;#end&#10;&lt;/insert&gt;&#10;    &#10;    &lt;update id=&quot;update$!{tableInfo.name}ById&quot; parameterType=&quot;$!{tableInfo.savePackageName}.pojo.$!{tableInfo.name}&quot;&gt;&#10;&#9;    update $!{tableName}&#10;&#9;    &lt;set&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.name} == &quot;isDeleted&quot;)&#10;            &lt;if test=&quot;deleted!=null&quot;&gt;&#10;                is_deleted = #{deleted},&#10;            &lt;/if&gt;    &#10;#elseif($!{column.name} != &quot;id&quot;)&#10;    #if($!{column.type} == &quot;java.lang.String&quot;)&#10;        &lt;if test=&quot;$!{column.name}!=null and $!{column.name}!=''&quot;&gt;&#10;&#9;#else&#10;&#9;    &lt;if test=&quot;$!{column.name}!=null&quot;&gt;&#10;&#9;#end&#10;            $!{column.obj.name} = #{$!{column.name}},&#10;&#9;        &lt;/if&gt;&#10;#end&#10;#end&#10;        &lt;/set&gt;&#10;&#9;    where id = #{id}&#10;&#9;&lt;/update&gt;&#10;&#10;&#9;&lt;delete id=&quot;delete$!{tableInfo.name}ById&quot;&gt;&#10;&#9;&#9;delete from $!{tableName}&#10;&#9;&#9;where id = #{id}&#10;&#9;&lt;/delete&gt;&#10;&#10;&#9;&lt;delete id=&quot;batchDeleteByIds&quot;&gt;&#10;&#9;&#9;delete from $!{tableName}&#10;&#9;&#9;where id in&#10;&#9;&#9;&lt;foreach collection=&quot;list&quot; item=&quot;id&quot; open=&quot;(&quot; close=&quot;)&quot; separator=&quot;,&quot;&gt;&#10;&#9;&#9;&#9;#{id}&#10;&#9;&#9;&lt;/foreach&gt;&#10;&#9;&lt;/delete&gt;&#10;&lt;/mapper&gt;" />
                    <option name="name" value="mapper.xml" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;Result.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import $!{tableInfo.savePackageName}.common.enums.ResultCodeEnum;&#10;import lombok.Data;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;#classComment(&quot;响应结果封装实体&quot;) &#10;@Data&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class Result&lt;T&gt; {&#10;    &#10;    private boolean success;//是否成功&#10;    private Integer code;//返回码&#10;    private String message;//返回消息&#10;    private T data;//返回数据&#10;&#10;    private Map&lt;String,Object&gt; extend;//扩展数据&#10;    &#10;    public Result() {&#10;    }&#10;&#10;    public Result(boolean flag, Integer code, String message, T data) {&#10;        this.success = flag;&#10;        this.code = code;&#10;        this.message = message;&#10;        this.data = data;&#10;    }&#10;&#10;    public Result(boolean flag, Integer code, String message) {&#10;        this.success = flag;&#10;        this.code = code;&#10;        this.message = message;&#10;    }&#10;&#10;    /**&#10;     * 响应成功&#10;     *&#10;     * @param message 提示信息&#10;     * @return Result&lt;Void&gt;&#10;     */&#10;    public static Result&lt;Void&gt; success(String message){&#10;        return new Result&lt;&gt;(true, ResultCodeEnum.SUCCESS.getCode(), message);&#10;    }&#10;&#10;    /**&#10;     * 响应成功&#10;     *&#10;     * @param message 提示信息&#10;     * @param data 响应数据&#10;     * @return Result&lt;T&gt;&#10;     */&#10;    public static &lt;T&gt; Result&lt;T&gt; success(String message, T data){&#10;        return new Result&lt;&gt;(true, ResultCodeEnum.SUCCESS.getCode(), message, data);&#10;    }&#10;&#10;    /**&#10;     * 响应失败&#10;     *&#10;     * @param code 状态码&#10;     * @param message 提示信息&#10;     * @return Result&lt;Void&gt;&#10;     */&#10;    public static &lt;T&gt; Result&lt;T&gt; error(Integer code, String message){&#10;        return new Result&lt;&gt;(false, code, message, null);&#10;    }&#10;&#10;    /**&#10;     * 扩展数据&#10;     *&#10;     * @param key key&#10;     * @param value value&#10;     * @return Result&#10;     */&#10;    public Result&lt;T&gt; extend(String key, Object value){&#10;        if(null == extend){&#10;            extend = new HashMap&lt;&gt;();&#10;        }&#10;        this.extend.put(key, value);&#10;        return this;&#10;    }&#10;}" />
                    <option name="name" value="result.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;PageResult.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.util.List;&#10;&#10;#classComment(&quot;分页结果实体&quot;) &#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class PageResult&lt;T&gt; {&#10;&#10;    private Long total;//总记录数&#10;    private Integer totalPage;// 总页数&#10;    private List&lt;T&gt; rows;//记录&#10;    private Integer page;&#10;    private Integer size;&#10;    private Boolean hasNext;&#10;    private Boolean hasPrevious;&#10;&#10;    public PageResult(Long total, Integer totalPage, List&lt;T&gt; rows) {&#10;        this.total = total;&#10;        this.totalPage = totalPage;&#10;        this.rows = rows;&#10;    }&#10;}" />
                    <option name="name" value="pageResult.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;PageRequest.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import lombok.Setter;&#10;import java.io.Serializable;&#10;&#10;#classComment(&quot;分页请求基类&quot;) &#10;@Setter&#10;public class PageRequest implements Serializable{&#10;    &#10;    private Integer size;&#10;    private Integer page;&#10;    private String orderBy;&#10;&#10;    public Integer getSize() {&#10;        if (this.size == null || this.size &lt; 0 || this.size &gt; 50){&#10;            setSize(10);&#10;        }&#10;        return size;&#10;    }&#10;&#10;    public Integer getPage() {&#10;        if (this.page == null || this.page &lt; 0) {&#10;            setPage(1);&#10;        }&#10;        return page;&#10;    }&#10;&#10;    public String getOrderBy() {&#10;        return orderBy;&#10;    }&#10;}" />
                    <option name="name" value="pageRequest.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ResultCodeEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;import lombok.Getter;&#10;&#10;#classComment(&quot;响应状态码&quot;) &#10;@Getter&#10;public enum ResultCodeEnum {&#10;&#10;    SUCCESS(20000,&quot;成功&quot;),&#10;    PARAM_ERROR(21003, &quot;参数不正确&quot;),&#10;    ;&#10;&#10;    private final Integer code;&#10;&#10;&#9;private final String message;&#10;&#9;&#10;&#9;ResultCodeEnum(Integer code, String message) {&#10;&#9;&#9;this.code = code;&#10;&#9;&#9;this.message = message;&#10;&#9;}&#10;}" />
                    <option name="name" value="resultCodeEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($entityClass = $tableInfo.name.toUpperCase())&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;##设置回调&#10;$!callback.setFileName(&quot;ExceptionEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.exception.ServiceExceptionAssert;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import lombok.NoArgsConstructor;&#10;&#10;#classComment(&quot;异常枚举定义&quot;) &#10;@Getter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public enum  ExceptionEnum implements ServiceExceptionAssert {&#10;    &#10;    INTERNAL_SERVER_ERROR(500, &quot;服务器打酱油了，请稍后再试~&quot;),&#10;    USERNAME_NOT_FOUND(400,&quot;用户名为空&quot;),&#10;    PASSWORD_NOT_FOUND(400,&quot;密码为空&quot;),&#10;    #foreach($table in $tableInfoList)&#10;$table.obj.name.toUpperCase()_IS_NOT_EXIST(400,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)不存在&quot;),&#10;    $table.obj.name.toUpperCase()_SAVE_ERROR(500,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)保存失败&quot;),&#10;    $table.obj.name.toUpperCase()_UPDATE_ERROR(500,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)更新失败&quot;),&#10;    $table.obj.name.toUpperCase()_DELETE_ERROR(500,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)删除失败&quot;),&#10;    #end&#10;;&#10;&#10;    private Integer code;&#10;    private String message;&#10;}" />
                    <option name="name" value="exceptionEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;GlobalExceptionHandler.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.Result;&#10;import $!{tableInfo.savePackageName}.common.enums.IExceptionEnum;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.apache.commons.lang3.StringUtils;&#10;import org.springframework.context.support.DefaultMessageSourceResolvable;&#10;import org.springframework.http.HttpHeaders;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.http.converter.HttpMessageNotReadableException;&#10;import org.springframework.lang.Nullable;&#10;import org.springframework.validation.BindException;&#10;import org.springframework.validation.FieldError;&#10;import org.springframework.web.bind.MethodArgumentNotValidException;&#10;import org.springframework.web.bind.annotation.ExceptionHandler;&#10;import org.springframework.web.bind.annotation.RestControllerAdvice;&#10;import org.springframework.web.context.request.WebRequest;&#10;import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;&#10;import org.springframework.web.util.WebUtils;&#10;&#10;import javax.validation.ConstraintViolationException;&#10;import java.nio.file.AccessDeniedException;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;    &#10;#classComment(&quot;统一异常处理类&quot;) &#10;@Slf4j&#10;@RestControllerAdvice&#10;public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {&#10;&#10;    /**&#10;     * 处理单个参数校验异常&#10;     *&#10;     * @param e ConstraintViolationException&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(ConstraintViolationException.class)&#10;    public ResponseEntity&lt;Object&gt; handleConstraintViolationException(ConstraintViolationException e) {&#10;        String message = e.getMessage();&#10;        message = StringUtils.substringAfterLast(message,&quot;:&quot;).trim();&#10;        log.error(&quot;[统一异常]单个参数校验异常，异常信息:{}&quot;,message);&#10;&#10;        // 生成返回结果&#10;        return createResponseResponseEntity(message, HttpStatus.BAD_REQUEST.value());&#10;    }&#10;&#10;    /**&#10;     * 自定义异常处理&#10;     * @param ex&#10;     * @param body&#10;     * @param headers&#10;     * @param status&#10;     * @param request&#10;     * @return&#10;     */&#10;    @Override&#10;    protected ResponseEntity&lt;Object&gt; handleExceptionInternal(&#10;            Exception ex, @Nullable Object body, HttpHeaders headers, HttpStatus status, WebRequest request) {&#10;        String msg=&quot;&quot;;&#10;        if(ex instanceof BindException){&#10;            //处理普通类型Content-Type参数校验异常&#10;            List&lt;FieldError&gt; fieldErrors = ((BindException)ex).getFieldErrors();&#10;            msg = fieldErrors.stream().map(DefaultMessageSourceResolvable::getDefaultMessage)&#10;                    .collect(Collectors.joining(&quot;|&quot;));&#10;            log.error(&quot;[统一异常]对象参数校验异常，异常信息:{}&quot;, msg);&#10;        }else if(ex instanceof MethodArgumentNotValidException) {&#10;            //处理Content-Type=application/json的参数校验异常&#10;            List&lt;FieldError&gt; fieldErrors = ((MethodArgumentNotValidException) ex).getBindingResult().getFieldErrors();&#10;            msg = fieldErrors.stream().map(DefaultMessageSourceResolvable::getDefaultMessage)&#10;                    .collect(Collectors.joining(&quot;|&quot;));&#10;            log.error(&quot;[统一异常]对象参数校验异常，异常信息:{}&quot;,msg);&#10;        } else if (ex instanceof HttpMessageNotReadableException){&#10;            //处理请求体为空异常&#10;            String message = ex.getMessage();&#10;            log.error(&quot;[统一异常]参数错误异常，异常信息，{}&quot;, message);&#10;            if(message.contains(&quot;JSON parse error&quot;)) {&#10;                String paramName = StringUtils.substringBetween(message, &quot;[\&quot;&quot;, &quot;\&quot;]&quot;);&#10;                msg = paramName + &quot;: &quot; + StringUtils.substring(message,&#10;                        message.indexOf(&quot;problem:&quot;) + 8, message.indexOf(&quot;;&quot;)).trim();&#10;            } else if (message.contains(&quot;Required request body is missing&quot;)){&#10;                msg = StringUtils.substringBefore(message,&quot;:&quot;).trim();&#10;            } else {&#10;                msg = StringUtils.substringBefore(message,&quot;;&quot;).trim();&#10;            }&#10;        }else {&#10;            //其他异常&#10;            msg = ex.getMessage();&#10;        }&#10;&#10;        if (HttpStatus.INTERNAL_SERVER_ERROR.equals(status)) {&#10;            request.setAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE, ex, WebRequest.SCOPE_REQUEST);&#10;        }&#10;        log.error(&quot;[统一异常]{}异常，异常信息:{}&quot;, ex.getClass().getSimpleName(), msg);&#10;        return createResponseResponseEntity(msg, status.value());&#10;    }&#10;&#10;    /**&#10;     * 处理403异常&#10;     *&#10;     * @param e AccessDeniedException&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(AccessDeniedException.class)&#10;    public ResponseEntity&lt;Object&gt; handleAccessDeniedException(AccessDeniedException e) {&#10;        String message = e.getMessage();&#10;        log.error(&quot;[统一异常]拒绝访问异常，异常信息，{}&quot;, message);&#10;&#10;        // 生成返回结果&#10;        return createResponseResponseEntity(message, HttpStatus.FORBIDDEN.value());&#10;    }&#10;&#10;    /**&#10;     * 处理自定义业务异常&#10;     *&#10;     * @param cause 异常&#10;     * @param e ServiceException&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(ServiceException.class)&#10;    public ResponseEntity&lt;Object&gt; handleException(Throwable cause, ServiceException e){&#10;        String message;&#10;        int code;&#10;        IExceptionEnum exceptionEnum = e.getExceptionEnum();&#10;        if(null != exceptionEnum){&#10;            message = exceptionEnum.getMessage();&#10;            code = exceptionEnum.getCode();&#10;        }else {&#10;            message = e.getMessage();&#10;            code = e.getCode();&#10;        }&#10;        log.error(&quot;[统一异常]ServiceException异常，异常信息:{}&quot;, message);&#10;        &#10;        // 记录堆栈信息&#10;        final Writer result = new StringWriter();&#10;        final PrintWriter printWriter = new PrintWriter(result);&#10;        cause.printStackTrace(printWriter);&#10;        log.error(&quot;[统一异常]其他异常，堆栈信息：{}&quot;, result);&#10;&#10;        // 生成返回结果&#10;        return Result.error(code, message);&#10;    }&#10;&#10;    /**&#10;     * 其他异常统一处理&#10;     *&#10;     * @param cause 异常&#10;     * @param e Exception&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(Exception.class)&#10;    public ResponseEntity&lt;Object&gt; exceptionHandler(Throwable cause, Exception e) {&#10;        log.error(&quot;[统一异常]其他异常，异常:{}&quot;, e.getClass().toString());&#10;        String message = e.getMessage();&#10;        log.error(&quot;[统一异常]其他异常，异常信息，{}&quot;, message);&#10;        &#10;        // 记录堆栈信息&#10;        final Writer result = new StringWriter();&#10;        final PrintWriter printWriter = new PrintWriter(result);&#10;        cause.printStackTrace(printWriter);&#10;        log.error(&quot;[统一异常]其他异常，堆栈信息：{}&quot;, result);&#10;&#10;        // 生成返回结果&#10;        return Result.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), message);&#10;    }&#10;&#10;    /**&#10;     * 返回异常处理结果&#10;     *&#10;     * @param msg 异常信息&#10;     * @param status 状态码&#10;     * @return ResponseEntity&#10;     */&#10;    private ResponseEntity&lt;Object&gt; createResponseResponseEntity(String msg, int status) {&#10;        // 生成返回结果&#10;        Result&lt;Object&gt; result = Result.error(status, msg);&#10;        return ResponseEntity.status(status).body(result);&#10;    }&#10;}" />
                    <option name="name" value="globalExceptionHandler.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ServiceException.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.enums.IExceptionEnum;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import lombok.NoArgsConstructor;&#10;&#10;#classComment(&quot;自定义业务异常&quot;) &#10;@Getter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class ServiceException extends RuntimeException{&#10;&#10;    private IExceptionEnum exceptionEnum;&#10;&#10;    private int code;&#10;&#10;    private String msg;&#10;&#10;    public ServiceException(IExceptionEnum exceptionEnum) {&#10;        super(exceptionEnum.getMessage());&#10;        this.exceptionEnum = exceptionEnum;&#10;    }&#10;&#10;    public ServiceException(int code, String msg) {&#10;        super(msg);&#10;        this.code = code;&#10;        this.msg = msg;&#10;    }&#10;}" />
                    <option name="name" value="serviceException.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;Assert.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import java.util.function.Predicate;&#10;&#10;#classComment(&quot;异常断言接口&quot;) &#10;public interface Assert {&#10;&#10;    /**&#10;     * 创建异常&#10;     * @return {@link RuntimeException}&#10;     */&#10;    RuntimeException newException();&#10;&#10;    /**&#10;     * 创建异常&#10;     * @param code 错误码&#10;     * @param msg 错误提示&#10;     * @return {@link RuntimeException}&#10;     */&#10;    RuntimeException newException(int code, String msg);&#10;&#10;    /**&#10;     * 如predicate为true，则抛出异常&#10;     *&#10;     * @param predicate {@link Predicate}&#10;     * @param args 待判断对象&#10;     */&#10;    default &lt;T&gt; void assertException(Predicate&lt;? super T&gt; predicate, T args) {&#10;        if (predicate.test(args)) {&#10;            throw newException();&#10;        }&#10;    }&#10;    &#10;     /**&#10;     * 抛出自定义异常&#10;     *&#10;     */&#10;    default &lt;T&gt; void assertException() {&#10;        throw newException();&#10;    }&#10;&#10;    /**&#10;     * 抛出自定义异常&#10;     *&#10;     * @param code 错误码&#10;     * @param msg 错误提示&#10;     */&#10;    default void assertException(int code, String msg) {&#10;        throw newException(code, msg);&#10;    }&#10;}" />
                    <option name="name" value="assert.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ServiceExceptionAssert.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.enums.IExceptionEnum;&#10;&#10;#classComment(&quot;业务异常断言接口&quot;) &#10;public interface ServiceExceptionAssert extends IExceptionEnum, Assert{&#10;&#10;    /**&#10;     * 创建异常&#10;     *&#10;     * @return {@link RuntimeException}&#10;     */&#10;    @Override&#10;    default RuntimeException newException(){&#10;        return new ServiceException(this);&#10;    }&#10;&#10;    /**&#10;     * 创建异常&#10;     *&#10;     * @param code 错误码&#10;     * @param msg 错误提示&#10;     * @return {@link RuntimeException}&#10;     */&#10;    @Override&#10;    default RuntimeException newException(int code, String msg){&#10;        return new ServiceException(code, msg);&#10;    }&#10;}" />
                    <option name="name" value="serviceExceptionAssert.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ServletResponseStatusEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import org.springframework.http.HttpStatus;&#10;&#10;import java.util.Objects;&#10;import java.util.stream.Stream;&#10;&#10;#classComment(&quot;servlet异常和状态码枚举&quot;) &#10;@Getter&#10;@AllArgsConstructor&#10;public enum ServletResponseStatusEnum {&#10;&#10;    HttpRequestMethodNotSupportedException(&quot;HttpRequestMethodNotSupportedException&quot;,&#10;            HttpStatus.METHOD_NOT_ALLOWED.value()),&#10;    HttpMediaTypeNotSupportedException(&quot;HttpMediaTypeNotSupportedException&quot;,&#10;            HttpStatus.UNSUPPORTED_MEDIA_TYPE.value()),&#10;    HttpMediaTypeNotAcceptableException(&quot;HttpMediaTypeNotAcceptableException&quot;,&#10;            HttpStatus.NOT_ACCEPTABLE.value()),&#10;    MissingPathVariableException(&quot;MissingPathVariableException&quot;,&#10;            HttpStatus.INTERNAL_SERVER_ERROR.value()),&#10;    MissingServletRequestParameterException(&quot;MissingServletRequestParameterException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    ServletRequestBindingException(&quot;ServletRequestBindingException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    ConversionNotSupportedException(&quot;ConversionNotSupportedException&quot;,&#10;            HttpStatus.INTERNAL_SERVER_ERROR.value()),&#10;    TypeMismatchException(&quot;TypeMismatchException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    HttpMessageNotReadableException(&quot;HttpMessageNotReadableException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    HttpMessageNotWritableException(&quot;HttpMessageNotWritableException&quot;,&#10;            HttpStatus.INTERNAL_SERVER_ERROR.value()),&#10;    MethodArgumentNotValidException(&quot;MethodArgumentNotValidException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    MissingServletRequestPartException(&quot;MissingServletRequestPartException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    NoHandlerFoundException(&quot;NoHandlerFoundException&quot;,&#10;            HttpStatus.NOT_FOUND.value()),&#10;    AsyncRequestTimeoutException(&quot;AsyncRequestTimeoutException&quot;,&#10;            HttpStatus.SERVICE_UNAVAILABLE.value()),&#10;    MethodArgumentTypeMismatchException(&quot;MethodArgumentTypeMismatchException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    ;&#10;&#10;    private final String className;&#10;    private final Integer status;&#10;&#10;    public static ServletResponseStatusEnum of(String className){&#10;        Objects.requireNonNull(className);&#10;&#10;        return Stream.of(values())&#10;                .filter(bean -&gt; bean.getClassName().equals(className))&#10;                .findAny()&#10;                .orElseThrow(() -&gt; new IllegalArgumentException(className + &quot; not exists&quot;));&#10;    }&#10;}" />
                    <option name="name" value="servletResponseStatusEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;DefaultErrorController.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.enums.ExceptionEnum;&#10;import org.springframework.boot.web.servlet.error.ErrorController;&#10;import org.springframework.stereotype.Controller;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;&#10;import javax.servlet.http.HttpServletRequest;&#10;&#10;#classComment(&quot;默认错误处理控制器&quot;) &#10;@Controller&#10;public class DefaultErrorController implements ErrorController {&#10;&#10;    @RequestMapping(&quot;/error&quot;)&#10;    public String handleError(HttpServletRequest request){&#10;        //获取statusCode:401,404,500&#10;        Integer statusCode = (Integer) request.getAttribute(&quot;javax.servlet.error.status_code&quot;);&#10;        if(statusCode == 500){&#10;            throw new ServiceException(ExceptionEnum.INTERNAL_SERVER_ERROR);&#10;        }else if(statusCode == 404){&#10;            throw new ServiceException(404, &quot;Not Found&quot;);&#10;        }else if(statusCode == 403){&#10;            throw new ServiceException(403, &quot;Forbidden&quot;);&#10;        }else{&#10;            throw new ServiceException(ExceptionEnum.INTERNAL_SERVER_ERROR);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String getErrorPath() {&#10;        return &quot;/error&quot;;&#10;    }&#10;}" />
                    <option name="name" value="defaultErrorController.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;IExceptionEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;#classComment(&quot;异常枚举父类&quot;) &#10;public interface IExceptionEnum {&#10;&#10;    Integer getCode();&#10;&#10;    String getMessage();&#10;}" />
                    <option name="name" value="iExceptionEnum.java" />
                  </Template>
                </list>
              </option>
              <option name="name" value="mybatis" />
            </TemplateGroup>
          </value>
        </entry>
        <entry key="mybatis-plus">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##使用宏定义设置回调（保存位置与文件后缀）&#10;#save(&quot;/pojo&quot;, &quot;.java&quot;)&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;pojo&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import $!{tableInfo.savePackageName}.common.entity.BasePojo;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;import java.io.Serializable;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;实体&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;public class $!{tableInfo.name} extends BasePojo {&#10;    &#10;#foreach($column in $tableInfo.pkColumn)&#10;#if(${column.comment})&#10;    /**&#10;     * ${column.comment}&#10;     */&#10;#end&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;#foreach($column in $tableInfo.otherColumn)&#10;#if($!{column.obj.name} != &quot;create_by&quot; &amp;&amp; $!{column.obj.name} != &quot;create_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;update_by&quot; &amp;&amp; $!{column.obj.name} != &quot;update_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;is_deleted&quot;)&#10;#if(${column.comment})&#10;    /**&#10;     * ${column.comment}&#10;     */&#10;#end&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;&#10;#end&#10;#end&#10;}" />
                    <option name="name" value="pojo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Dto&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dto&quot;))&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dto;&#10;&#10;$!autoImport&#10;import $!{tableInfo.savePackageName}.common.entity.BaseDto;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;&#10;#tableComment(&quot;Dto&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;public class $!{tableName} extends BaseDto {&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.obj.name} != &quot;create_by&quot; &amp;&amp; $!{column.obj.name} != &quot;create_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;update_by&quot; &amp;&amp; $!{column.obj.name} != &quot;update_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;is_deleted&quot;)&#10;#if(${column.comment})&#10;    /** &#10;     * ${column.comment}&#10;     */&#10;#end&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    &#10;#end&#10;#end&#10;}" />
                    <option name="name" value="dto.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Vo&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/vo&quot;))&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}vo;&#10;&#10;$!autoImport&#10;import $!{tableInfo.savePackageName}.common.entity.BaseVo;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;import io.swagger.annotations.ApiModel;&#10;import io.swagger.annotations.ApiModelProperty;&#10;&#10;#tableComment(&quot;Vo&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;@ApiModel(value=&quot;$!{tableName}&quot;,description=&quot;展示$!{tableComment}实体&quot;)&#10;public class $!{tableName} extends BaseVo {&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.obj.name} != &quot;create_by&quot; &amp;&amp; $!{column.obj.name} != &quot;create_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;update_by&quot; &amp;&amp; $!{column.obj.name} != &quot;update_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;is_deleted&quot;)&#10;#if(${column.comment})&#10;    /** &#10;     * ${column.comment}&#10;     */&#10;#end&#10;    @ApiModelProperty(name = &quot;$!{column.name}&quot;, value = &quot;$!{column.comment}&quot;, required = false)&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    &#10;#end&#10;#end&#10;}" />
                    <option name="name" value="vo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Bo&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/bo&quot;))&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}bo;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.BaseBo;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;import io.swagger.annotations.ApiModel;&#10;import io.swagger.annotations.ApiModelProperty;&#10;&#10;#tableComment(&quot;Bo&quot;)&#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;@ApiModel(value=&quot;$!{tableName}&quot;,description=&quot;展示$!{tableComment}实体&quot;)&#10;public class $!{tableName} extends BaseBo {&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.obj.name} != &quot;create_by&quot; &amp;&amp; $!{column.obj.name} != &quot;create_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;update_by&quot; &amp;&amp; $!{column.obj.name} != &quot;update_time&quot; &amp;&amp;&#10;    $!{column.obj.name} != &quot;is_deleted&quot;)&#10;#if(${column.comment})&#10;    /** &#10;     * ${column.comment}&#10;     */&#10;#end&#10;    @ApiModelProperty(name = &quot;$!{column.name}&quot;, value = &quot;$!{column.comment}&quot;, required = false)&#10;#if($!{tool.getClsNameByFullName($column.type)} == &quot;Date&quot;)&#10;    private String $!{column.name};&#10;#else&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;#end&#10;#end&#10;}" />
                    <option name="name" value="bo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseBo.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import java.time.LocalDateTime;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;import io.swagger.annotations.ApiModel;&#10;import io.swagger.annotations.ApiModelProperty;&#10;&#10;#classComment(&quot;Bo实体基类&quot;) &#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;public class BaseBo extends PageRequest {&#10;&#10;    /** &#10;     * 开始时间 &#10;     */&#10;    @ApiModelProperty(name = &quot;startTime&quot;, value = &quot;开始时间&quot;, required = false)&#10;    private String startTime;&#10;&#10;    /** &#10;     * 结束时间 &#10;     */&#10;    @ApiModelProperty(name = &quot;endTime&quot;, value = &quot;结束时间&quot;, required = false)&#10;    private String endTime;&#10;    &#10;    /** &#10;     * 搜索值 &#10;     */&#10;    @ApiModelProperty(name = &quot;searchValue&quot;, value = &quot;搜索值&quot;, required = false)&#10;    private String searchValue;&#10;    &#10;    /** &#10;     * 创建者 &#10;     */&#10;    @ApiModelProperty(name = &quot;createBy&quot;, value = &quot;创建者&quot;, required = false)&#10;    private String createBy;&#10;&#10;    /** &#10;     * 创建时间 &#10;     */&#10;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    @ApiModelProperty(name = &quot;createTime&quot;, value = &quot;创建时间&quot;, required = false)&#10;    private LocalDateTime createTime;&#10;&#10;    /** &#10;     * 更新者 &#10;     */&#10;    @ApiModelProperty(name = &quot;updateBy&quot;, value = &quot;更新者&quot;, required = false)&#10;    private String updateBy;&#10;&#10;    /** &#10;     * 更新时间 &#10;     */&#10;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    @ApiModelProperty(name = &quot;updateTime&quot;, value = &quot;更新时间&quot;, required = false)&#10;    private LocalDateTime updateTime;&#10;}" />
                    <option name="name" value="baseBo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseDto.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import java.time.LocalDateTime;&#10;import lombok.Data;&#10;import lombok.EqualsAndHashCode;&#10;&#10;#classComment(&quot;Dto实体基类&quot;) &#10;@EqualsAndHashCode(callSuper = true)&#10;@Data&#10;public class BaseDto extends PageRequest {&#10;    &#10;    /** &#10;     * 开始时间 &#10;     */&#10;    private LocalDateTime startTime;&#10;    &#10;    /** &#10;     * 结束时间 &#10;     */&#10;    private LocalDateTime endTime;&#10;&#10;    /** &#10;     * 搜索值 &#10;     */&#10;    private String searchValue;&#10;&#10;    /** &#10;     * 数据权限 &#10;     */&#10;    private String dataScope;&#10;    &#10;    /** &#10;     * 创建者 &#10;     */&#10;    private String createBy;&#10;&#10;    /** &#10;     * 创建时间 &#10;     */&#10;    private LocalDateTime createTime;&#10;&#10;    /** &#10;     * 更新者 &#10;     */&#10;    private String updateBy;&#10;&#10;    /** &#10;     * 更新时间 &#10;     */&#10;    private LocalDateTime updateTime;&#10;}" />
                    <option name="name" value="baseDto.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseVo.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.fasterxml.jackson.annotation.JsonFormat;&#10;import java.time.LocalDateTime;&#10;import lombok.Data;&#10;import io.swagger.annotations.ApiModel;&#10;import io.swagger.annotations.ApiModelProperty;&#10;&#10;#classComment(&quot;Vo实体基类&quot;)&#10;@Data&#10;public class BaseVo {&#10;&#10;    /** &#10;     * 创建者 &#10;     */&#10;    @ApiModelProperty(name = &quot;createBy&quot;, value = &quot;创建者&quot;, required = false)&#10;    private String createBy;&#10;&#10;    /** &#10;     * 创建时间 &#10;     */&#10;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    @ApiModelProperty(name = &quot;createTime&quot;, value = &quot;创建时间&quot;, required = false)&#10;    private LocalDateTime createTime;&#10;&#10;    /** &#10;     * 更新者 &#10;     */&#10;    @ApiModelProperty(name = &quot;updateBy&quot;, value = &quot;更新者&quot;, required = false)&#10;    private String updateBy;&#10;&#10;    /** &#10;     * 更新时间 &#10;     */&#10;    @JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    @ApiModelProperty(name = &quot;updateTime&quot;, value = &quot;更新时间&quot;, required = false)&#10;    private LocalDateTime updateTime;&#10;}" />
                    <option name="name" value="baseVo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BasePojo.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.fasterxml.jackson.annotation.JsonFormat;&#10;import javax.persistence.Column;&#10;import java.time.LocalDateTime;&#10;import lombok.Data;&#10;&#10;#classComment(&quot;Pojo实体基类&quot;)&#10;@Data&#10;public class BasePojo {&#10;&#10;    /**&#10;     * 是否删除(1为删除，0为未删除)&#10;     */&#10;    @Column(name = &quot;is_deleted&quot;)&#10;    private Boolean deleted;&#10;&#10;    /** &#10;     * 创建者 &#10;     */&#10;    @Column(name = &quot;create_by&quot;)&#10;    private String createBy;&#10;&#10;    /** &#10;     * 创建时间 &#10;     */&#10;    @Column(name = &quot;create_time&quot;)&#10;    private LocalDateTime createTime;&#10;&#10;    /** &#10;     * 更新者 &#10;     */&#10;    @Column(name = &quot;update_by&quot;)&#10;    private String updateBy;&#10;&#10;    /** &#10;     * 更新时间 &#10;     */&#10;    @Column(name = &quot;update_time&quot;)&#10;    private LocalDateTime updateTime;&#10;}" />
                    <option name="name" value="basePojo.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;BaseMapping.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/mapping&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.mapping&quot;)&#10;&#10;import org.apache.commons.lang3.StringUtils;&#10;import org.mapstruct.InheritConfiguration;&#10;import org.mapstruct.InheritInverseConfiguration;&#10;import org.mapstruct.MapperConfig;&#10;import org.mapstruct.Mapping;&#10;&#10;import java.text.ParseException;&#10;import java.text.SimpleDateFormat;&#10;import java.time.LocalDate;&#10;import java.time.LocalDateTime;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.stream.Stream;&#10;&#10;#classComment(&quot;mapstruct通用类&quot;)&#10;@MapperConfig&#10;public interface BaseMapping&lt;SOURCE, TARGET&gt; {&#10;&#10;    /**&#10;     * 映射同名属性&#10;     */&#10;    @Mapping(target = &quot;createTime&quot;, dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10;    TARGET sourceToTarget(SOURCE var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性&#10;     */&#10;    @InheritInverseConfiguration(name = &quot;sourceToTarget&quot;)&#10;    SOURCE targetToSource(TARGET var1);&#10;&#10;    /**&#10;     * 映射同名属性，集合形式&#10;     */&#10;    @InheritConfiguration(name = &quot;sourceToTarget&quot;)&#10;    List&lt;TARGET&gt; sourceToTarget(List&lt;SOURCE&gt; var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性，集合形式&#10;     */&#10;    @InheritConfiguration(name = &quot;targetToSource&quot;)&#10;    List&lt;SOURCE&gt; targetToSource(List&lt;TARGET&gt; var1);&#10;&#10;    /**&#10;     * 映射同名属性，集合流形式&#10;     */&#10;    List&lt;TARGET&gt; sourceToTarget(Stream&lt;SOURCE&gt; stream);&#10;&#10;    /**&#10;     * 反向，映射同名属性，集合流形式&#10;     */&#10;    List&lt;SOURCE&gt; targetToSource(Stream&lt;TARGET&gt; stream);&#10;&#10;    default Date convertStr2Date(String str){&#10;        if(StringUtils.isNotBlank(str)){&#10;            SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);&#10;            try {&#10;                return format.parse(str);&#10;            } catch (ParseException e) {&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;&#10;        return null;&#10;    }&#10;    &#10;    default LocalDateTime convertStr2LocalDateTime(String str) {&#10;        if (StringUtils.isNotBlank(str)) {&#10;            return LocalDateTime.parse(str, DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;));&#10;        }&#10;&#10;        return null;&#10;    }&#10;&#10;    default LocalDate convertStr2LocalDate(String str) {&#10;        if (StringUtils.isNotBlank(str)) {&#10;            return LocalDate.parse(str, DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;));&#10;        }&#10;&#10;        return null;&#10;    }&#10;}" />
                    <option name="name" value="baseMapping.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;VoMapping&quot;))&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;#set($packageName = $tool.firstLowerCase($entityName.replace(&quot;sys&quot;,&quot;&quot;)))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapping/&quot;, $!{packageName}))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapping.$!{packageName};&#10;&#10;import $!{tableInfo.savePackageName}.common.mapping.BaseMapping;&#10;import $!{tableInfo.savePackageName}.pojo.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.vo.$!{tableInfo.name}Vo;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.Mapping;&#10;import org.mapstruct.Mappings;&#10;import org.mapstruct.ReportingPolicy;&#10;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;VoMapping&quot;)&#10;@Mapper(componentModel = &quot;spring&quot;, unmappedTargetPolicy = ReportingPolicy.IGNORE,&#10;        unmappedSourcePolicy = ReportingPolicy.IGNORE)&#10;public interface $!{tableName} extends BaseMapping&lt;$!{tableInfo.name}, $!{tableInfo.name}Vo&gt; {&#10;&#10;    /**&#10;     * 映射同名属性&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    $!{tableInfo.name}Vo sourceToTarget($!{tableInfo.name} var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    $!{tableInfo.name} targetToSource($!{tableInfo.name}Vo var1);&#10;&#10;    /**&#10;     * 映射同名属性，集合形式&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    List&lt;$!{tableInfo.name}Vo&gt; sourceToTarget(List&lt;$!{tableInfo.name}&gt; var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性，集合形式&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    List&lt;$!{tableInfo.name}&gt; targetToSource(List&lt;$!{tableInfo.name}Vo&gt; var1);&#10;}" />
                    <option name="name" value="voMapping.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;DtoMapping&quot;))&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;#set($packageName = $tool.firstLowerCase($entityName.replace(&quot;sys&quot;,&quot;&quot;)))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapping/&quot;, $!{packageName}))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapping.$!{packageName};&#10;&#10;import $!{tableInfo.savePackageName}.bo.$!{tableInfo.name}Bo;&#10;import $!{tableInfo.savePackageName}.common.mapping.BaseMapping;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.Mapping;&#10;import org.mapstruct.Mappings;&#10;import org.mapstruct.ReportingPolicy;&#10;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;DtoMapping&quot;)&#10;@Mapper(componentModel = &quot;spring&quot;, unmappedTargetPolicy = ReportingPolicy.IGNORE,&#10;        unmappedSourcePolicy = ReportingPolicy.IGNORE)&#10;public interface $!{tableName} extends BaseMapping&lt;$!{tableInfo.name}Bo, $!{tableInfo.name}Dto&gt; {&#10;&#10;    /**&#10;     * 映射同名属性&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    $!{tableInfo.name}Dto sourceToTarget($!{tableInfo.name}Bo var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    $!{tableInfo.name}Bo targetToSource($!{tableInfo.name}Dto var1);&#10;&#10;    /**&#10;     * 映射同名属性，集合形式&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    List&lt;$!{tableInfo.name}Dto&gt; sourceToTarget(List&lt;$!{tableInfo.name}Bo&gt; var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性，集合形式&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    List&lt;$!{tableInfo.name}Bo&gt; targetToSource(List&lt;$!{tableInfo.name}Dto&gt; var1);&#10;}" />
                    <option name="name" value="dtoMapping.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Mapping&quot;))&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;#set($packageName = $tool.firstLowerCase($entityName.replace(&quot;sys&quot;,&quot;&quot;)))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapping/&quot;, $!{packageName}))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapping.$!{packageName};&#10;&#10;import $!{tableInfo.savePackageName}.common.mapping.BaseMapping;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import $!{tableInfo.savePackageName}.pojo.$!{tableInfo.name};&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.ReportingPolicy;&#10;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;Pojo Mapping&quot;)&#10;@Mapper(componentModel = &quot;spring&quot;, unmappedTargetPolicy = ReportingPolicy.IGNORE,&#10;        unmappedSourcePolicy = ReportingPolicy.IGNORE)&#10;public interface $!{tableName} extends BaseMapping&lt;$!{tableInfo.name}Dto, $!{tableInfo.name}&gt; {&#10;&#10;    /**&#10;     * 映射同名属性&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    $!{tableInfo.name} sourceToTarget($!{tableInfo.name}Dto var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    $!{tableInfo.name}Dto targetToSource($!{tableInfo.name} var1);&#10;&#10;    /**&#10;     * 映射同名属性，集合形式&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    List&lt;$!{tableInfo.name}&gt; sourceToTarget(List&lt;$!{tableInfo.name}Dto&gt; var1);&#10;&#10;    /**&#10;     * 反向，映射同名属性，集合形式&#10;     *&#10;     * @param var1&#10;     */&#10;    @Override&#10;    List&lt;$!{tableInfo.name}Dto&gt; targetToSource(List&lt;$!{tableInfo.name}&gt; var1);&#10;}" />
                    <option name="name" value="pojoMapping.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import $!{tableInfo.savePackageName}.vo.$!{tableInfo.name}Vo;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;服务接口&quot;)&#10;public interface $!{tableName} {&#10;    &#10;    /**&#10;     * 查询所有$!{tableComment}&#10;     *&#10;     * @return List&lt;$!{tableInfo.name}Vo&gt;&#10;     */&#10;    List&lt;$!{tableInfo.name}Vo&gt; get$!{tableInfo.name}All();&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return List&lt;$!{tableInfo.name}Vo&gt;&#10;     */&#10;    List&lt;$!{tableInfo.name}Vo&gt; get$!{tableInfo.name}List($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param dto 查询条件&#10;     * @return PageResult&lt;$!{tableInfo.name}Vo&gt;&#10;     */&#10;    PageResult&lt;$!{tableInfo.name}Vo&gt; get$!{tableInfo.name}PageList($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return $!{tableInfo.name}Vo&#10;     */&#10;    $!{tableInfo.name}Vo get$!{tableInfo.name}ById($!pk.shortType id);&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dto $!{tableInfo.comment}信息&#10;     * @return rows&#10;     */&#10;    int save$!{tableInfo.name}($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 修改$!{tableComment}&#10;     *&#10;     * @param dto $!{tableInfo.comment}信息&#10;     * @return rows&#10;     */&#10;    int update$!{tableInfo.name}($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return rows&#10;     */&#10;    int delete$!{tableInfo.name}ById($!pk.shortType id);&#10;&#10;    /**&#10;     * 根据id集合批量删除&#10;     *&#10;     * @param ids id集合&#10;     * @return rows&#10;     */&#10;    int batchDeleteByIds(List&lt;$!pk.shortType&gt; ids);&#10;}" />
                    <option name="name" value="service.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($className = $tool.append($tableInfo.name, &quot;ServiceImpl&quot;))&#10;#set($entityClass = $tableInfo.name)&#10;#set($entityClassUpper = $tableInfo.obj.name.toUpperCase())&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($className, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service/impl&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;&#10;&#10;import com.github.pagehelper.PageHelper;&#10;import com.github.pagehelper.PageInfo;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.common.enums.ExceptionEnum;&#10;import $!{tableInfo.savePackageName}.pojo.$!{entityClass};&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import $!{tableInfo.savePackageName}.mapper.$!{entityClass}Mapper;&#10;import $!{tableInfo.savePackageName}.mapping.$!{packageName}.$!{entityClass}Mapping;&#10;import $!{tableInfo.savePackageName}.mapping.$!{packageName}.$!{entityClass}VoMapping;&#10;import $!{tableInfo.savePackageName}.service.$!{entityClass}Service;&#10;import $!{tableInfo.savePackageName}.vo.$!{tableInfo.name}Vo;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.apache.commons.lang3.StringUtils;&#10;import org.springframework.beans.BeanUtils;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.util.List;&#10;import java.util.Objects;&#10;&#10;#tableComment(&quot;服务实现类&quot;)&#10;@Slf4j&#10;@Service&#10;@RequiredArgsConstructor(onConstructor = @__(@Autowired))&#10;public class $!{className} implements $!{entityClass}Service {&#10;&#10;    private final $!{entityClass}Mapper $!{entityName}Mapper;&#10;    &#10;    private final $!{entityClass}VoMapping $!{entityName}VoMapping;&#10;&#10;    private final $!{entityClass}Mapping $!{entityName}Mapping;&#10;&#10;    /**&#10;     * 查询所有$!{tableComment}&#10;     *&#10;     * @return List&lt;$!{entityClass}Vo&gt;&#10;     */&#10;    @Override&#10;    public List&lt;$!{entityClass}Vo&gt; get$!{entityClass}All() {&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = $!{entityName}Mapper.select$!{entityClass}All();&#10;        return $!{entityName}VoMapping.sourceToTarget($!{entityName}List);&#10;    }&#10;    &#10;     /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return List&lt;$!{entityClass}Vo&gt;&#10;     */&#10;    @Override&#10;    public List&lt;$!{entityClass}Vo&gt; get$!{entityClass}List($!{entityClass}Dto dto) {&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = $!{entityName}Mapper.select$!{entityClass}List(dto);&#10;        return $!{entityName}VoMapping.sourceToTarget($!{entityName}List);&#10;    }&#10;    &#10;    /**&#10;     * 根据条件查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param dto 查询条件&#10;     * @return PageResult&lt;$!{entityClass}Vo&gt;&#10;     */&#10;    @Override&#10;    public PageResult&lt;$!{entityClass}Vo&gt; get$!{entityClass}PageList($!{entityClass}Dto dto) {&#10;        String orderBy;&#10;        if(StringUtils.isNotBlank(dto.getOrderBy())){&#10;            orderBy = dto.getOrderBy();&#10;        }else {&#10;            orderBy = &quot;id desc&quot;;&#10;        }&#10;        &#10;        PageHelper.startPage(dto.getPage(), dto.getSize());&#10;        PageHelper.orderBy(orderBy);&#10;        List&lt;$!{entityClass}&gt; $!{entityName}List = $!{entityName}Mapper.selectUserList(dto);&#10;        PageInfo&lt;$!{entityClass}&gt; pageInfo = PageInfo.of($!{entityName}List);&#10;&#10;        List&lt;$!{entityClass}Vo&gt; $!{entityName}VoList = $!{entityName}VoMapping.&#10;                                sourceToTarget(pageInfo.getList());&#10;        PageResult&lt;$!{entityClass}Vo&gt; pageResult = new PageResult&lt;&gt;(pageInfo.getTotal(), &#10;                    pageInfo.getPages(), $!{entityName}VoList);&#10;        pageResult.setPage(dto.getPage());&#10;        pageResult.setSize(dto.getSize());&#10;        pageResult.setHasNext(pageInfo.isHasNextPage());&#10;        pageResult.setHasPrevious(pageInfo.isHasPreviousPage());&#10;    &#10;        return pageResult;&#10;    }&#10;    &#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return $!{entityClass}Vo&#10;     */&#10;    @Override&#10;    public $!{entityClass}Vo get$!{entityClass}ById($!pk.shortType id) {&#10;        $!{entityClass} $!{entityName} = $!{entityName}Mapper.select$!{entityClass}ById(id);&#10;        &#10;        ExceptionEnum.$!{entityClassUpper}_IS_NOT_EXIST.&#10;                      assertException(Objects::isNull, $!{entityName});&#10;        &#10;        return $!{entityName}VoMapping.sourceToTarget($!{entityName});&#10;    }&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     * @return rows&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public int save$!{entityClass}($!{entityClass}Dto dto) {&#10;        $!{entityClass} $!{entityName} = $!{entityName}Mapping.sourceToTarget(dto);&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.name} == &quot;id&quot;)&#10;        $!{entityName}.setId(null);&#10;#end&#10;#end&#10;&#10;        int result = $!{entityName}Mapper.insert$!{entityClass}($!{entityName});&#10;        ExceptionEnum.$!{entityClassUpper}_SAVE_ERROR.&#10;                      assertException(num -&gt; num != 1, result);&#10;        &#10;        return result;&#10;    }&#10;&#10;    /**&#10;     * 修改$!{tableComment}&#10;     *&#10;     * @param dto $!{tableComment}信息&#10;     * @return rows&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public int update$!{entityClass}($!{entityClass}Dto dto) {&#10;        $!{entityClass} $!{entityName} = $!{entityName}Mapping.sourceToTarget(dto);&#10;&#10;        int result = $!{entityName}Mapper.update$!{entityClass}ById($!{entityName});&#10;        ExceptionEnum.$!{entityClassUpper}_UPDATE_ERROR.&#10;                      assertException(num -&gt; num != 1, result);&#10;        &#10;        return result;&#10;    }&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return rows&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public int delete$!{entityClass}ById($!pk.shortType id) {&#10;        int result = $!{entityName}Mapper.delete$!{entityClass}ById(id);&#10;        &#10;        ExceptionEnum.$!{entityClassUpper}_DELETE_ERROR.&#10;                      assertException(num -&gt; num != 1, result);&#10;        &#10;        return result;&#10;    }&#10;&#10;    /**&#10;     * 根据id集合批量删除$!{tableComment}&#10;     *&#10;     * @param ids id集合&#10;     * @return rows&#10;     */&#10;    @Override&#10;    @Transactional&#10;    public int batchDeleteByIds(List&lt;$!pk.shortType&gt; ids) {&#10;        int result = $!{entityName}Mapper.batchDeleteByIds(ids);&#10;        &#10;        ExceptionEnum.$!{entityClassUpper}_DELETE_ERROR.&#10;                      assertException(num -&gt; num != ids.size(), result);&#10;        &#10;        return result;&#10;    }&#10;}" />
                    <option name="name" value="serviceImpl.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($controllerClass = $tool.append($tableInfo.name, &quot;Controller&quot;))&#10;#set($entityClass = $tableInfo.name)&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($dtoName = $tool.append($tool.firstLowerCase($tableInfo.name),&quot;Dto&quot;))&#10;#set($dtoClass = $tool.append($tableInfo.name, &quot;Dto&quot;))&#10;#set($voClass = $tool.append($tableInfo.name, &quot;Vo&quot;))&#10;#set($voName = $tool.append($tableInfo.name, &quot;Vo&quot;))&#10;#set($serviceClass = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;#set($serviceName = $tool.append($tool.firstLowerCase($tableInfo.name),&quot;Service&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($controllerClass, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/controller&quot;))&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;&#10;&#10;import $!{tableInfo.savePackageName}.bo.$!{tableInfo.name}Bo;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.common.entity.Result;&#10;import $!{tableInfo.savePackageName}.dto.$dtoClass;&#10;import $!{tableInfo.savePackageName}.mapping.$!{packageName}.$!{entityClass}DtoMapping;&#10;import $!{tableInfo.savePackageName}.service.$serviceClass;&#10;import $!{tableInfo.savePackageName}.vo.$!{tableInfo.name}Vo;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.web.bind.annotation.DeleteMapping;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.PathVariable;&#10;import org.springframework.web.bind.annotation.PostMapping;&#10;import org.springframework.web.bind.annotation.PutMapping;&#10;import org.springframework.web.bind.annotation.RequestBody;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;import javax.validation.Valid;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;控制层&quot;)&#10;@Slf4j&#10;@RestController&#10;@RequestMapping(&quot;/api/v1/$!{entityName}s&quot;)&#10;@RequiredArgsConstructor(onConstructor = @__(@Autowired))&#10;public class $!{controllerClass} {&#10;&#10;    private final $serviceClass $serviceName;&#10;    &#10;    private final $!{entityClass}DtoMapping $!{entityName}DtoMapping;&#10;&#10;    /**&#10;     * 查询所有$!{tableComment}&#10;     *&#10;     * @return Result&lt;List&lt;$!{entityClass}Vo&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/all&quot;)&#10;    public Result&lt;List&lt;$!{entityClass}Vo&gt;&gt; get$!{entityClass}All(){&#10;        List&lt;$!{entityClass}Vo&gt; $!{entityName}List = $!{serviceName}.get$!{entityClass}All();&#10;        return Result.success(&quot;查询所有$!{tableComment}成功&quot;, $!{entityName}List);&#10;    }&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param $!{entityName}Bo 查询条件&#10;     * @return Result&lt;List&lt;$!{entityClass}Vo&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/list&quot;)&#10;    public Result&lt;List&lt;$!{entityClass}Vo&gt;&gt; get$!{entityClass}List($!{entityClass}Bo $!{entityName}Bo){&#10;        $!{entityClass}Dto $!{entityName}Dto = $!{entityName}DtoMapping.sourceToTarget($!{entityName}Bo);&#10;        List&lt;$!{entityClass}Vo&gt; $!{entityName}List = $!{serviceName}.get$!{entityClass}List($!{entityName}Dto);&#10;        return Result.success(&quot;根据条件查询$!{tableComment}成功&quot;, $!{entityName}List);&#10;    }&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param $!{entityName}Bo 查询条件&#10;     * @return Result&lt;PageResult&lt;$!{entityClass}Vo&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/page&quot;)&#10;    public Result&lt;PageResult&lt;$!{entityClass}Vo&gt;&gt; get$!{entityClass}PageList($!{entityClass}Bo $!{entityName}Bo){&#10;        $!{entityClass}Dto $!{entityName}Dto = $!{entityName}DtoMapping.sourceToTarget($!{entityName}Bo);&#10;        PageResult&lt;$!{entityClass}Vo&gt; pageResult = $!{serviceName}.get$!{entityClass}PageList($!{entityName}Dto);&#10;        return Result.success(&quot;根据条件分页查询$!{tableComment}成功&quot;, pageResult);&#10;    }&#10;&#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id $!{tableComment}id&#10;     * @return Result&lt;$!{entityClass}Vo&gt;&#10;     */&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public Result&lt;$!{entityClass}Vo&gt; get$!{entityClass}ById(@PathVariable(&quot;id&quot;) $!pk.shortType id){&#10;        $!{entityClass}Vo $!{entityName}Vo = $!{serviceName}.get$!{entityClass}ById(id);&#10;        return Result.success(&quot;查询$!{tableComment}成功&quot;, $!{entityName}Vo);&#10;    }&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param $!{entityName}Bo $!{tableComment}信息&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @PostMapping&#10;    public Result&lt;Void&gt; save$!{entityClass}(@Valid @RequestBody $!{entityClass}Bo $!{entityName}Bo){&#10;        $!{entityClass}Dto $!{entityName}Dto = $!{entityName}DtoMapping.sourceToTarget($!{entityName}Bo);&#10;        $!{serviceName}.save$!{entityClass}($!{entityName}Dto);&#10;        return Result.success(&quot;新增$!{tableComment}成功&quot;);&#10;    }&#10;&#10;    /**&#10;     * 修改$!{tableComment}&#10;     *&#10;     * @param $!{entityName}Bo $!{tableComment}信息&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public Result&lt;Void&gt; update$!{entityClass}(@PathVariable(&quot;id&quot;) $!pk.shortType id, @RequestBody $!{entityClass}Bo $!{entityName}Bo){&#10;        $!{entityClass}Dto $!{entityName}Dto = $!{entityName}DtoMapping.sourceToTarget($!{entityName}Bo);&#10;        $!{entityName}Dto.setId(id);&#10;        $!{serviceName}.update$!{entityClass}($!{entityName}Dto);&#10;        return Result.success(&quot;更新$!{tableComment}成功&quot;);&#10;    }&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return  Result&lt;rows&gt;&#10;     */&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public Result&lt;Void&gt; delete$!{entityClass}ById(@PathVariable(&quot;id&quot;) $!pk.shortType id){&#10;        $!{serviceName}.delete$!{entityClass}ById(id);&#10;        return Result.success(&quot;删除$!{tableComment}成功&quot;);&#10;    }&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param ids id集合&#10;     * @return  Result&lt;rows&gt;&#10;     */&#10;    @DeleteMapping(&quot;/batch/ids&quot;)&#10;    public Result&lt;Void&gt; batchDeleteByIds(@RequestBody List&lt;$!pk.shortType&gt; ids){&#10;        $!{serviceName}.batchDeleteByIds(ids);&#10;        return Result.success(&quot;批量删除$!{tableComment}成功&quot;);&#10;    }&#10;&#10;}" />
                    <option name="name" value="controller.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Mapper&quot;))&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapper&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapper;&#10;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import $!{tableInfo.savePackageName}.pojo.$!{tableInfo.name};&#10;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;Mapper接口&quot;)&#10;public interface $!{tableName}{&#10;    &#10;    /**&#10;     * 查询所有$!{tableComment}&#10;     *&#10;     * @return List&lt;$!{tableInfo.name}&gt;&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; select$!{tableInfo.name}All();&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return List&lt;$!{tableInfo.name}&gt;&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; select$!{tableInfo.name}List($!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return $!{tableInfo.name}&#10;     */&#10;    $!{tableInfo.name} select$!{tableInfo.name}ById($!pk.shortType id);&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param $!{entityName} $!{tableComment}信息&#10;     * @return rows&#10;     */&#10;    int insert$!{tableInfo.name}($!{tableInfo.name} $!{entityName});&#10;&#10;    /**&#10;     * 修改$!{tableComment}信息&#10;     *&#10;     * @param $!{entityName} $!{tableComment}信息&#10;     * @return rows&#10;     */&#10;    int update$!{tableInfo.name}ById($!{tableInfo.name} $!{entityName});&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return rows&#10;     */&#10;    int delete$!{tableInfo.name}ById($!pk.shortType id);&#10;&#10;    /**&#10;     * 根据id集合批量删除&#10;     *&#10;     * @param ids id集合&#10;     * @return rows&#10;     */&#10;    int batchDeleteByIds(List&lt;$!pk.shortType&gt; ids);&#10;}" />
                    <option name="name" value="mapper.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Feign&quot;))&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/feign&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}feign;&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.PageResult;&#10;import $!{tableInfo.savePackageName}.common.entity.Result;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}Dto;&#10;import $!{tableInfo.savePackageName}.pojo.$!{tableInfo.name};&#10;import org.springframework.cloud.openfeign.FeignClient;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;#tableComment(&quot;feign服务接口&quot;)&#10;@FeignClient(name=&quot;$!{entityName}-service&quot;, path=&quot;/api/v1/$!{entityName}s&quot;)&#10;public interface $!{tableName} {&#10;    &#10;    /**&#10;     * 查询所有$!{tableComment}&#10;     *&#10;     * @return Result&lt;List&lt;$!{tableInfo.name}&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/all&quot;)&#10;    Result&lt;List&lt;$!{tableInfo.name}&gt;&gt; get$!{tableInfo.name}All();&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表&#10;     *&#10;     * @param dto 查询条件&#10;     * @return Result&lt;List&lt;$!{tableInfo.name}&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/list&quot;)&#10;    Result&lt;List&lt;$!{tableInfo.name}&gt;&gt; get$!{tableInfo.name}List(@RequestParam $!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 根据条件查询$!{tableComment}列表（分页）&#10;     *&#10;     * @param dto 查询条件&#10;     * @return Result&lt;PageResult&lt;$!{tableInfo.name}&gt;&gt;&#10;     */&#10;    @GetMapping(&quot;/page&quot;)&#10;    Result&lt;PageResult&lt;$!{tableInfo.name}&gt;&gt; get$!{tableInfo.name}PageList(@RequestParam $!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 通过id查询$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return Result&lt;$!{tableInfo.name}&gt;&#10;     */&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    Result&lt;$!{tableInfo.name}&gt; get$!{tableInfo.name}ById(@PathVariable(&quot;id&quot;) $!pk.shortType id);&#10;&#10;    /**&#10;     * 新增$!{tableComment}&#10;     *&#10;     * @param dto $!{tableInfo.comment}信息&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @PostMapping&#10;    Result&lt;Integer&gt; save$!{tableInfo.name}(@RequestBody $!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 修改$!{tableComment}信息&#10;     *&#10;     * @param dto $!{tableInfo.comment}信息&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    Result&lt;Integer&gt; update$!{tableInfo.name}(@PathVariable(&quot;id&quot;) $!{tableInfo.name}Dto dto);&#10;&#10;    /**&#10;     * 根据id删除$!{tableComment}&#10;     *&#10;     * @param id id&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    Result&lt;Integer&gt; delete$!{tableInfo.name}ById(@PathVariable(&quot;id&quot;) $!pk.shortType id);&#10;&#10;    /**&#10;     * 根据id集合批量删除&#10;     *&#10;     * @param ids&#10;     * @return Result&lt;rows&gt;&#10;     */&#10;    @DeleteMapping(&quot;/batch/ids&quot;)&#10;    Result&lt;Integer&gt; batchDeleteByIds(@RequestBody List&lt;$!pk.shortType&gt; ids);&#10;}" />
                    <option name="name" value="feign.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入mybatis支持&#10;$!init&#10;$!mybatisSupport&#10;&#10;##定义初始变量&#10;#set($tableName = $tableInfo.obj.name)&#10;#set($entityName = $tool.firstLowerCase($tableInfo.name))&#10;&#10;##设置保存名称与保存位置&#10;$!callback.setFileName($tool.append($!{tableInfo.name}, &quot;Mapper.xml&quot;))&#10;$!callback.setSavePath($tool.append($modulePath, &quot;/src/main/resources/mappers&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&#10;&lt;mapper namespace=&quot;$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper&quot;&gt;&#10;    &lt;resultMap type=&quot;$!{tableInfo.savePackageName}.pojo.$!{tableInfo.name}&quot; id=&quot;BaseResultMap&quot;&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.obj.name} == &quot;is_deleted&quot;)&#10;        &lt;result property=&quot;deleted&quot; column=&quot;$!column.obj.name&quot; jdbcType=&quot;$!column.ext.jdbcType&quot;/&gt;&#10;#else&#10;        &lt;result property=&quot;$!column.name&quot; column=&quot;$!column.obj.name&quot; jdbcType=&quot;$!column.ext.jdbcType&quot;/&gt;&#10;#end&#10;#end&#10;    &lt;/resultMap&gt;&#10;&#10;    &lt;sql id=&quot;BaseSql&quot;&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{velocityCount} == $!{tableInfo.fullColumn.size()})&#10;        $!{column.obj.name}&#10;    #else&#10;        $!{column.obj.name},&#10;#end&#10;#end&#10;&lt;/sql&gt;&#10;&#10;    &lt;sql id=&quot;BaseWhere&quot;&gt;&#10;        &lt;where&gt;&#10;        #foreach($column in $tableInfo.fullColumn)&#10;    #if($!{column.name} == &quot;isDeleted&quot;)&#10;&lt;if test=&quot;deleted!=null&quot;&gt;&#10;    #elseif($!{column.type} == &quot;java.lang.String&quot;)&#10;&lt;if test=&quot;$!{column.name}!=null and $!{column.name}!=''&quot;&gt;&#10;    #else&#10;&lt;if test=&quot;$!{column.name}!=null&quot;&gt;&#10;    #end&#10;#if($!{column.name} == &quot;isDeleted&quot;)&#10;            and is_deleted = #{deleted}}&#10;    #else&#10;            and $!{column.obj.name} = #{$!{column.name}}&#10;    #end&#10;        &lt;/if&gt;&#10;        #end&#10;&lt;/where&gt;&#10;    &lt;/sql&gt;&#10;&#10;    &lt;select id=&quot;select$!{tableInfo.name}All&quot; resultMap=&quot;BaseResultMap&quot;&gt;&#10;&#9;&#9;select &lt;include refid=&quot;BaseSql&quot;/&gt;&#10;&#9;&#9;from $!{tableName}&#10;&#9;&lt;/select&gt;&#10;&#10;&#9;&lt;select id=&quot;select$!{tableInfo.name}List&quot; resultMap=&quot;BaseResultMap&quot;&gt;&#10;&#9;&#9;select &lt;include refid=&quot;BaseSql&quot;/&gt;&#10;&#9;&#9;from $!{tableName}&#10;&#9;&#9;&lt;include refid=&quot;BaseWhere&quot;/&gt;&#10;&#9;&lt;/select&gt;&#10;&#10;&#9;&lt;select id=&quot;select$!{tableInfo.name}ById&quot; resultMap=&quot;BaseResultMap&quot;&gt;&#10;&#9;&#9;select &lt;include refid=&quot;BaseSql&quot;/&gt;&#10;&#9;&#9;from $!{tableName}&#10;&#9;&#9;where id = #{id}&#10;&#9;&lt;/select&gt;&#10;&#10;&#9;&lt;insert id=&quot;insert$!{tableInfo.name}&quot; parameterType=&quot;$!{tableInfo.savePackageName}.pojo.$!{tableInfo.name}&quot;&#10;&#9;    useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt;&#10;&#9;    insert into $!{tableName}&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if($!{velocityCount} == $!{tableInfo.fullColumn.size()})&#10;        $!{column.obj.name})&#10;    #elseif($!{velocityCount} == 1)&#10;            ($!{column.obj.name},&#10;    #else&#10;        $!{column.obj.name},&#10;    #end&#10;#end&#10;&#9;values&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if($!{velocityCount} == $!{tableInfo.fullColumn.size()})&#10;        #{$!{column.name}})&#10;    #elseif($!{velocityCount} == 1)&#10;            (#{$!{column.name}},&#10;    #else&#10;#if($!{column.name} == &quot;isDeleted&quot;)&#10;        #{deleted},&#10;#else&#10;        #{$!{column.name}},&#10;#end&#10;    #end&#10;#end&#10;&lt;/insert&gt;&#10;    &#10;    &lt;update id=&quot;update$!{tableInfo.name}ById&quot; parameterType=&quot;$!{tableInfo.savePackageName}.pojo.$!{tableInfo.name}&quot;&gt;&#10;&#9;    update $!{tableName}&#10;&#9;    &lt;set&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($!{column.name} == &quot;isDeleted&quot;)&#10;            &lt;if test=&quot;deleted!=null&quot;&gt;&#10;                is_deleted = #{deleted},&#10;            &lt;/if&gt;    &#10;#elseif($!{column.name} != &quot;id&quot;)&#10;    #if($!{column.type} == &quot;java.lang.String&quot;)&#10;        &lt;if test=&quot;$!{column.name}!=null and $!{column.name}!=''&quot;&gt;&#10;&#9;#else&#10;&#9;    &lt;if test=&quot;$!{column.name}!=null&quot;&gt;&#10;&#9;#end&#10;            $!{column.obj.name} = #{$!{column.name}},&#10;&#9;        &lt;/if&gt;&#10;#end&#10;#end&#10;        &lt;/set&gt;&#10;&#9;    where id = #{id}&#10;&#9;&lt;/update&gt;&#10;&#10;&#9;&lt;delete id=&quot;delete$!{tableInfo.name}ById&quot;&gt;&#10;&#9;&#9;delete from $!{tableName}&#10;&#9;&#9;where id = #{id}&#10;&#9;&lt;/delete&gt;&#10;&#10;&#9;&lt;delete id=&quot;batchDeleteByIds&quot;&gt;&#10;&#9;&#9;delete from $!{tableName}&#10;&#9;&#9;where id in&#10;&#9;&#9;&lt;foreach collection=&quot;list&quot; item=&quot;id&quot; open=&quot;(&quot; close=&quot;)&quot; separator=&quot;,&quot;&gt;&#10;&#9;&#9;&#9;#{id}&#10;&#9;&#9;&lt;/foreach&gt;&#10;&#9;&lt;/delete&gt;&#10;&lt;/mapper&gt;" />
                    <option name="name" value="mapper.xml" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;Result.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import $!{tableInfo.savePackageName}.common.enums.ResultCodeEnum;&#10;import lombok.Data;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;#classComment(&quot;响应结果封装实体&quot;) &#10;@Data&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class Result&lt;T&gt; {&#10;    &#10;    private boolean success;//是否成功&#10;    private Integer code;//返回码&#10;    private String message;//返回消息&#10;    private T data;//返回数据&#10;&#10;    private Map&lt;String,Object&gt; extend;//扩展数据&#10;    &#10;    public Result() {&#10;    }&#10;&#10;    public Result(boolean flag, Integer code, String message, T data) {&#10;        this.success = flag;&#10;        this.code = code;&#10;        this.message = message;&#10;        this.data = data;&#10;    }&#10;&#10;    public Result(boolean flag, Integer code, String message) {&#10;        this.success = flag;&#10;        this.code = code;&#10;        this.message = message;&#10;    }&#10;&#10;    /**&#10;     * 响应成功&#10;     *&#10;     * @param message 提示信息&#10;     * @return Result&lt;Void&gt;&#10;     */&#10;    public static Result&lt;Void&gt; success(String message){&#10;        return new Result&lt;&gt;(true, ResultCodeEnum.SUCCESS.getCode(), message);&#10;    }&#10;&#10;    /**&#10;     * 响应成功&#10;     *&#10;     * @param message 提示信息&#10;     * @param data 响应数据&#10;     * @return Result&lt;T&gt;&#10;     */&#10;    public static &lt;T&gt; Result&lt;T&gt; success(String message, T data){&#10;        return new Result&lt;&gt;(true, ResultCodeEnum.SUCCESS.getCode(), message, data);&#10;    }&#10;&#10;    /**&#10;     * 响应失败&#10;     *&#10;     * @param code 状态码&#10;     * @param message 提示信息&#10;     * @return Result&lt;Void&gt;&#10;     */&#10;    public static &lt;T&gt; Result&lt;T&gt; error(Integer code, String message){&#10;        return new Result&lt;&gt;(false, code, message, null);&#10;    }&#10;&#10;    /**&#10;     * 扩展数据&#10;     *&#10;     * @param key key&#10;     * @param value value&#10;     * @return Result&#10;     */&#10;    public Result&lt;T&gt; extend(String key, Object value){&#10;        if(null == extend){&#10;            extend = new HashMap&lt;&gt;();&#10;        }&#10;        this.extend.put(key, value);&#10;        return this;&#10;    }&#10;}" />
                    <option name="name" value="result.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;PageResult.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import com.fasterxml.jackson.annotation.JsonInclude;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.util.List;&#10;&#10;#classComment(&quot;分页结果实体&quot;) &#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;@Builder&#10;@JsonInclude(JsonInclude.Include.NON_NULL)&#10;public class PageResult&lt;T&gt; {&#10;&#10;    private Long total;//总记录数&#10;    private Integer totalPage;// 总页数&#10;    private List&lt;T&gt; rows;//记录&#10;    private Integer page;&#10;    private Integer size;&#10;    private Boolean hasNext;&#10;    private Boolean hasPrevious;&#10;&#10;    public PageResult(Long total, Integer totalPage, List&lt;T&gt; rows) {&#10;        this.total = total;&#10;        this.totalPage = totalPage;&#10;        this.rows = rows;&#10;    }&#10;}" />
                    <option name="name" value="pageResult.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;PageRequest.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/entity&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.entity&quot;)&#10;&#10;import lombok.Setter;&#10;import java.io.Serializable;&#10;&#10;#classComment(&quot;分页请求基类&quot;) &#10;@Setter&#10;public class PageRequest implements Serializable{&#10;    &#10;    private Integer size;&#10;    private Integer page;&#10;    private String orderBy;&#10;&#10;    public Integer getSize() {&#10;        if (this.size == null || this.size &lt; 0 || this.size &gt; 50){&#10;            setSize(10);&#10;        }&#10;        return size;&#10;    }&#10;&#10;    public Integer getPage() {&#10;        if (this.page == null || this.page &lt; 0) {&#10;            setPage(1);&#10;        }&#10;        return page;&#10;    }&#10;&#10;    public String getOrderBy() {&#10;        return orderBy;&#10;    }&#10;}" />
                    <option name="name" value="pageRequest.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ResultCodeEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;import lombok.Getter;&#10;&#10;#classComment(&quot;响应状态码&quot;) &#10;@Getter&#10;public enum ResultCodeEnum {&#10;&#10;    SUCCESS(20000,&quot;成功&quot;),&#10;    PARAM_ERROR(21003, &quot;参数不正确&quot;),&#10;    ;&#10;&#10;    private final Integer code;&#10;&#10;&#9;private final String message;&#10;&#9;&#10;&#9;ResultCodeEnum(Integer code, String message) {&#10;&#9;&#9;this.code = code;&#10;&#9;&#9;this.message = message;&#10;&#9;}&#10;}" />
                    <option name="name" value="resultCodeEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!init&#10;$!define&#10;##定义初始变量&#10;#set($entityClass = $tableInfo.name.toUpperCase())&#10;#set($tableComment = $tableInfo.comment.replace(&quot;表&quot;,&quot;&quot;))&#10;##设置回调&#10;$!callback.setFileName(&quot;ExceptionEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.exception.ServiceExceptionAssert;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import lombok.NoArgsConstructor;&#10;&#10;#classComment(&quot;异常枚举定义&quot;) &#10;@Getter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public enum  ExceptionEnum implements ServiceExceptionAssert {&#10;    &#10;    INTERNAL_SERVER_ERROR(500, &quot;服务器打酱油了，请稍后再试~&quot;),&#10;    USERNAME_NOT_FOUND(400,&quot;用户名为空&quot;),&#10;    PASSWORD_NOT_FOUND(400,&quot;密码为空&quot;),&#10;    #foreach($table in $tableInfoList)&#10;$table.obj.name.toUpperCase()_IS_NOT_EXIST(400,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)不存在&quot;),&#10;    $table.obj.name.toUpperCase()_SAVE_ERROR(500,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)保存失败&quot;),&#10;    $table.obj.name.toUpperCase()_UPDATE_ERROR(500,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)更新失败&quot;),&#10;    $table.obj.name.toUpperCase()_DELETE_ERROR(500,&quot;$table.comment.replace(&quot;表&quot;,&quot;&quot;)删除失败&quot;),&#10;    #end&#10;;&#10;&#10;    private Integer code;&#10;    private String message;&#10;}" />
                    <option name="name" value="exceptionEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;GlobalExceptionHandler.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.entity.Result;&#10;import $!{tableInfo.savePackageName}.common.enums.IExceptionEnum;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.apache.commons.lang3.StringUtils;&#10;import org.springframework.context.support.DefaultMessageSourceResolvable;&#10;import org.springframework.http.HttpHeaders;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.http.converter.HttpMessageNotReadableException;&#10;import org.springframework.lang.Nullable;&#10;import org.springframework.validation.BindException;&#10;import org.springframework.validation.FieldError;&#10;import org.springframework.web.bind.MethodArgumentNotValidException;&#10;import org.springframework.web.bind.annotation.ExceptionHandler;&#10;import org.springframework.web.bind.annotation.RestControllerAdvice;&#10;import org.springframework.web.context.request.WebRequest;&#10;import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;&#10;import org.springframework.web.util.WebUtils;&#10;&#10;import javax.validation.ConstraintViolationException;&#10;import java.nio.file.AccessDeniedException;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;    &#10;#classComment(&quot;统一异常处理类&quot;) &#10;@Slf4j&#10;@RestControllerAdvice&#10;public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {&#10;&#10;    /**&#10;     * 处理单个参数校验异常&#10;     *&#10;     * @param e ConstraintViolationException&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(ConstraintViolationException.class)&#10;    public ResponseEntity&lt;Object&gt; handleConstraintViolationException(ConstraintViolationException e) {&#10;        String message = e.getMessage();&#10;        message = StringUtils.substringAfterLast(message,&quot;:&quot;).trim();&#10;        log.error(&quot;[统一异常]单个参数校验异常，异常信息:{}&quot;,message);&#10;&#10;        // 生成返回结果&#10;        return createResponseResponseEntity(message, HttpStatus.BAD_REQUEST.value());&#10;    }&#10;&#10;    /**&#10;     * 自定义异常处理&#10;     * @param ex&#10;     * @param body&#10;     * @param headers&#10;     * @param status&#10;     * @param request&#10;     * @return&#10;     */&#10;    @Override&#10;    protected ResponseEntity&lt;Object&gt; handleExceptionInternal(&#10;            Exception ex, @Nullable Object body, HttpHeaders headers, HttpStatus status, WebRequest request) {&#10;        String msg=&quot;&quot;;&#10;        if(ex instanceof BindException){&#10;            //处理普通类型Content-Type参数校验异常&#10;            List&lt;FieldError&gt; fieldErrors = ((BindException)ex).getFieldErrors();&#10;            msg = fieldErrors.stream().map(DefaultMessageSourceResolvable::getDefaultMessage)&#10;                    .collect(Collectors.joining(&quot;|&quot;));&#10;            log.error(&quot;[统一异常]对象参数校验异常，异常信息:{}&quot;, msg);&#10;        }else if(ex instanceof MethodArgumentNotValidException) {&#10;            //处理Content-Type=application/json的参数校验异常&#10;            List&lt;FieldError&gt; fieldErrors = ((MethodArgumentNotValidException) ex).getBindingResult().getFieldErrors();&#10;            msg = fieldErrors.stream().map(DefaultMessageSourceResolvable::getDefaultMessage)&#10;                    .collect(Collectors.joining(&quot;|&quot;));&#10;            log.error(&quot;[统一异常]对象参数校验异常，异常信息:{}&quot;,msg);&#10;        } else if (ex instanceof HttpMessageNotReadableException){&#10;            //处理请求体为空异常&#10;            String message = ex.getMessage();&#10;            log.error(&quot;[统一异常]参数错误异常，异常信息，{}&quot;, message);&#10;            if(message.contains(&quot;JSON parse error&quot;)) {&#10;                String paramName = StringUtils.substringBetween(message, &quot;[\&quot;&quot;, &quot;\&quot;]&quot;);&#10;                msg = paramName + &quot;: &quot; + StringUtils.substring(message,&#10;                        message.indexOf(&quot;problem:&quot;) + 8, message.indexOf(&quot;;&quot;)).trim();&#10;            } else if (message.contains(&quot;Required request body is missing&quot;)){&#10;                msg = StringUtils.substringBefore(message,&quot;:&quot;).trim();&#10;            } else {&#10;                msg = StringUtils.substringBefore(message,&quot;;&quot;).trim();&#10;            }&#10;        }else {&#10;            //其他异常&#10;            msg = ex.getMessage();&#10;        }&#10;&#10;        if (HttpStatus.INTERNAL_SERVER_ERROR.equals(status)) {&#10;            request.setAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE, ex, WebRequest.SCOPE_REQUEST);&#10;        }&#10;        log.error(&quot;[统一异常]{}异常，异常信息:{}&quot;, ex.getClass().getSimpleName(), msg);&#10;        return createResponseResponseEntity(msg, status.value());&#10;    }&#10;&#10;    /**&#10;     * 处理403异常&#10;     *&#10;     * @param e AccessDeniedException&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(AccessDeniedException.class)&#10;    public ResponseEntity&lt;Object&gt; handleAccessDeniedException(AccessDeniedException e) {&#10;        String message = e.getMessage();&#10;        log.error(&quot;[统一异常]拒绝访问异常，异常信息，{}&quot;, message);&#10;&#10;        // 生成返回结果&#10;        return createResponseResponseEntity(message, HttpStatus.FORBIDDEN.value());&#10;    }&#10;&#10;    /**&#10;     * 处理自定义业务异常&#10;     *&#10;     * @param cause 异常&#10;     * @param e ServiceException&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(ServiceException.class)&#10;    public ResponseEntity&lt;Object&gt; handleException(Throwable cause, ServiceException e){&#10;        String message;&#10;        int code;&#10;        IExceptionEnum exceptionEnum = e.getExceptionEnum();&#10;        if(null != exceptionEnum){&#10;            message = exceptionEnum.getMessage();&#10;            code = exceptionEnum.getCode();&#10;        }else {&#10;            message = e.getMessage();&#10;            code = e.getCode();&#10;        }&#10;        log.error(&quot;[统一异常]ServiceException异常，异常信息:{}&quot;, message);&#10;        &#10;        // 记录堆栈信息&#10;        final Writer result = new StringWriter();&#10;        final PrintWriter printWriter = new PrintWriter(result);&#10;        cause.printStackTrace(printWriter);&#10;        log.error(&quot;[统一异常]其他异常，堆栈信息：{}&quot;, result);&#10;&#10;        // 生成返回结果&#10;        return Result.error(code, message);&#10;    }&#10;&#10;    /**&#10;     * 其他异常统一处理&#10;     *&#10;     * @param cause 异常&#10;     * @param e Exception&#10;     * @return ResponseEntity&#10;     */&#10;    @ExceptionHandler(Exception.class)&#10;    public ResponseEntity&lt;Object&gt; exceptionHandler(Throwable cause, Exception e) {&#10;        log.error(&quot;[统一异常]其他异常，异常:{}&quot;, e.getClass().toString());&#10;        String message = e.getMessage();&#10;        log.error(&quot;[统一异常]其他异常，异常信息，{}&quot;, message);&#10;        &#10;        // 记录堆栈信息&#10;        final Writer result = new StringWriter();&#10;        final PrintWriter printWriter = new PrintWriter(result);&#10;        cause.printStackTrace(printWriter);&#10;        log.error(&quot;[统一异常]其他异常，堆栈信息：{}&quot;, result);&#10;&#10;        // 生成返回结果&#10;        return Result.error(HttpStatus.INTERNAL_SERVER_ERROR.value(), message);&#10;    }&#10;&#10;    /**&#10;     * 返回异常处理结果&#10;     *&#10;     * @param msg 异常信息&#10;     * @param status 状态码&#10;     * @return ResponseEntity&#10;     */&#10;    private ResponseEntity&lt;Object&gt; createResponseResponseEntity(String msg, int status) {&#10;        // 生成返回结果&#10;        Result&lt;Object&gt; result = Result.error(status, msg);&#10;        return ResponseEntity.status(status).body(result);&#10;    }&#10;}" />
                    <option name="name" value="globalExceptionHandler.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ServiceException.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.enums.IExceptionEnum;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import lombok.NoArgsConstructor;&#10;&#10;#classComment(&quot;自定义业务异常&quot;) &#10;@Getter&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class ServiceException extends RuntimeException{&#10;&#10;    private IExceptionEnum exceptionEnum;&#10;&#10;    private int code;&#10;&#10;    private String msg;&#10;&#10;    public ServiceException(IExceptionEnum exceptionEnum) {&#10;        super(exceptionEnum.getMessage());&#10;        this.exceptionEnum = exceptionEnum;&#10;    }&#10;&#10;    public ServiceException(int code, String msg) {&#10;        super(msg);&#10;        this.code = code;&#10;        this.msg = msg;&#10;    }&#10;}" />
                    <option name="name" value="serviceException.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;Assert.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import java.util.function.Predicate;&#10;&#10;#classComment(&quot;异常断言接口&quot;) &#10;public interface Assert {&#10;&#10;    /**&#10;     * 创建异常&#10;     * @return {@link RuntimeException}&#10;     */&#10;    RuntimeException newException();&#10;&#10;    /**&#10;     * 创建异常&#10;     * @param code 错误码&#10;     * @param msg 错误提示&#10;     * @return {@link RuntimeException}&#10;     */&#10;    RuntimeException newException(int code, String msg);&#10;&#10;    /**&#10;     * 如predicate为true，则抛出异常&#10;     *&#10;     * @param predicate {@link Predicate}&#10;     * @param args 待判断对象&#10;     */&#10;    default &lt;T&gt; void assertException(Predicate&lt;? super T&gt; predicate, T args) {&#10;        if (predicate.test(args)) {&#10;            throw newException();&#10;        }&#10;    }&#10;    &#10;     /**&#10;     * 抛出自定义异常&#10;     *&#10;     */&#10;    default &lt;T&gt; void assertException() {&#10;        throw newException();&#10;    }&#10;&#10;    /**&#10;     * 抛出自定义异常&#10;     *&#10;     * @param code 错误码&#10;     * @param msg 错误提示&#10;     */&#10;    default void assertException(int code, String msg) {&#10;        throw newException(code, msg);&#10;    }&#10;}" />
                    <option name="name" value="assert.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ServiceExceptionAssert.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.enums.IExceptionEnum;&#10;&#10;#classComment(&quot;业务异常断言接口&quot;) &#10;public interface ServiceExceptionAssert extends IExceptionEnum, Assert{&#10;&#10;    /**&#10;     * 创建异常&#10;     *&#10;     * @return {@link RuntimeException}&#10;     */&#10;    @Override&#10;    default RuntimeException newException(){&#10;        return new ServiceException(this);&#10;    }&#10;&#10;    /**&#10;     * 创建异常&#10;     *&#10;     * @param code 错误码&#10;     * @param msg 错误提示&#10;     * @return {@link RuntimeException}&#10;     */&#10;    @Override&#10;    default RuntimeException newException(int code, String msg){&#10;        return new ServiceException(code, msg);&#10;    }&#10;}" />
                    <option name="name" value="serviceExceptionAssert.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;ServletResponseStatusEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Getter;&#10;import org.springframework.http.HttpStatus;&#10;&#10;import java.util.Objects;&#10;import java.util.stream.Stream;&#10;&#10;#classComment(&quot;servlet异常和状态码枚举&quot;) &#10;@Getter&#10;@AllArgsConstructor&#10;public enum ServletResponseStatusEnum {&#10;&#10;    HttpRequestMethodNotSupportedException(&quot;HttpRequestMethodNotSupportedException&quot;,&#10;            HttpStatus.METHOD_NOT_ALLOWED.value()),&#10;    HttpMediaTypeNotSupportedException(&quot;HttpMediaTypeNotSupportedException&quot;,&#10;            HttpStatus.UNSUPPORTED_MEDIA_TYPE.value()),&#10;    HttpMediaTypeNotAcceptableException(&quot;HttpMediaTypeNotAcceptableException&quot;,&#10;            HttpStatus.NOT_ACCEPTABLE.value()),&#10;    MissingPathVariableException(&quot;MissingPathVariableException&quot;,&#10;            HttpStatus.INTERNAL_SERVER_ERROR.value()),&#10;    MissingServletRequestParameterException(&quot;MissingServletRequestParameterException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    ServletRequestBindingException(&quot;ServletRequestBindingException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    ConversionNotSupportedException(&quot;ConversionNotSupportedException&quot;,&#10;            HttpStatus.INTERNAL_SERVER_ERROR.value()),&#10;    TypeMismatchException(&quot;TypeMismatchException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    HttpMessageNotReadableException(&quot;HttpMessageNotReadableException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    HttpMessageNotWritableException(&quot;HttpMessageNotWritableException&quot;,&#10;            HttpStatus.INTERNAL_SERVER_ERROR.value()),&#10;    MethodArgumentNotValidException(&quot;MethodArgumentNotValidException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    MissingServletRequestPartException(&quot;MissingServletRequestPartException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    NoHandlerFoundException(&quot;NoHandlerFoundException&quot;,&#10;            HttpStatus.NOT_FOUND.value()),&#10;    AsyncRequestTimeoutException(&quot;AsyncRequestTimeoutException&quot;,&#10;            HttpStatus.SERVICE_UNAVAILABLE.value()),&#10;    MethodArgumentTypeMismatchException(&quot;MethodArgumentTypeMismatchException&quot;,&#10;            HttpStatus.BAD_REQUEST.value()),&#10;    ;&#10;&#10;    private final String className;&#10;    private final Integer status;&#10;&#10;    public static ServletResponseStatusEnum of(String className){&#10;        Objects.requireNonNull(className);&#10;&#10;        return Stream.of(values())&#10;                .filter(bean -&gt; bean.getClassName().equals(className))&#10;                .findAny()&#10;                .orElseThrow(() -&gt; new IllegalArgumentException(className + &quot; not exists&quot;));&#10;    }&#10;}" />
                    <option name="name" value="servletResponseStatusEnum.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;DefaultErrorController.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/exception&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.exception&quot;)&#10;&#10;import $!{tableInfo.savePackageName}.common.enums.ExceptionEnum;&#10;import org.springframework.boot.web.servlet.error.ErrorController;&#10;import org.springframework.stereotype.Controller;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;&#10;import javax.servlet.http.HttpServletRequest;&#10;&#10;#classComment(&quot;默认错误处理控制器&quot;) &#10;@Controller&#10;public class DefaultErrorController implements ErrorController {&#10;&#10;    @RequestMapping(&quot;/error&quot;)&#10;    public String handleError(HttpServletRequest request){&#10;        //获取statusCode:401,404,500&#10;        Integer statusCode = (Integer) request.getAttribute(&quot;javax.servlet.error.status_code&quot;);&#10;        if(statusCode == 500){&#10;            throw new ServiceException(ExceptionEnum.INTERNAL_SERVER_ERROR);&#10;        }else if(statusCode == 404){&#10;            throw new ServiceException(404, &quot;Not Found&quot;);&#10;        }else if(statusCode == 403){&#10;            throw new ServiceException(403, &quot;Forbidden&quot;);&#10;        }else{&#10;            throw new ServiceException(ExceptionEnum.INTERNAL_SERVER_ERROR);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public String getErrorPath() {&#10;        return &quot;/error&quot;;&#10;    }&#10;}" />
                    <option name="name" value="defaultErrorController.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;##设置回调&#10;$!callback.setFileName(&quot;IExceptionEnum.java&quot;)&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/common/enums&quot;))&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;common.enums&quot;)&#10;&#10;#classComment(&quot;异常枚举父类&quot;) &#10;public interface IExceptionEnum {&#10;&#10;    Integer getCode();&#10;&#10;    String getMessage();&#10;}" />
                    <option name="name" value="iExceptionEnum.java" />
                  </Template>
                </list>
              </option>
              <option name="name" value="mybatis-plus" />
            </TemplateGroup>
          </value>
        </entry>
      </map>
    </option>
    <option name="typeMapperGroupMap">
      <map>
        <entry key="Default">
          <value>
            <TypeMapperGroup>
              <option name="elementList">
                <list>
                  <TypeMapper>
                    <option name="columnType" value="varchar(\(\d+\))?" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="char(\(\d+\))?" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="text" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="decimal(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Double" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="decimal(\(\d+,\d+\))?" />
                    <option name="javaType" value="java.math.BigDecimal" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="integer" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int4" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int8" />
                    <option name="javaType" value="java.lang.Long" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="bigint(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Long" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="datetime" />
                    <option name="javaType" value="java.time.LocalDateTime" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="timestamp" />
                    <option name="javaType" value="java.util.Date" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="boolean" />
                    <option name="javaType" value="java.lang.Boolean" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="tinyint\(1\)" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="longtext" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="tinyint(\(\d+)\)? unsigned" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int(\(\d+\))? unsigned" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="bigint(\(\d+\))? unsigned" />
                    <option name="javaType" value="java.lang.Long" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="tinyint(\(\d+)\)? unsigned" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="date" />
                    <option name="javaType" value="java.time.LocalDate" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="tinyint(\(\d+)\)? unsigned zerofill" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="tinyint unsigned" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                </list>
              </option>
              <option name="name" value="Default" />
            </TypeMapperGroup>
          </value>
        </entry>
      </map>
    </option>
  </component>
</application>